{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"0f1b013c8e9e0086375ceeb8dd3d43a235130f53","modified":1526693864599},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1526461396183},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1526461396184},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1526461396184},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1526461396184},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1526461396184},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1526461396194},{"_id":"source/_posts/AngularJS-uiRouter.md","hash":"f3c6d38cf95c42ca91b3efdb8ceedc2882564f13","modified":1526461396178},{"_id":"source/_posts/.DS_Store","hash":"489d923745dcbc9503370116436d77f816ca2c55","modified":1526564870270},{"_id":"source/_posts/Html-标签.md","hash":"d55e518835c1ec349aea2d051266c8a50beb1771","modified":1526461396180},{"_id":"source/_posts/HexoHelper.md","hash":"00d7977147a853a42abd55409af6368778fa304f","modified":1526461396179},{"_id":"source/_posts/AngularJS.md","hash":"840a2d5b490263e9ab94482996c2941457f91f0b","modified":1526461396179},{"_id":"source/_posts/AngularJS供应商.md","hash":"220111dc7c04681ed746771f9f5dfeec170e3a33","modified":1526461396179},{"_id":"source/_posts/Jquery简写.md","hash":"514b401b5b33ac48665eb9886a0a51ba560b5a78","modified":1526461396180},{"_id":"source/_posts/Namespace.md","hash":"3ac4e5f98f922ebf8c6d5cd99c9cb0a74dc45bc0","modified":1526461396181},{"_id":"source/_posts/Microservice.md","hash":"40c46133fd37d195d7c96c62a1c20c68bc5d7416","modified":1526461396180},{"_id":"source/_posts/UI-Bootstrap.md","hash":"bf68ba5dc5a8debae65a0f66cbc2fc1c5362c780","modified":1526461396181},{"_id":"source/_posts/Technical-Term.md","hash":"48ffd5eeaa6f99e8681f148dca4eb7d9b895f1a4","modified":1526461396181},{"_id":"source/_posts/SpringBoot-Help.md","hash":"46ad337050fef347a77b037681ac4c7d760b3bba","modified":1526461396181},{"_id":"source/_posts/angular-translate.md","hash":"4a9a02232364f14b95a0eaed11f9beccf698e12e","modified":1526461396182},{"_id":"source/_posts/css小记录.md","hash":"209ae33a2e9d22da72a4605c324dc92ae1be7cfc","modified":1526461396182},{"_id":"source/_posts/Webflow配置文件分析.md","hash":"661b9ace691b1094f0428465b95558503103b0b1","modified":1526461396182},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1526461396182},{"_id":"source/_posts/jhipster搭建Mciroservice.md","hash":"eed449373e82a7aea40b02e6d84b5eb0c4882c3e","modified":1526461396183},{"_id":"source/_posts/js自执行函数.md","hash":"99af0baaa113e05394c618519c0bd6f437666494","modified":1526461396183},{"_id":"source/_posts/基于Jhipster的前端框架梳理.md","hash":"23d83e0a227625df3e9516366d0bed7592b8caee","modified":1526461396183},{"_id":"source/_posts/我在AngularJS的曲折路.md","hash":"9d463cdcec6797412368bbf057876050118c159d","modified":1526461396183},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1526461396184},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1526461396184},{"_id":"source/_posts/给阿玖做件小睡衣.md","hash":"e4b4414374262e97f2fcd80d6549cecbeaac4716","modified":1526805445238},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1526461396185},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1526461396185},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1526461396185},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1526461396185},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1526461396186},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1526461396192},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1526461396193},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1526461396193},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1526461396194},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1526461396193},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1526461396195},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1526461396193},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1526461396194},{"_id":"source/_posts/给阿玖做件小睡衣/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1526544365921},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1526461396187},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1526461396187},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1526461396188},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1526461396188},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1526461396187},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1526461396188},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1526461396188},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1526461396189},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1526461396189},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1526461396191},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1526461396191},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1526461396191},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1526461396192},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1526461396192},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1526461396192},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1526461396195},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1526461396199},{"_id":"themes/landscape/source/css/style.styl","hash":"cd1248aadbd06aa57ba515e6eb8b573feceb9eb8","modified":1526804840965},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526461396205},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526461396205},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526461396205},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526461396206},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526461396206},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526461396206},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1526461396208},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1526461396208},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1526461396209},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1526461396209},{"_id":"source/_posts/给阿玖做件小睡衣/6.jpeg","hash":"71427f6f4969e4e3d2d9be5e4a8bf28ebaba8cac","modified":1526550164479},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1526461396189},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1526461396190},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1526461396190},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1526461396190},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1526461396191},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1526461396191},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1526461396196},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1526461396196},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1526461396196},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1526461396197},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1526461396196},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1526461396197},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1526461396197},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1526461396197},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1526461396198},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1526461396198},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1526461396199},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1526461396199},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1526461396200},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1526461396200},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1526461396206},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1526461396207},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1526461396207},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1526461396207},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1526461396203},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1526461396208},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1526461396208},{"_id":"source/_posts/给阿玖做件小睡衣/2.png","hash":"ad1f743ca12d0b5cad00469ba5f48e10b69cc291","modified":1526544269298},{"_id":"source/_posts/给阿玖做件小睡衣/1.png","hash":"301156700c4e9ed97bcdcc1d4515d17fc50f6d61","modified":1526544211227},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1526461396202},{"_id":"source/_posts/给阿玖做件小睡衣/3.jpg","hash":"d259f613991794b657128a042915d81a32efe41a","modified":1526544144465},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1526461396201},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1526461396204},{"_id":"source/_posts/给阿玖做件小睡衣/5.png","hash":"cdf1821ac96d1d9e68222dfa8482d94b3d539d98","modified":1526549706923},{"_id":"source/_posts/给阿玖做件小睡衣/4.png","hash":"dc0937920a912ecd14dfcabfdde83615feff864b","modified":1526549633956},{"_id":"themes/landscape/source/css/_custom.styl","hash":"18db4964bd239fd6883fe5b2399a07add22e3fc4","modified":1526805343272},{"_id":"public/2018/05/17/给阿玖做件小睡衣/index.html","hash":"7db6eb817a91b020dbe3c2d054fe04bd3062be24","modified":1526805462246},{"_id":"public/2018/05/16/hello-world/index.html","hash":"18c817634b1c8036fbc3b03937f687929a64db54","modified":1526804952285},{"_id":"public/2017/01/19/Webflow配置文件分析/index.html","hash":"eb98446ab3d28dd0983364eaacaa1810033028ff","modified":1526804952285},{"_id":"public/2017/01/19/AngularJS供应商/index.html","hash":"6f193dc49c9c3efcbf28bc79c1c3faf4841c9df7","modified":1526804952285},{"_id":"public/2017/01/18/css小记录/index.html","hash":"4bc416451a7ec1639b0666ad013f096389aec5ee","modified":1526804952285},{"_id":"public/2017/01/18/AngularJS-uiRouter/index.html","hash":"61c743ef9ba718188e52c9d659a1a0a39ea3798c","modified":1526804952285},{"_id":"public/2017/01/16/UI-Bootstrap/index.html","hash":"a26996b3712b3f2a44f78970f5d8146cad6230e3","modified":1526804952285},{"_id":"public/2017/01/13/Microservice/index.html","hash":"2499ea8c3640f6e29137dff3cbc395e689b640ff","modified":1526804952285},{"_id":"public/2017/01/12/jhipster搭建Mciroservice/index.html","hash":"9ea83d8f2f286170dc7b0154a4fd34d4e48cb037","modified":1526804952285},{"_id":"public/2017/01/10/HexoHelper/index.html","hash":"9385617c39e253dc9b6f88bf0aa9bcb0544401cb","modified":1526804952285},{"_id":"public/2016/12/15/js自执行函数/index.html","hash":"106049da4b77e3b49d95c6533e4409e25e9cfd0b","modified":1526804952285},{"_id":"public/2016/12/15/Jquery简写/index.html","hash":"8d986e0eef20439e46fdf322fcb2a430a768ab3c","modified":1526804952286},{"_id":"public/2016/12/14/Technical-Term/index.html","hash":"67f683a53024c1832112646963871e0cf6c5d074","modified":1526804952286},{"_id":"public/archives/index.html","hash":"c41cd9892dfb187dc8a8135ee6ac74daaeac3059","modified":1526804952286},{"_id":"public/archives/page/2/index.html","hash":"c399e375974c6225beeea2b93447009db4030cdc","modified":1526804952286},{"_id":"public/archives/2016/index.html","hash":"874d263a3cd97723636cf6403db4970e911e866a","modified":1526804952286},{"_id":"public/archives/2016/12/index.html","hash":"69399922b5779f167aae3b85fbb3b04e090202ae","modified":1526804952286},{"_id":"public/archives/2017/index.html","hash":"4716c239629aa6b19f1099faf6122d7e5b778e08","modified":1526804952286},{"_id":"public/archives/2017/page/2/index.html","hash":"3df865bb59b6d271836a853c92ed8bde3ff0046f","modified":1526804952286},{"_id":"public/archives/2017/01/index.html","hash":"b9a99fec9608dbc077aeb1f255c210c9bb5d4275","modified":1526804952286},{"_id":"public/archives/2017/01/page/2/index.html","hash":"ac078c460716e3883fdc3ba1c063ff648fc2db0b","modified":1526804952286},{"_id":"public/archives/2018/index.html","hash":"3d4ec71e985b7006829e10a2c98ae184fc9dd38b","modified":1526804952286},{"_id":"public/archives/2018/05/index.html","hash":"3a77b2df68d48468f224172422241e02121011b0","modified":1526804952286},{"_id":"public/categories/小玖乐团/index.html","hash":"6aa3ba9e64add5df3c1b6905aa68501d66aadbf4","modified":1526804952286},{"_id":"public/2017/01/17/我在AngularJS的曲折路/index.html","hash":"3325a670fb1d060c9e35d776049725287ec5b3fb","modified":1526804952286},{"_id":"public/2017/01/17/angular-translate/index.html","hash":"bda61e499de6ed945fa8893d67312e2fa017689f","modified":1526804952286},{"_id":"public/2017/01/13/基于Jhipster的前端框架梳理/index.html","hash":"8fc6fdaaf7db8fe42f42fe217d09f01f82848fc4","modified":1526804952286},{"_id":"public/2017/01/12/AngularJS/index.html","hash":"d947731babb3b425ce9ca61853741bcf0e023d7a","modified":1526804952286},{"_id":"public/2017/01/12/Html-标签/index.html","hash":"cfe1d2b0238d4dd80fe50e8519139145d07c200b","modified":1526804952286},{"_id":"public/2017/01/10/SpringBoot-Help/index.html","hash":"9c5d147c361d14116864dc2f6fa88e8840d2b294","modified":1526804952287},{"_id":"public/2016/12/14/Namespace/index.html","hash":"d0433a00e09d6a89a9a32de344a2f8bc6b57cd09","modified":1526804952287},{"_id":"public/index.html","hash":"fdba0980fcf0be794bb96a9b71a8dc19784e95bb","modified":1526805462246},{"_id":"public/page/2/index.html","hash":"68018ff5f2b414c1203e968ecffa3068f6946fc7","modified":1526804952287},{"_id":"public/css/style.css","hash":"145fc0a62042995eeba02140590bcbee170edb2c","modified":1526804952782}],"Category":[{"name":"小玖乐团","_id":"cjhcqjk2v000koyffmezao0h5"}],"Data":[],"Page":[],"Post":[{"title":"AngularJS uiRouter","date":"2017-01-18T01:37:22.000Z","_content":"angular的uiRouter服务学习(5) --- $state.includes()方法\n\n$state.includes方法用于判断当前激活状态是否是指定的状态或者是指定状态的子状态.\n\n$state.includes(stateOrName,params,options)\n\n$state.includes方法接受三个参数,其中第二和第三个都不知道是干啥的...估计也不太用得到,就暂时不管了...\n\nstateOrName:字符串(必填). 是一个状态的名字.\n\n比如当前的激活状态是 \"contacts.details.item\" \n\n如下调用:\n\n$state.includes(\"contacts\");                              //返回true\n$state.includes(\"contacts.details\");                      //返回true\n$state.includes(\"contacts.details.item\");                 //返回true\n$state.includes(\"detail\");                                //返回undefined\n$state.includes(\"item\");                                  //返回undefined\n也可以使用glob语法:\n\n复制代码\n$state.$current.name = 'contacts.details.item.url';\n \n$state.includes(\"*.details.*.*\"); // returns true\n$state.includes(\"*.details.**\"); // returns true\n$state.includes(\"**.item.**\"); // returns true\n$state.includes(\"*.details.item.url\"); // returns true\n$state.includes(\"*.details.*.url\"); // returns true\n$state.includes(\"*.details.*\"); // returns undefined\n$state.includes(\"item.**\"); // returns undefined\n复制代码\n可以用于激活某个tab,让当前项高亮显示:\n\n<li ng-class=\"{active:state.includes('dashboard.report')}\"><a ui-sref=\"dashboard.report\">Reports</a></li>\n需要注意的是,在表达式里直接用$state是不行的,需要在控制器中把$state赋值给$scope下的变量.这样在表达式里才能使用:\n\n复制代码\n    $stateProvider.state('dashboard',{\n        url:'/dashboard',\n        templateUrl:'./tpls/dashboard.html',\n        controller:function($scope,$state){\n            $scope.state = $state;              \n        }\n    })\n复制代码\n\n\nng-class是增加相关样式，可以和class同时使用\n\nclass说明是一个类，class=“active”本身这句是html代码，如果在css里设置样式应该在类名前加个点，如.active{}，从经验看，active这个类一般用在导航条中当前高亮的栏目，或者选项卡中当前活动着的选项\n\nAngular-UI-Router里的指令ui-sref-active 查看当前激活状态并设置 Class\n<li ui-sref-active=\"active\"><a ui-sref=\"about\">About</a></li>\n\n上一篇中讲到使用$http同服务器进行通信，但是功能上比较简单，AngularJS还提供了另外一个可选的服务$resource,使用它可以非常方便的同支持restful的服务单进行数据交互。\n\n五种默认行为：\n\n{\n\n　　“get”:{method:“get”},\n\n　　“save”:{method:“post”}\n\n　　“query”:{method:“get”,isArray:true}\n\n　　“remove”:{method:“delete”}\n\n　　“delete”:{method:“delete”}\n\n}","source":"_posts/AngularJS-uiRouter.md","raw":"---\ntitle: AngularJS uiRouter\ndate: 2017-01-18 09:37:22\ntags:\n---\nangular的uiRouter服务学习(5) --- $state.includes()方法\n\n$state.includes方法用于判断当前激活状态是否是指定的状态或者是指定状态的子状态.\n\n$state.includes(stateOrName,params,options)\n\n$state.includes方法接受三个参数,其中第二和第三个都不知道是干啥的...估计也不太用得到,就暂时不管了...\n\nstateOrName:字符串(必填). 是一个状态的名字.\n\n比如当前的激活状态是 \"contacts.details.item\" \n\n如下调用:\n\n$state.includes(\"contacts\");                              //返回true\n$state.includes(\"contacts.details\");                      //返回true\n$state.includes(\"contacts.details.item\");                 //返回true\n$state.includes(\"detail\");                                //返回undefined\n$state.includes(\"item\");                                  //返回undefined\n也可以使用glob语法:\n\n复制代码\n$state.$current.name = 'contacts.details.item.url';\n \n$state.includes(\"*.details.*.*\"); // returns true\n$state.includes(\"*.details.**\"); // returns true\n$state.includes(\"**.item.**\"); // returns true\n$state.includes(\"*.details.item.url\"); // returns true\n$state.includes(\"*.details.*.url\"); // returns true\n$state.includes(\"*.details.*\"); // returns undefined\n$state.includes(\"item.**\"); // returns undefined\n复制代码\n可以用于激活某个tab,让当前项高亮显示:\n\n<li ng-class=\"{active:state.includes('dashboard.report')}\"><a ui-sref=\"dashboard.report\">Reports</a></li>\n需要注意的是,在表达式里直接用$state是不行的,需要在控制器中把$state赋值给$scope下的变量.这样在表达式里才能使用:\n\n复制代码\n    $stateProvider.state('dashboard',{\n        url:'/dashboard',\n        templateUrl:'./tpls/dashboard.html',\n        controller:function($scope,$state){\n            $scope.state = $state;              \n        }\n    })\n复制代码\n\n\nng-class是增加相关样式，可以和class同时使用\n\nclass说明是一个类，class=“active”本身这句是html代码，如果在css里设置样式应该在类名前加个点，如.active{}，从经验看，active这个类一般用在导航条中当前高亮的栏目，或者选项卡中当前活动着的选项\n\nAngular-UI-Router里的指令ui-sref-active 查看当前激活状态并设置 Class\n<li ui-sref-active=\"active\"><a ui-sref=\"about\">About</a></li>\n\n上一篇中讲到使用$http同服务器进行通信，但是功能上比较简单，AngularJS还提供了另外一个可选的服务$resource,使用它可以非常方便的同支持restful的服务单进行数据交互。\n\n五种默认行为：\n\n{\n\n　　“get”:{method:“get”},\n\n　　“save”:{method:“post”}\n\n　　“query”:{method:“get”,isArray:true}\n\n　　“remove”:{method:“delete”}\n\n　　“delete”:{method:“delete”}\n\n}","slug":"AngularJS-uiRouter","published":1,"updated":"2018-05-16T09:03:16.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk280000oyffgqose1ta","content":"<p>angular的uiRouter服务学习(5) — $state.includes()方法</p>\n<p>$state.includes方法用于判断当前激活状态是否是指定的状态或者是指定状态的子状态.</p>\n<p>$state.includes(stateOrName,params,options)</p>\n<p>$state.includes方法接受三个参数,其中第二和第三个都不知道是干啥的…估计也不太用得到,就暂时不管了…</p>\n<p>stateOrName:字符串(必填). 是一个状态的名字.</p>\n<p>比如当前的激活状态是 “contacts.details.item” </p>\n<p>如下调用:</p>\n<p>$state.includes(“contacts”);                              //返回true<br>$state.includes(“contacts.details”);                      //返回true<br>$state.includes(“contacts.details.item”);                 //返回true<br>$state.includes(“detail”);                                //返回undefined<br>$state.includes(“item”);                                  //返回undefined<br>也可以使用glob语法:</p>\n<p>复制代码<br>$state.$current.name = ‘contacts.details.item.url’;</p>\n<p>$state.includes(“<em>.details.</em>.<em>“); // returns true<br>$state.includes(“</em>.details.<strong>“); // returns true<br>$state.includes(“</strong>.item.<strong>“); // returns true<br>$state.includes(“<em>.details.item.url”); // returns true<br>$state.includes(“</em>.details.<em>.url”); // returns true<br>$state.includes(“</em>.details.*”); // returns undefined<br>$state.includes(“item.</strong>“); // returns undefined<br>复制代码<br>可以用于激活某个tab,让当前项高亮显示:</p>\n<li ng-class=\"{active:state.includes('dashboard.report')}\"><a ui-sref=\"dashboard.report\">Reports</a></li><br>需要注意的是,在表达式里直接用$state是不行的,需要在控制器中把$state赋值给$scope下的变量.这样在表达式里才能使用:<br><br>复制代码<br>    $stateProvider.state(‘dashboard’,{<br>        url:’/dashboard’,<br>        templateUrl:’./tpls/dashboard.html’,<br>        controller:function($scope,$state){<br>            $scope.state = $state;<br>        }<br>    })<br>复制代码<br><br><br>ng-class是增加相关样式，可以和class同时使用<br><br>class说明是一个类，class=“active”本身这句是html代码，如果在css里设置样式应该在类名前加个点，如.active{}，从经验看，active这个类一般用在导航条中当前高亮的栏目，或者选项卡中当前活动着的选项<br><br>Angular-UI-Router里的指令ui-sref-active 查看当前激活状态并设置 Class<br><li ui-sref-active=\"active\"><a ui-sref=\"about\">About</a></li>\n\n<p>上一篇中讲到使用$http同服务器进行通信，但是功能上比较简单，AngularJS还提供了另外一个可选的服务$resource,使用它可以非常方便的同支持restful的服务单进行数据交互。</p>\n<p>五种默认行为：</p>\n<p>{</p>\n<p>　　“get”:{method:“get”},</p>\n<p>　　“save”:{method:“post”}</p>\n<p>　　“query”:{method:“get”,isArray:true}</p>\n<p>　　“remove”:{method:“delete”}</p>\n<p>　　“delete”:{method:“delete”}</p>\n<p>}</p>\n","excerpt":"","more":"<p>angular的uiRouter服务学习(5) — $state.includes()方法</p>\n<p>$state.includes方法用于判断当前激活状态是否是指定的状态或者是指定状态的子状态.</p>\n<p>$state.includes(stateOrName,params,options)</p>\n<p>$state.includes方法接受三个参数,其中第二和第三个都不知道是干啥的…估计也不太用得到,就暂时不管了…</p>\n<p>stateOrName:字符串(必填). 是一个状态的名字.</p>\n<p>比如当前的激活状态是 “contacts.details.item” </p>\n<p>如下调用:</p>\n<p>$state.includes(“contacts”);                              //返回true<br>$state.includes(“contacts.details”);                      //返回true<br>$state.includes(“contacts.details.item”);                 //返回true<br>$state.includes(“detail”);                                //返回undefined<br>$state.includes(“item”);                                  //返回undefined<br>也可以使用glob语法:</p>\n<p>复制代码<br>$state.$current.name = ‘contacts.details.item.url’;</p>\n<p>$state.includes(“<em>.details.</em>.<em>“); // returns true<br>$state.includes(“</em>.details.<strong>“); // returns true<br>$state.includes(“</strong>.item.<strong>“); // returns true<br>$state.includes(“<em>.details.item.url”); // returns true<br>$state.includes(“</em>.details.<em>.url”); // returns true<br>$state.includes(“</em>.details.*”); // returns undefined<br>$state.includes(“item.</strong>“); // returns undefined<br>复制代码<br>可以用于激活某个tab,让当前项高亮显示:</p>\n<li ng-class=\"{active:state.includes('dashboard.report')}\"><a ui-sref=\"dashboard.report\">Reports</a></li><br>需要注意的是,在表达式里直接用$state是不行的,需要在控制器中把$state赋值给$scope下的变量.这样在表达式里才能使用:<br><br>复制代码<br>    $stateProvider.state(‘dashboard’,{<br>        url:’/dashboard’,<br>        templateUrl:’./tpls/dashboard.html’,<br>        controller:function($scope,$state){<br>            $scope.state = $state;<br>        }<br>    })<br>复制代码<br><br><br>ng-class是增加相关样式，可以和class同时使用<br><br>class说明是一个类，class=“active”本身这句是html代码，如果在css里设置样式应该在类名前加个点，如.active{}，从经验看，active这个类一般用在导航条中当前高亮的栏目，或者选项卡中当前活动着的选项<br><br>Angular-UI-Router里的指令ui-sref-active 查看当前激活状态并设置 Class<br><li ui-sref-active=\"active\"><a ui-sref=\"about\">About</a></li>\n\n<p>上一篇中讲到使用$http同服务器进行通信，但是功能上比较简单，AngularJS还提供了另外一个可选的服务$resource,使用它可以非常方便的同支持restful的服务单进行数据交互。</p>\n<p>五种默认行为：</p>\n<p>{</p>\n<p>　　“get”:{method:“get”},</p>\n<p>　　“save”:{method:“post”}</p>\n<p>　　“query”:{method:“get”,isArray:true}</p>\n<p>　　“remove”:{method:“delete”}</p>\n<p>　　“delete”:{method:“delete”}</p>\n<p>}</p>\n"},{"title":"Html 标签","date":"2017-01-12T02:00:06.000Z","_content":"# HTML< a >标签\n\n##  href 属性\n\nhref 属性规定链接的目标：\n```python\n<a href=\"http://www.w3school.com.cn\">W3School</a>\n```\n定义和用法\nhref 属性用于指定超链接目标的 URL。\nhref 属性的值可以是任何有效文档的相对或绝对 URL，包括片段标识符和 JavaScript 代码段。如果用户选择了 < a > 标签中的内容，那么浏览器会尝试检索并显示 href 属性指定的 URL 所表示的文档，或者执行 JavaScript 表达式、方法和函数的列表。\n提示和注释\n注意：< a > 标签中必须提供 href 属性或 name 属性。\n\n\n一个引用其他文档的简单 < a > 标签可以是下列形式：\n```python\n<a href=\"http://www.w3school.com.cn/index.html\"> W3School 在线教程</a>\n```\n浏览器用特殊效果显示短语“W3School 在线教程”（通常是带下划线的蓝色文本），这样用户就会知道它是一个可以链接到其他文档的超链接。就像这样：\nW3School 在线教程\n用户还可以利用浏览器中的选项来自己指定文本颜色、设置链接前和链接后链接文本的颜色。\n提示：可以使用 CSS 伪类向文本超链接添加复杂而多样的样式。\n\n制作图像链接\n更复杂的锚还可以包含图像。下面这个 LOGO 是一个图像链接，点击该图像，可以返回 W3school 的首页：\n```python\n<a href=\"http://www.w3school.com.cn/index.html\">\n<img src=\"/i/w3school_logo_white.gif\" />\n</a>\n```\n上面的代码会为 W3School 的 LOGO 添加一个返回首页的超链接：\nW3School 在线教程\n大多数图形浏览器都会在作为锚的一部分的图像周围放置特殊的边框。通过在 <img> 标签中把图像的 border 属性设置为 0 可以删除超链接的边框。也可以使用 CSS 的边框属性来全局性地改变元素的边框样式。\n语法\n```python\n<a href=\"value\">\n```\n属性值\n值    描述\nURL\t超链接的 URL。可能的值：\n绝对 URL - 指向另一个站点（比如 href=\"http://www.example.com/index.htm\"）\n相对 URL - 指向站点内的某个文件（href=\"index.htm\"）\n锚 URL - 指向页面中的锚（href=\"#top\"）\n\n文件名URL，可以不包含文件后缀\n相对跳转有如下方式，需要了解（以下的例子中，分别以你的例子和带.html尾缀进行演示）：\n1. 本目录的使用（与本文件在相同的文件夹下）：\n\n```python\n<a href=\"123456\">\n<a href=\"123456.html\">\n```\n2. 本目录下的子文件夹（设文件夹名为newdoc）的使用：\n\n```python\n<a href=\"newdoc/123456\">\n<a href=\"newdoc/123456.html\">\n```\n3. 本目录下的子文件夹下的子文件夹（设文件夹名为newdoc2）的使用(如果更多层，则依此类推)：\n\n```python\n<a href=\"newdoc/newdoc2/123456\">\n<a href=\"newdoc/newdoc2/123456.html\">\n```\n4. 本目录上一层父目录的使用：\n\n```python\n<a href=\"../123456\">\n<a href=\"../123456.html\">\n```\n5. 本目录上两层父目录的使用(如果更多层，则依此类推)：\n\n```python\n<a href=\"../../123456\">\n<a href=\"../../123456.html\">\n```\n6. 本目录上一层父目录下一个名为new文件夹下的使用(也就是和本文件所在的文件夹在相同目录下的那个new文件夹)：\n\n```python\n<a href=\"../new/123456\">\n<a href=\"../new/123456.html\">\n```\n## html中a标签href属性的一个坑\n由于公司需要，小菜最近在搞app web开发，目前只有ios和android版本，虽然仅此两个版本，但是依然要考虑浏览器兼容性问题，因为android和ios默认浏览器内核是不一样的。\n\n     先说说兼容性问题是什么。假如有这样一个URL：\n\n          http://www.kpdown.com/search?name=Ben Nadel \n\n     此URL后边有一个name参数，只不过参数的值竟然带了空格，这样的链接，直接用android浏览器访问，是没有问题的，但用ios的浏览器访问，这就是一个错误的URL，会报错的！\n\n     所以，我们会想到编码，name参数的值，可以用encodeURIComponent()方法进行编码，然后再拼接到URL上，这样就安全了（encodeURIComponent是js原生方法，直接用即可）。\n\n     然后，我们可以这样利用超链接：\n```python\n           <a href=\"javascript:openURL('http://www.kpdown.com/search?name=Ben%20Nadel');\" >查询</a> \n```\n     利用openURL这个js方法进行页面跳转（假设有一个openURL方法，其中不涉及任何解码操作）。\n\n     这段代码在android中运行正常，但到了ios中，依然报错，的确是编码了，为什么还是不行呢？\n\n     请看如下代码：\n\n```python\n <a href=\"javascript:openURL('http://www.kpdown.com/search?name=Ben%20Nadel');\">测试href</a>\n <a href=\"javascript:;\" onclick=\"javascript:openURL('http://www.kpdown.com/search?name=Ben%20Nadel');\">测试onclick</a>\n \n <script>\n   function openURL(url){\n     /*\n     * 测试href --print--> http://www.kpdown.com/search?name=Ben Nadel\n     * 测试onclick --print--> http://www.kpdown.com/search?name=Ben%20Nadel\n     */\n     console.log(url);\n   }\n </script>\n```\n \n由此可见：“万恶”的href属性，在调用openURL传参时自动解码，而onclick属性则保持参数原封不动。\n因此，小菜强烈不推荐使用a标签的href属性调用js，onclick方法非常的科学，非常的稳定，非常的正确，href的本意就是用来跳转URL，就不要用它来执行js啦。其实更好的做法是绑定事件，那样代码更好管理，看起来也整洁。\n","source":"_posts/Html-标签.md","raw":"---\ntitle: Html 标签\ndate: 2017-01-12 10:00:06\ntags:\n---\n# HTML< a >标签\n\n##  href 属性\n\nhref 属性规定链接的目标：\n```python\n<a href=\"http://www.w3school.com.cn\">W3School</a>\n```\n定义和用法\nhref 属性用于指定超链接目标的 URL。\nhref 属性的值可以是任何有效文档的相对或绝对 URL，包括片段标识符和 JavaScript 代码段。如果用户选择了 < a > 标签中的内容，那么浏览器会尝试检索并显示 href 属性指定的 URL 所表示的文档，或者执行 JavaScript 表达式、方法和函数的列表。\n提示和注释\n注意：< a > 标签中必须提供 href 属性或 name 属性。\n\n\n一个引用其他文档的简单 < a > 标签可以是下列形式：\n```python\n<a href=\"http://www.w3school.com.cn/index.html\"> W3School 在线教程</a>\n```\n浏览器用特殊效果显示短语“W3School 在线教程”（通常是带下划线的蓝色文本），这样用户就会知道它是一个可以链接到其他文档的超链接。就像这样：\nW3School 在线教程\n用户还可以利用浏览器中的选项来自己指定文本颜色、设置链接前和链接后链接文本的颜色。\n提示：可以使用 CSS 伪类向文本超链接添加复杂而多样的样式。\n\n制作图像链接\n更复杂的锚还可以包含图像。下面这个 LOGO 是一个图像链接，点击该图像，可以返回 W3school 的首页：\n```python\n<a href=\"http://www.w3school.com.cn/index.html\">\n<img src=\"/i/w3school_logo_white.gif\" />\n</a>\n```\n上面的代码会为 W3School 的 LOGO 添加一个返回首页的超链接：\nW3School 在线教程\n大多数图形浏览器都会在作为锚的一部分的图像周围放置特殊的边框。通过在 <img> 标签中把图像的 border 属性设置为 0 可以删除超链接的边框。也可以使用 CSS 的边框属性来全局性地改变元素的边框样式。\n语法\n```python\n<a href=\"value\">\n```\n属性值\n值    描述\nURL\t超链接的 URL。可能的值：\n绝对 URL - 指向另一个站点（比如 href=\"http://www.example.com/index.htm\"）\n相对 URL - 指向站点内的某个文件（href=\"index.htm\"）\n锚 URL - 指向页面中的锚（href=\"#top\"）\n\n文件名URL，可以不包含文件后缀\n相对跳转有如下方式，需要了解（以下的例子中，分别以你的例子和带.html尾缀进行演示）：\n1. 本目录的使用（与本文件在相同的文件夹下）：\n\n```python\n<a href=\"123456\">\n<a href=\"123456.html\">\n```\n2. 本目录下的子文件夹（设文件夹名为newdoc）的使用：\n\n```python\n<a href=\"newdoc/123456\">\n<a href=\"newdoc/123456.html\">\n```\n3. 本目录下的子文件夹下的子文件夹（设文件夹名为newdoc2）的使用(如果更多层，则依此类推)：\n\n```python\n<a href=\"newdoc/newdoc2/123456\">\n<a href=\"newdoc/newdoc2/123456.html\">\n```\n4. 本目录上一层父目录的使用：\n\n```python\n<a href=\"../123456\">\n<a href=\"../123456.html\">\n```\n5. 本目录上两层父目录的使用(如果更多层，则依此类推)：\n\n```python\n<a href=\"../../123456\">\n<a href=\"../../123456.html\">\n```\n6. 本目录上一层父目录下一个名为new文件夹下的使用(也就是和本文件所在的文件夹在相同目录下的那个new文件夹)：\n\n```python\n<a href=\"../new/123456\">\n<a href=\"../new/123456.html\">\n```\n## html中a标签href属性的一个坑\n由于公司需要，小菜最近在搞app web开发，目前只有ios和android版本，虽然仅此两个版本，但是依然要考虑浏览器兼容性问题，因为android和ios默认浏览器内核是不一样的。\n\n     先说说兼容性问题是什么。假如有这样一个URL：\n\n          http://www.kpdown.com/search?name=Ben Nadel \n\n     此URL后边有一个name参数，只不过参数的值竟然带了空格，这样的链接，直接用android浏览器访问，是没有问题的，但用ios的浏览器访问，这就是一个错误的URL，会报错的！\n\n     所以，我们会想到编码，name参数的值，可以用encodeURIComponent()方法进行编码，然后再拼接到URL上，这样就安全了（encodeURIComponent是js原生方法，直接用即可）。\n\n     然后，我们可以这样利用超链接：\n```python\n           <a href=\"javascript:openURL('http://www.kpdown.com/search?name=Ben%20Nadel');\" >查询</a> \n```\n     利用openURL这个js方法进行页面跳转（假设有一个openURL方法，其中不涉及任何解码操作）。\n\n     这段代码在android中运行正常，但到了ios中，依然报错，的确是编码了，为什么还是不行呢？\n\n     请看如下代码：\n\n```python\n <a href=\"javascript:openURL('http://www.kpdown.com/search?name=Ben%20Nadel');\">测试href</a>\n <a href=\"javascript:;\" onclick=\"javascript:openURL('http://www.kpdown.com/search?name=Ben%20Nadel');\">测试onclick</a>\n \n <script>\n   function openURL(url){\n     /*\n     * 测试href --print--> http://www.kpdown.com/search?name=Ben Nadel\n     * 测试onclick --print--> http://www.kpdown.com/search?name=Ben%20Nadel\n     */\n     console.log(url);\n   }\n </script>\n```\n \n由此可见：“万恶”的href属性，在调用openURL传参时自动解码，而onclick属性则保持参数原封不动。\n因此，小菜强烈不推荐使用a标签的href属性调用js，onclick方法非常的科学，非常的稳定，非常的正确，href的本意就是用来跳转URL，就不要用它来执行js啦。其实更好的做法是绑定事件，那样代码更好管理，看起来也整洁。\n","slug":"Html-标签","published":1,"updated":"2018-05-16T09:03:16.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2b0001oyffwvbysd3x","content":"<h1 id=\"HTML-lt-a-gt-标签\"><a href=\"#HTML-lt-a-gt-标签\" class=\"headerlink\" title=\"HTML&lt; a &gt;标签\"></a>HTML&lt; a &gt;标签</h1><h2 id=\"href-属性\"><a href=\"#href-属性\" class=\"headerlink\" title=\"href 属性\"></a>href 属性</h2><p>href 属性规定链接的目标：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=\"http://www.w3school.com.cn\"&gt;W3School&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p>定义和用法<br>href 属性用于指定超链接目标的 URL。<br>href 属性的值可以是任何有效文档的相对或绝对 URL，包括片段标识符和 JavaScript 代码段。如果用户选择了 &lt; a &gt; 标签中的内容，那么浏览器会尝试检索并显示 href 属性指定的 URL 所表示的文档，或者执行 JavaScript 表达式、方法和函数的列表。<br>提示和注释<br>注意：&lt; a &gt; 标签中必须提供 href 属性或 name 属性。</p>\n<p>一个引用其他文档的简单 &lt; a &gt; 标签可以是下列形式：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=\"http://www.w3school.com.cn/index.html\"&gt; W3School 在线教程&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p>浏览器用特殊效果显示短语“W3School 在线教程”（通常是带下划线的蓝色文本），这样用户就会知道它是一个可以链接到其他文档的超链接。就像这样：<br>W3School 在线教程<br>用户还可以利用浏览器中的选项来自己指定文本颜色、设置链接前和链接后链接文本的颜色。<br>提示：可以使用 CSS 伪类向文本超链接添加复杂而多样的样式。</p>\n<p>制作图像链接<br>更复杂的锚还可以包含图像。下面这个 LOGO 是一个图像链接，点击该图像，可以返回 W3school 的首页：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=\"http://www.w3school.com.cn/index.html\"&gt;</div><div class=\"line\">&lt;img src=\"/i/w3school_logo_white.gif\" /&gt;</div><div class=\"line\">&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的代码会为 W3School 的 LOGO 添加一个返回首页的超链接：<br>W3School 在线教程<br>大多数图形浏览器都会在作为锚的一部分的图像周围放置特殊的边框。通过在 <img> 标签中把图像的 border 属性设置为 0 可以删除超链接的边框。也可以使用 CSS 的边框属性来全局性地改变元素的边框样式。<br>语法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"value\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>属性值<br>值    描述<br>URL    超链接的 URL。可能的值：<br>绝对 URL - 指向另一个站点（比如 href=”<a href=\"http://www.example.com/index.htm&quot;）\" target=\"_blank\" rel=\"external\">http://www.example.com/index.htm&quot;）</a><br>相对 URL - 指向站点内的某个文件（href=”index.htm”）<br>锚 URL - 指向页面中的锚（href=”#top”）</p>\n<p>文件名URL，可以不包含文件后缀<br>相对跳转有如下方式，需要了解（以下的例子中，分别以你的例子和带.html尾缀进行演示）：</p>\n<ol>\n<li>本目录的使用（与本文件在相同的文件夹下）：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"123456\"</span>&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"123456.html\"</span>&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>本目录下的子文件夹（设文件夹名为newdoc）的使用：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"newdoc/123456\"</span>&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"newdoc/123456.html\"</span>&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>本目录下的子文件夹下的子文件夹（设文件夹名为newdoc2）的使用(如果更多层，则依此类推)：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"newdoc/newdoc2/123456\"</span>&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"newdoc/newdoc2/123456.html\"</span>&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>本目录上一层父目录的使用：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"../123456\"</span>&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"../123456.html\"</span>&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>本目录上两层父目录的使用(如果更多层，则依此类推)：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"../../123456\"</span>&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"../../123456.html\"</span>&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>本目录上一层父目录下一个名为new文件夹下的使用(也就是和本文件所在的文件夹在相同目录下的那个new文件夹)：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"../new/123456\"</span>&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"../new/123456.html\"</span>&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"html中a标签href属性的一个坑\"><a href=\"#html中a标签href属性的一个坑\" class=\"headerlink\" title=\"html中a标签href属性的一个坑\"></a>html中a标签href属性的一个坑</h2><p>由于公司需要，小菜最近在搞app web开发，目前只有ios和android版本，虽然仅此两个版本，但是依然要考虑浏览器兼容性问题，因为android和ios默认浏览器内核是不一样的。</p>\n<pre><code>先说说兼容性问题是什么。假如有这样一个URL：\n\n     http://www.kpdown.com/search?name=Ben Nadel \n\n此URL后边有一个name参数，只不过参数的值竟然带了空格，这样的链接，直接用android浏览器访问，是没有问题的，但用ios的浏览器访问，这就是一个错误的URL，会报错的！\n\n所以，我们会想到编码，name参数的值，可以用encodeURIComponent()方法进行编码，然后再拼接到URL上，这样就安全了（encodeURIComponent是js原生方法，直接用即可）。\n\n然后，我们可以这样利用超链接：\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=\"javascript:openURL('http://www.kpdown.com/search?name=Ben%20Nadel');\" &gt;查询&lt;/a&gt;</div></pre></td></tr></table></figure>\n<pre><code>利用openURL这个js方法进行页面跳转（假设有一个openURL方法，其中不涉及任何解码操作）。\n\n这段代码在android中运行正常，但到了ios中，依然报错，的确是编码了，为什么还是不行呢？\n\n请看如下代码：\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=\"javascript:openURL('http://www.kpdown.com/search?name=Ben%20Nadel');\"&gt;测试href&lt;/a&gt;</div><div class=\"line\">&lt;a href=\"javascript:;\" onclick=\"javascript:openURL('http://www.kpdown.com/search?name=Ben%20Nadel');\"&gt;测试onclick&lt;/a&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  function openURL(url)&#123;</div><div class=\"line\">    /*</div><div class=\"line\">    * 测试href --print--&gt; http://www.kpdown.com/search?name=Ben Nadel</div><div class=\"line\">    * 测试onclick --print--&gt; http://www.kpdown.com/search?name=Ben%20Nadel</div><div class=\"line\">    */</div><div class=\"line\">    console.log(url);</div><div class=\"line\">  &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>由此可见：“万恶”的href属性，在调用openURL传参时自动解码，而onclick属性则保持参数原封不动。<br>因此，小菜强烈不推荐使用a标签的href属性调用js，onclick方法非常的科学，非常的稳定，非常的正确，href的本意就是用来跳转URL，就不要用它来执行js啦。其实更好的做法是绑定事件，那样代码更好管理，看起来也整洁。</p>\n","excerpt":"","more":"<h1 id=\"HTML-lt-a-gt-标签\"><a href=\"#HTML-lt-a-gt-标签\" class=\"headerlink\" title=\"HTML&lt; a &gt;标签\"></a>HTML&lt; a &gt;标签</h1><h2 id=\"href-属性\"><a href=\"#href-属性\" class=\"headerlink\" title=\"href 属性\"></a>href 属性</h2><p>href 属性规定链接的目标：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=\"http://www.w3school.com.cn\"&gt;W3School&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p>定义和用法<br>href 属性用于指定超链接目标的 URL。<br>href 属性的值可以是任何有效文档的相对或绝对 URL，包括片段标识符和 JavaScript 代码段。如果用户选择了 &lt; a &gt; 标签中的内容，那么浏览器会尝试检索并显示 href 属性指定的 URL 所表示的文档，或者执行 JavaScript 表达式、方法和函数的列表。<br>提示和注释<br>注意：&lt; a &gt; 标签中必须提供 href 属性或 name 属性。</p>\n<p>一个引用其他文档的简单 &lt; a &gt; 标签可以是下列形式：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=\"http://www.w3school.com.cn/index.html\"&gt; W3School 在线教程&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p>浏览器用特殊效果显示短语“W3School 在线教程”（通常是带下划线的蓝色文本），这样用户就会知道它是一个可以链接到其他文档的超链接。就像这样：<br>W3School 在线教程<br>用户还可以利用浏览器中的选项来自己指定文本颜色、设置链接前和链接后链接文本的颜色。<br>提示：可以使用 CSS 伪类向文本超链接添加复杂而多样的样式。</p>\n<p>制作图像链接<br>更复杂的锚还可以包含图像。下面这个 LOGO 是一个图像链接，点击该图像，可以返回 W3school 的首页：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=\"http://www.w3school.com.cn/index.html\"&gt;</div><div class=\"line\">&lt;img src=\"/i/w3school_logo_white.gif\" /&gt;</div><div class=\"line\">&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的代码会为 W3School 的 LOGO 添加一个返回首页的超链接：<br>W3School 在线教程<br>大多数图形浏览器都会在作为锚的一部分的图像周围放置特殊的边框。通过在 <img> 标签中把图像的 border 属性设置为 0 可以删除超链接的边框。也可以使用 CSS 的边框属性来全局性地改变元素的边框样式。<br>语法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"value\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>属性值<br>值    描述<br>URL    超链接的 URL。可能的值：<br>绝对 URL - 指向另一个站点（比如 href=”<a href=\"http://www.example.com/index.htm&quot;）\">http://www.example.com/index.htm&quot;）</a><br>相对 URL - 指向站点内的某个文件（href=”index.htm”）<br>锚 URL - 指向页面中的锚（href=”#top”）</p>\n<p>文件名URL，可以不包含文件后缀<br>相对跳转有如下方式，需要了解（以下的例子中，分别以你的例子和带.html尾缀进行演示）：</p>\n<ol>\n<li>本目录的使用（与本文件在相同的文件夹下）：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"123456\"</span>&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"123456.html\"</span>&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>本目录下的子文件夹（设文件夹名为newdoc）的使用：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"newdoc/123456\"</span>&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"newdoc/123456.html\"</span>&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>本目录下的子文件夹下的子文件夹（设文件夹名为newdoc2）的使用(如果更多层，则依此类推)：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"newdoc/newdoc2/123456\"</span>&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"newdoc/newdoc2/123456.html\"</span>&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>本目录上一层父目录的使用：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"../123456\"</span>&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"../123456.html\"</span>&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>本目录上两层父目录的使用(如果更多层，则依此类推)：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"../../123456\"</span>&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"../../123456.html\"</span>&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>本目录上一层父目录下一个名为new文件夹下的使用(也就是和本文件所在的文件夹在相同目录下的那个new文件夹)：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"../new/123456\"</span>&gt;</div><div class=\"line\">&lt;a href=<span class=\"string\">\"../new/123456.html\"</span>&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"html中a标签href属性的一个坑\"><a href=\"#html中a标签href属性的一个坑\" class=\"headerlink\" title=\"html中a标签href属性的一个坑\"></a>html中a标签href属性的一个坑</h2><p>由于公司需要，小菜最近在搞app web开发，目前只有ios和android版本，虽然仅此两个版本，但是依然要考虑浏览器兼容性问题，因为android和ios默认浏览器内核是不一样的。</p>\n<pre><code>先说说兼容性问题是什么。假如有这样一个URL：\n\n     http://www.kpdown.com/search?name=Ben Nadel \n\n此URL后边有一个name参数，只不过参数的值竟然带了空格，这样的链接，直接用android浏览器访问，是没有问题的，但用ios的浏览器访问，这就是一个错误的URL，会报错的！\n\n所以，我们会想到编码，name参数的值，可以用encodeURIComponent()方法进行编码，然后再拼接到URL上，这样就安全了（encodeURIComponent是js原生方法，直接用即可）。\n\n然后，我们可以这样利用超链接：\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=\"javascript:openURL('http://www.kpdown.com/search?name=Ben%20Nadel');\" &gt;查询&lt;/a&gt;</div></pre></td></tr></table></figure>\n<pre><code>利用openURL这个js方法进行页面跳转（假设有一个openURL方法，其中不涉及任何解码操作）。\n\n这段代码在android中运行正常，但到了ios中，依然报错，的确是编码了，为什么还是不行呢？\n\n请看如下代码：\n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=\"javascript:openURL('http://www.kpdown.com/search?name=Ben%20Nadel');\"&gt;测试href&lt;/a&gt;</div><div class=\"line\">&lt;a href=\"javascript:;\" onclick=\"javascript:openURL('http://www.kpdown.com/search?name=Ben%20Nadel');\"&gt;测试onclick&lt;/a&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  function openURL(url)&#123;</div><div class=\"line\">    /*</div><div class=\"line\">    * 测试href --print--&gt; http://www.kpdown.com/search?name=Ben Nadel</div><div class=\"line\">    * 测试onclick --print--&gt; http://www.kpdown.com/search?name=Ben%20Nadel</div><div class=\"line\">    */</div><div class=\"line\">    console.log(url);</div><div class=\"line\">  &#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>由此可见：“万恶”的href属性，在调用openURL传参时自动解码，而onclick属性则保持参数原封不动。<br>因此，小菜强烈不推荐使用a标签的href属性调用js，onclick方法非常的科学，非常的稳定，非常的正确，href的本意就是用来跳转URL，就不要用它来执行js啦。其实更好的做法是绑定事件，那样代码更好管理，看起来也整洁。</p>\n"},{"title":"HexoHelper","date":"2017-01-10T06:37:46.000Z","_content":"\n# hexo分支提交\ngit add --all\ngit commit -m \"...\"\ngit push origin hexo提交网站相关的文件；\n多秘钥管理问题eval $(ssh-agent)，然后输入ssh-add ~/.ssh/id_rsa_songmaozh；\n\n# master提交\n执行hexo g -d生成网站并部署到GitHub上。\n\n# 创建新文件\nhexo new \"filename\"\n\n# 图片链接\n```python\n![image](http://images2015.cnblogs.com/blog/33454/201607/33454-20160722105819779-322820644.png)\n```\n","source":"_posts/HexoHelper.md","raw":"---\ntitle: HexoHelper\ndate: 2017-01-10 14:37:46\ntags:\n---\n\n# hexo分支提交\ngit add --all\ngit commit -m \"...\"\ngit push origin hexo提交网站相关的文件；\n多秘钥管理问题eval $(ssh-agent)，然后输入ssh-add ~/.ssh/id_rsa_songmaozh；\n\n# master提交\n执行hexo g -d生成网站并部署到GitHub上。\n\n# 创建新文件\nhexo new \"filename\"\n\n# 图片链接\n```python\n![image](http://images2015.cnblogs.com/blog/33454/201607/33454-20160722105819779-322820644.png)\n```\n","slug":"HexoHelper","published":1,"updated":"2018-05-16T09:03:16.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2e0002oyffa1oawqox","content":"<h1 id=\"hexo分支提交\"><a href=\"#hexo分支提交\" class=\"headerlink\" title=\"hexo分支提交\"></a>hexo分支提交</h1><p>git add –all<br>git commit -m “…”<br>git push origin hexo提交网站相关的文件；<br>多秘钥管理问题eval $(ssh-agent)，然后输入ssh-add ~/.ssh/id_rsa_songmaozh；</p>\n<h1 id=\"master提交\"><a href=\"#master提交\" class=\"headerlink\" title=\"master提交\"></a>master提交</h1><p>执行hexo g -d生成网站并部署到GitHub上。</p>\n<h1 id=\"创建新文件\"><a href=\"#创建新文件\" class=\"headerlink\" title=\"创建新文件\"></a>创建新文件</h1><p>hexo new “filename”</p>\n<h1 id=\"图片链接\"><a href=\"#图片链接\" class=\"headerlink\" title=\"图片链接\"></a>图片链接</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![image](http://images2015.cnblogs.com/blog/<span class=\"number\">33454</span>/<span class=\"number\">201607</span>/<span class=\"number\">33454</span><span class=\"number\">-20160722105819779</span><span class=\"number\">-322820644.</span>png)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"hexo分支提交\"><a href=\"#hexo分支提交\" class=\"headerlink\" title=\"hexo分支提交\"></a>hexo分支提交</h1><p>git add –all<br>git commit -m “…”<br>git push origin hexo提交网站相关的文件；<br>多秘钥管理问题eval $(ssh-agent)，然后输入ssh-add ~/.ssh/id_rsa_songmaozh；</p>\n<h1 id=\"master提交\"><a href=\"#master提交\" class=\"headerlink\" title=\"master提交\"></a>master提交</h1><p>执行hexo g -d生成网站并部署到GitHub上。</p>\n<h1 id=\"创建新文件\"><a href=\"#创建新文件\" class=\"headerlink\" title=\"创建新文件\"></a>创建新文件</h1><p>hexo new “filename”</p>\n<h1 id=\"图片链接\"><a href=\"#图片链接\" class=\"headerlink\" title=\"图片链接\"></a>图片链接</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![image](http://images2015.cnblogs.com/blog/<span class=\"number\">33454</span>/<span class=\"number\">201607</span>/<span class=\"number\">33454</span><span class=\"number\">-20160722105819779</span><span class=\"number\">-322820644.</span>png)</div></pre></td></tr></table></figure>\n"},{"title":"AngularJS供应商","date":"2017-01-19T02:21:50.000Z","_content":"引言\n看了很多文章可能还是不太说得出AngularJS中的几个创建供应商(provider)的方法(factory(),service(),provider())到底有啥区别，啥时候该用啥，之前一直傻傻分不清楚，现在来总结一下。\n\n下文中泛指统一用中文，英文即为特指$provide方法中对应方法创建出的东东\n\n供应商==>泛指provider\n服务==>泛指service\n\nprovider==>provider()方法创建的东东\nservice==>service()方法创建的东东\n\n先说说供应商（$provide）\n$provide服务负责告诉Angular如何创造一个新的可注入的东西：即服务。服务会被叫做供应商的东西来定义，你可以使用$provide来创建一个供应商。你需要使用$provide中的provider()方法来定义一个供应商，同时你也可以通过要求$provide被注入到一个应用的config函数中来获得$provide服务。\n\n上面的描述是官方wiki的翻译版，如果有些绕的话，看下这张图：\nhttps://segmentfault.com/img/bVm9Et\n\n$provide是一个服务，在Auto模块中\n这个服务下面有好多方法，是用来定义供应商\n而供应商是用来提供服务的，被注入来注入去的东西就是供应商们提供的服务了\n下面是一个例子：\n\nmyMod.config(function($provide) {\n  $provide.provider('greeting', function() {\n    this.$get = function() {\n      return function(name) {\n        alert(\"Hello, \" + name);\n      };\n    };\n  });\n});\n这个例子可以说是最终形态，先大概看下\n\n定义供应商的方法们\nAngularJS用$provide去定义一个供应商,这个$provide有5个用来创建供应商的方法：\n\nconstant\nvalue\nservice\nfactory\nprovider\ndecorator 我没有说我也是，我只是路过o(╯□╰)o\nConstant\n定义常量用的，这货定义的值当然就不能被改变，它可以被注入到任何地方，但是不能被装饰器(decorator)装饰\n\nvar app = angular.module('app', []);\n \napp.config(function ($provide) {\n  $provide.constant('movieTitle', 'The Matrix');\n});\n \napp.controller('ctrl', function (movieTitle) {\n  expect(movieTitle).toEqual('The Matrix');\n});\n语法糖：\n\napp.constant('movieTitle', 'The Matrix');\nValue\n这货可以是string,number甚至function,它和constant的不同之处在于，它可以被修改，不能被注入到config中，但是它可以被decorator装饰\n\nvar app = angular.module('app', []);\n \napp.config(function ($provide) {\n  $provide.value('movieTitle', 'The Matrix')\n});\n \napp.controller('ctrl', function (movieTitle) {\n  expect(movieTitle).toEqual('The Matrix');\n})\n语法糖：\n\napp.value('movieTitle', 'The Matrix');\nService\n它是一个可注入的构造器，在AngularJS中它是单例的，用它在Controller中通信或者共享数据都很合适\n\nvar app = angular.module('app' ,[]);\n \napp.config(function ($provide) {\n  $provide.service('movie', function () {\n    this.title = 'The Matrix';\n  });\n});\n \napp.controller('ctrl', function (movie) {\n  expect(movie.title).toEqual('The Matrix');\n});\n语法糖：\n\napp.service('movie', function () {\n  this.title = 'The Matrix';\n});\n在service里面可以不用返回东西，因为AngularJS会调用new关键字来创建对象。但是返回一个自定义对象好像也不会出错。\n\nFactory\n它是一个可注入的function，它和service的区别就是：factory是普通function，而service是一个构造器(constructor)，这样Angular在调用service时会用new关键字，而调用factory时只是调用普通的function，所以factory可以返回任何东西，而service可以不返回(可查阅new关键字的作用)\n\nvar app = angular.module('app', []);\n \napp.config(function ($provide) {\n  $provide.factory('movie', function () {\n    return {\n      title: 'The Matrix';\n    }\n  });\n});\n \napp.controller('ctrl', function (movie) {\n  expect(movie.title).toEqual('The Matrix');\n});\n语法糖：\n\napp.factory('movie', function () {\n  return {\n    title: 'The Matrix';\n  }\n});\nfactory可以返回任何东西，它实际上是一个只有$get方法的provider\n\nProvider\nprovider是他们的老大，上面的几乎(除了constant)都是provider的封装，provider必须有一个$get方法，当然也可以说provider是一个可配置的factory\n\nvar app = angular.module('app', []);\n \napp.provider('movie', function () {\n  var version;\n  return {\n    setVersion: function (value) {\n      version = value;\n    },\n    $get: function () {\n      return {\n          title: 'The Matrix' + ' ' + version\n      }\n    }\n  }\n});\n \napp.config(function (movieProvider) {\n  movieProvider.setVersion('Reloaded');\n});\n \napp.controller('ctrl', function (movie) {\n  expect(movie.title).toEqual('The Matrix Reloaded');\n});\n注意这里config方法注入的是movieProvider，上面定义了一个供应商叫movie，但是注入到config中不能直接写movie，因为前文讲了注入的那个东西就是服务，是供应商提供出来的，而config中又只能注入供应商（两个例外是$provide和$injector），所以用驼峰命名法写成movieProvider，Angular就会帮你注入它的供应商。（更详细可参考文末官方wiki翻译版中的配置provider）\n\nDecorator\n这个比较特殊，它不是provider,它是用来装饰其他provider的，而前面也说过，他不能装饰Constant，因为实际上Constant不是通过provider()方法创建的。\n\nvar app = angular.module('app', []);\n \napp.value('movieTitle', 'The Matrix');\n \napp.config(function ($provide) {\n  $provide.decorator('movieTitle', function ($delegate) {\n    return $delegate + ' - starring Keanu Reeves';\n  });\n});\n \napp.controller('myController', function (movieTitle) {\n  expect(movieTitle).toEqual('The Matrix - starring Keanu Reeves');\n});\n总结\n所有的供应商都只被实例化一次，也就说他们都是单例的\n除了constant，所有的供应商都可以被装饰器(decorator)装饰\nvalue就是一个简单的可注入的值\nservice是一个可注入的构造器\nfactory是一个可注入的方法\ndecorator可以修改或封装其他的供应商，当然除了constant\nprovider是一个可配置的factory\n最后来看一张对比图：\nhttps://segmentfault.com/img/bVnbg2\n\n最近，在项目中遇到需要在 config 阶段中注入一些service的情况，然而 factory，service 还有 value 是不能在 config 中注入的，先看一个清单:\n服务/阶段\tprovider\tfactory\tservice\tvalue\tconstant\nconfig阶段\tYes\tNo\tNo\tNo\tYes\nrun 阶段\tYes\tYes\tYes\tYes\tYes\n\n\n注意，provider 在config阶段，注入的时候需要加上 provider 后缀，可以调用非 $get 返回的方法在 run 阶段注入的时候，无需加 provider 后缀，只能调用 $get 返回的方法","source":"_posts/AngularJS供应商.md","raw":"---\ntitle: AngularJS供应商\ndate: 2017-01-19 10:21:50\ntags:\n---\n引言\n看了很多文章可能还是不太说得出AngularJS中的几个创建供应商(provider)的方法(factory(),service(),provider())到底有啥区别，啥时候该用啥，之前一直傻傻分不清楚，现在来总结一下。\n\n下文中泛指统一用中文，英文即为特指$provide方法中对应方法创建出的东东\n\n供应商==>泛指provider\n服务==>泛指service\n\nprovider==>provider()方法创建的东东\nservice==>service()方法创建的东东\n\n先说说供应商（$provide）\n$provide服务负责告诉Angular如何创造一个新的可注入的东西：即服务。服务会被叫做供应商的东西来定义，你可以使用$provide来创建一个供应商。你需要使用$provide中的provider()方法来定义一个供应商，同时你也可以通过要求$provide被注入到一个应用的config函数中来获得$provide服务。\n\n上面的描述是官方wiki的翻译版，如果有些绕的话，看下这张图：\nhttps://segmentfault.com/img/bVm9Et\n\n$provide是一个服务，在Auto模块中\n这个服务下面有好多方法，是用来定义供应商\n而供应商是用来提供服务的，被注入来注入去的东西就是供应商们提供的服务了\n下面是一个例子：\n\nmyMod.config(function($provide) {\n  $provide.provider('greeting', function() {\n    this.$get = function() {\n      return function(name) {\n        alert(\"Hello, \" + name);\n      };\n    };\n  });\n});\n这个例子可以说是最终形态，先大概看下\n\n定义供应商的方法们\nAngularJS用$provide去定义一个供应商,这个$provide有5个用来创建供应商的方法：\n\nconstant\nvalue\nservice\nfactory\nprovider\ndecorator 我没有说我也是，我只是路过o(╯□╰)o\nConstant\n定义常量用的，这货定义的值当然就不能被改变，它可以被注入到任何地方，但是不能被装饰器(decorator)装饰\n\nvar app = angular.module('app', []);\n \napp.config(function ($provide) {\n  $provide.constant('movieTitle', 'The Matrix');\n});\n \napp.controller('ctrl', function (movieTitle) {\n  expect(movieTitle).toEqual('The Matrix');\n});\n语法糖：\n\napp.constant('movieTitle', 'The Matrix');\nValue\n这货可以是string,number甚至function,它和constant的不同之处在于，它可以被修改，不能被注入到config中，但是它可以被decorator装饰\n\nvar app = angular.module('app', []);\n \napp.config(function ($provide) {\n  $provide.value('movieTitle', 'The Matrix')\n});\n \napp.controller('ctrl', function (movieTitle) {\n  expect(movieTitle).toEqual('The Matrix');\n})\n语法糖：\n\napp.value('movieTitle', 'The Matrix');\nService\n它是一个可注入的构造器，在AngularJS中它是单例的，用它在Controller中通信或者共享数据都很合适\n\nvar app = angular.module('app' ,[]);\n \napp.config(function ($provide) {\n  $provide.service('movie', function () {\n    this.title = 'The Matrix';\n  });\n});\n \napp.controller('ctrl', function (movie) {\n  expect(movie.title).toEqual('The Matrix');\n});\n语法糖：\n\napp.service('movie', function () {\n  this.title = 'The Matrix';\n});\n在service里面可以不用返回东西，因为AngularJS会调用new关键字来创建对象。但是返回一个自定义对象好像也不会出错。\n\nFactory\n它是一个可注入的function，它和service的区别就是：factory是普通function，而service是一个构造器(constructor)，这样Angular在调用service时会用new关键字，而调用factory时只是调用普通的function，所以factory可以返回任何东西，而service可以不返回(可查阅new关键字的作用)\n\nvar app = angular.module('app', []);\n \napp.config(function ($provide) {\n  $provide.factory('movie', function () {\n    return {\n      title: 'The Matrix';\n    }\n  });\n});\n \napp.controller('ctrl', function (movie) {\n  expect(movie.title).toEqual('The Matrix');\n});\n语法糖：\n\napp.factory('movie', function () {\n  return {\n    title: 'The Matrix';\n  }\n});\nfactory可以返回任何东西，它实际上是一个只有$get方法的provider\n\nProvider\nprovider是他们的老大，上面的几乎(除了constant)都是provider的封装，provider必须有一个$get方法，当然也可以说provider是一个可配置的factory\n\nvar app = angular.module('app', []);\n \napp.provider('movie', function () {\n  var version;\n  return {\n    setVersion: function (value) {\n      version = value;\n    },\n    $get: function () {\n      return {\n          title: 'The Matrix' + ' ' + version\n      }\n    }\n  }\n});\n \napp.config(function (movieProvider) {\n  movieProvider.setVersion('Reloaded');\n});\n \napp.controller('ctrl', function (movie) {\n  expect(movie.title).toEqual('The Matrix Reloaded');\n});\n注意这里config方法注入的是movieProvider，上面定义了一个供应商叫movie，但是注入到config中不能直接写movie，因为前文讲了注入的那个东西就是服务，是供应商提供出来的，而config中又只能注入供应商（两个例外是$provide和$injector），所以用驼峰命名法写成movieProvider，Angular就会帮你注入它的供应商。（更详细可参考文末官方wiki翻译版中的配置provider）\n\nDecorator\n这个比较特殊，它不是provider,它是用来装饰其他provider的，而前面也说过，他不能装饰Constant，因为实际上Constant不是通过provider()方法创建的。\n\nvar app = angular.module('app', []);\n \napp.value('movieTitle', 'The Matrix');\n \napp.config(function ($provide) {\n  $provide.decorator('movieTitle', function ($delegate) {\n    return $delegate + ' - starring Keanu Reeves';\n  });\n});\n \napp.controller('myController', function (movieTitle) {\n  expect(movieTitle).toEqual('The Matrix - starring Keanu Reeves');\n});\n总结\n所有的供应商都只被实例化一次，也就说他们都是单例的\n除了constant，所有的供应商都可以被装饰器(decorator)装饰\nvalue就是一个简单的可注入的值\nservice是一个可注入的构造器\nfactory是一个可注入的方法\ndecorator可以修改或封装其他的供应商，当然除了constant\nprovider是一个可配置的factory\n最后来看一张对比图：\nhttps://segmentfault.com/img/bVnbg2\n\n最近，在项目中遇到需要在 config 阶段中注入一些service的情况，然而 factory，service 还有 value 是不能在 config 中注入的，先看一个清单:\n服务/阶段\tprovider\tfactory\tservice\tvalue\tconstant\nconfig阶段\tYes\tNo\tNo\tNo\tYes\nrun 阶段\tYes\tYes\tYes\tYes\tYes\n\n\n注意，provider 在config阶段，注入的时候需要加上 provider 后缀，可以调用非 $get 返回的方法在 run 阶段注入的时候，无需加 provider 后缀，只能调用 $get 返回的方法","slug":"AngularJS供应商","published":1,"updated":"2018-05-16T09:03:16.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2f0003oyff0mv2rgce","content":"<p>引言<br>看了很多文章可能还是不太说得出AngularJS中的几个创建供应商(provider)的方法(factory(),service(),provider())到底有啥区别，啥时候该用啥，之前一直傻傻分不清楚，现在来总结一下。</p>\n<p>下文中泛指统一用中文，英文即为特指$provide方法中对应方法创建出的东东</p>\n<p>供应商==&gt;泛指provider<br>服务==&gt;泛指service</p>\n<p>provider==&gt;provider()方法创建的东东<br>service==&gt;service()方法创建的东东</p>\n<p>先说说供应商（$provide）<br>$provide服务负责告诉Angular如何创造一个新的可注入的东西：即服务。服务会被叫做供应商的东西来定义，你可以使用$provide来创建一个供应商。你需要使用$provide中的provider()方法来定义一个供应商，同时你也可以通过要求$provide被注入到一个应用的config函数中来获得$provide服务。</p>\n<p>上面的描述是官方wiki的翻译版，如果有些绕的话，看下这张图：<br><a href=\"https://segmentfault.com/img/bVm9Et\" target=\"_blank\" rel=\"external\">https://segmentfault.com/img/bVm9Et</a></p>\n<p>$provide是一个服务，在Auto模块中<br>这个服务下面有好多方法，是用来定义供应商<br>而供应商是用来提供服务的，被注入来注入去的东西就是供应商们提供的服务了<br>下面是一个例子：</p>\n<p>myMod.config(function($provide) {<br>  $provide.provider(‘greeting’, function() {<br>    this.$get = function() {<br>      return function(name) {<br>        alert(“Hello, “ + name);<br>      };<br>    };<br>  });<br>});<br>这个例子可以说是最终形态，先大概看下</p>\n<p>定义供应商的方法们<br>AngularJS用$provide去定义一个供应商,这个$provide有5个用来创建供应商的方法：</p>\n<p>constant<br>value<br>service<br>factory<br>provider<br>decorator 我没有说我也是，我只是路过o(╯□╰)o<br>Constant<br>定义常量用的，这货定义的值当然就不能被改变，它可以被注入到任何地方，但是不能被装饰器(decorator)装饰</p>\n<p>var app = angular.module(‘app’, []);</p>\n<p>app.config(function ($provide) {<br>  $provide.constant(‘movieTitle’, ‘The Matrix’);<br>});</p>\n<p>app.controller(‘ctrl’, function (movieTitle) {<br>  expect(movieTitle).toEqual(‘The Matrix’);<br>});<br>语法糖：</p>\n<p>app.constant(‘movieTitle’, ‘The Matrix’);<br>Value<br>这货可以是string,number甚至function,它和constant的不同之处在于，它可以被修改，不能被注入到config中，但是它可以被decorator装饰</p>\n<p>var app = angular.module(‘app’, []);</p>\n<p>app.config(function ($provide) {<br>  $provide.value(‘movieTitle’, ‘The Matrix’)<br>});</p>\n<p>app.controller(‘ctrl’, function (movieTitle) {<br>  expect(movieTitle).toEqual(‘The Matrix’);<br>})<br>语法糖：</p>\n<p>app.value(‘movieTitle’, ‘The Matrix’);<br>Service<br>它是一个可注入的构造器，在AngularJS中它是单例的，用它在Controller中通信或者共享数据都很合适</p>\n<p>var app = angular.module(‘app’ ,[]);</p>\n<p>app.config(function ($provide) {<br>  $provide.service(‘movie’, function () {<br>    this.title = ‘The Matrix’;<br>  });<br>});</p>\n<p>app.controller(‘ctrl’, function (movie) {<br>  expect(movie.title).toEqual(‘The Matrix’);<br>});<br>语法糖：</p>\n<p>app.service(‘movie’, function () {<br>  this.title = ‘The Matrix’;<br>});<br>在service里面可以不用返回东西，因为AngularJS会调用new关键字来创建对象。但是返回一个自定义对象好像也不会出错。</p>\n<p>Factory<br>它是一个可注入的function，它和service的区别就是：factory是普通function，而service是一个构造器(constructor)，这样Angular在调用service时会用new关键字，而调用factory时只是调用普通的function，所以factory可以返回任何东西，而service可以不返回(可查阅new关键字的作用)</p>\n<p>var app = angular.module(‘app’, []);</p>\n<p>app.config(function ($provide) {<br>  $provide.factory(‘movie’, function () {<br>    return {<br>      title: ‘The Matrix’;<br>    }<br>  });<br>});</p>\n<p>app.controller(‘ctrl’, function (movie) {<br>  expect(movie.title).toEqual(‘The Matrix’);<br>});<br>语法糖：</p>\n<p>app.factory(‘movie’, function () {<br>  return {<br>    title: ‘The Matrix’;<br>  }<br>});<br>factory可以返回任何东西，它实际上是一个只有$get方法的provider</p>\n<p>Provider<br>provider是他们的老大，上面的几乎(除了constant)都是provider的封装，provider必须有一个$get方法，当然也可以说provider是一个可配置的factory</p>\n<p>var app = angular.module(‘app’, []);</p>\n<p>app.provider(‘movie’, function () {<br>  var version;<br>  return {<br>    setVersion: function (value) {<br>      version = value;<br>    },<br>    $get: function () {<br>      return {<br>          title: ‘The Matrix’ + ‘ ‘ + version<br>      }<br>    }<br>  }<br>});</p>\n<p>app.config(function (movieProvider) {<br>  movieProvider.setVersion(‘Reloaded’);<br>});</p>\n<p>app.controller(‘ctrl’, function (movie) {<br>  expect(movie.title).toEqual(‘The Matrix Reloaded’);<br>});<br>注意这里config方法注入的是movieProvider，上面定义了一个供应商叫movie，但是注入到config中不能直接写movie，因为前文讲了注入的那个东西就是服务，是供应商提供出来的，而config中又只能注入供应商（两个例外是$provide和$injector），所以用驼峰命名法写成movieProvider，Angular就会帮你注入它的供应商。（更详细可参考文末官方wiki翻译版中的配置provider）</p>\n<p>Decorator<br>这个比较特殊，它不是provider,它是用来装饰其他provider的，而前面也说过，他不能装饰Constant，因为实际上Constant不是通过provider()方法创建的。</p>\n<p>var app = angular.module(‘app’, []);</p>\n<p>app.value(‘movieTitle’, ‘The Matrix’);</p>\n<p>app.config(function ($provide) {<br>  $provide.decorator(‘movieTitle’, function ($delegate) {<br>    return $delegate + ‘ - starring Keanu Reeves’;<br>  });<br>});</p>\n<p>app.controller(‘myController’, function (movieTitle) {<br>  expect(movieTitle).toEqual(‘The Matrix - starring Keanu Reeves’);<br>});<br>总结<br>所有的供应商都只被实例化一次，也就说他们都是单例的<br>除了constant，所有的供应商都可以被装饰器(decorator)装饰<br>value就是一个简单的可注入的值<br>service是一个可注入的构造器<br>factory是一个可注入的方法<br>decorator可以修改或封装其他的供应商，当然除了constant<br>provider是一个可配置的factory<br>最后来看一张对比图：<br><a href=\"https://segmentfault.com/img/bVnbg2\" target=\"_blank\" rel=\"external\">https://segmentfault.com/img/bVnbg2</a></p>\n<p>最近，在项目中遇到需要在 config 阶段中注入一些service的情况，然而 factory，service 还有 value 是不能在 config 中注入的，先看一个清单:<br>服务/阶段    provider    factory    service    value    constant<br>config阶段    Yes    No    No    No    Yes<br>run 阶段    Yes    Yes    Yes    Yes    Yes</p>\n<p>注意，provider 在config阶段，注入的时候需要加上 provider 后缀，可以调用非 $get 返回的方法在 run 阶段注入的时候，无需加 provider 后缀，只能调用 $get 返回的方法</p>\n","excerpt":"","more":"<p>引言<br>看了很多文章可能还是不太说得出AngularJS中的几个创建供应商(provider)的方法(factory(),service(),provider())到底有啥区别，啥时候该用啥，之前一直傻傻分不清楚，现在来总结一下。</p>\n<p>下文中泛指统一用中文，英文即为特指$provide方法中对应方法创建出的东东</p>\n<p>供应商==&gt;泛指provider<br>服务==&gt;泛指service</p>\n<p>provider==&gt;provider()方法创建的东东<br>service==&gt;service()方法创建的东东</p>\n<p>先说说供应商（$provide）<br>$provide服务负责告诉Angular如何创造一个新的可注入的东西：即服务。服务会被叫做供应商的东西来定义，你可以使用$provide来创建一个供应商。你需要使用$provide中的provider()方法来定义一个供应商，同时你也可以通过要求$provide被注入到一个应用的config函数中来获得$provide服务。</p>\n<p>上面的描述是官方wiki的翻译版，如果有些绕的话，看下这张图：<br><a href=\"https://segmentfault.com/img/bVm9Et\">https://segmentfault.com/img/bVm9Et</a></p>\n<p>$provide是一个服务，在Auto模块中<br>这个服务下面有好多方法，是用来定义供应商<br>而供应商是用来提供服务的，被注入来注入去的东西就是供应商们提供的服务了<br>下面是一个例子：</p>\n<p>myMod.config(function($provide) {<br>  $provide.provider(‘greeting’, function() {<br>    this.$get = function() {<br>      return function(name) {<br>        alert(“Hello, “ + name);<br>      };<br>    };<br>  });<br>});<br>这个例子可以说是最终形态，先大概看下</p>\n<p>定义供应商的方法们<br>AngularJS用$provide去定义一个供应商,这个$provide有5个用来创建供应商的方法：</p>\n<p>constant<br>value<br>service<br>factory<br>provider<br>decorator 我没有说我也是，我只是路过o(╯□╰)o<br>Constant<br>定义常量用的，这货定义的值当然就不能被改变，它可以被注入到任何地方，但是不能被装饰器(decorator)装饰</p>\n<p>var app = angular.module(‘app’, []);</p>\n<p>app.config(function ($provide) {<br>  $provide.constant(‘movieTitle’, ‘The Matrix’);<br>});</p>\n<p>app.controller(‘ctrl’, function (movieTitle) {<br>  expect(movieTitle).toEqual(‘The Matrix’);<br>});<br>语法糖：</p>\n<p>app.constant(‘movieTitle’, ‘The Matrix’);<br>Value<br>这货可以是string,number甚至function,它和constant的不同之处在于，它可以被修改，不能被注入到config中，但是它可以被decorator装饰</p>\n<p>var app = angular.module(‘app’, []);</p>\n<p>app.config(function ($provide) {<br>  $provide.value(‘movieTitle’, ‘The Matrix’)<br>});</p>\n<p>app.controller(‘ctrl’, function (movieTitle) {<br>  expect(movieTitle).toEqual(‘The Matrix’);<br>})<br>语法糖：</p>\n<p>app.value(‘movieTitle’, ‘The Matrix’);<br>Service<br>它是一个可注入的构造器，在AngularJS中它是单例的，用它在Controller中通信或者共享数据都很合适</p>\n<p>var app = angular.module(‘app’ ,[]);</p>\n<p>app.config(function ($provide) {<br>  $provide.service(‘movie’, function () {<br>    this.title = ‘The Matrix’;<br>  });<br>});</p>\n<p>app.controller(‘ctrl’, function (movie) {<br>  expect(movie.title).toEqual(‘The Matrix’);<br>});<br>语法糖：</p>\n<p>app.service(‘movie’, function () {<br>  this.title = ‘The Matrix’;<br>});<br>在service里面可以不用返回东西，因为AngularJS会调用new关键字来创建对象。但是返回一个自定义对象好像也不会出错。</p>\n<p>Factory<br>它是一个可注入的function，它和service的区别就是：factory是普通function，而service是一个构造器(constructor)，这样Angular在调用service时会用new关键字，而调用factory时只是调用普通的function，所以factory可以返回任何东西，而service可以不返回(可查阅new关键字的作用)</p>\n<p>var app = angular.module(‘app’, []);</p>\n<p>app.config(function ($provide) {<br>  $provide.factory(‘movie’, function () {<br>    return {<br>      title: ‘The Matrix’;<br>    }<br>  });<br>});</p>\n<p>app.controller(‘ctrl’, function (movie) {<br>  expect(movie.title).toEqual(‘The Matrix’);<br>});<br>语法糖：</p>\n<p>app.factory(‘movie’, function () {<br>  return {<br>    title: ‘The Matrix’;<br>  }<br>});<br>factory可以返回任何东西，它实际上是一个只有$get方法的provider</p>\n<p>Provider<br>provider是他们的老大，上面的几乎(除了constant)都是provider的封装，provider必须有一个$get方法，当然也可以说provider是一个可配置的factory</p>\n<p>var app = angular.module(‘app’, []);</p>\n<p>app.provider(‘movie’, function () {<br>  var version;<br>  return {<br>    setVersion: function (value) {<br>      version = value;<br>    },<br>    $get: function () {<br>      return {<br>          title: ‘The Matrix’ + ‘ ‘ + version<br>      }<br>    }<br>  }<br>});</p>\n<p>app.config(function (movieProvider) {<br>  movieProvider.setVersion(‘Reloaded’);<br>});</p>\n<p>app.controller(‘ctrl’, function (movie) {<br>  expect(movie.title).toEqual(‘The Matrix Reloaded’);<br>});<br>注意这里config方法注入的是movieProvider，上面定义了一个供应商叫movie，但是注入到config中不能直接写movie，因为前文讲了注入的那个东西就是服务，是供应商提供出来的，而config中又只能注入供应商（两个例外是$provide和$injector），所以用驼峰命名法写成movieProvider，Angular就会帮你注入它的供应商。（更详细可参考文末官方wiki翻译版中的配置provider）</p>\n<p>Decorator<br>这个比较特殊，它不是provider,它是用来装饰其他provider的，而前面也说过，他不能装饰Constant，因为实际上Constant不是通过provider()方法创建的。</p>\n<p>var app = angular.module(‘app’, []);</p>\n<p>app.value(‘movieTitle’, ‘The Matrix’);</p>\n<p>app.config(function ($provide) {<br>  $provide.decorator(‘movieTitle’, function ($delegate) {<br>    return $delegate + ‘ - starring Keanu Reeves’;<br>  });<br>});</p>\n<p>app.controller(‘myController’, function (movieTitle) {<br>  expect(movieTitle).toEqual(‘The Matrix - starring Keanu Reeves’);<br>});<br>总结<br>所有的供应商都只被实例化一次，也就说他们都是单例的<br>除了constant，所有的供应商都可以被装饰器(decorator)装饰<br>value就是一个简单的可注入的值<br>service是一个可注入的构造器<br>factory是一个可注入的方法<br>decorator可以修改或封装其他的供应商，当然除了constant<br>provider是一个可配置的factory<br>最后来看一张对比图：<br><a href=\"https://segmentfault.com/img/bVnbg2\">https://segmentfault.com/img/bVnbg2</a></p>\n<p>最近，在项目中遇到需要在 config 阶段中注入一些service的情况，然而 factory，service 还有 value 是不能在 config 中注入的，先看一个清单:<br>服务/阶段    provider    factory    service    value    constant<br>config阶段    Yes    No    No    No    Yes<br>run 阶段    Yes    Yes    Yes    Yes    Yes</p>\n<p>注意，provider 在config阶段，注入的时候需要加上 provider 后缀，可以调用非 $get 返回的方法在 run 阶段注入的时候，无需加 provider 后缀，只能调用 $get 返回的方法</p>\n"},{"title":"Jquery简写","date":"2016-12-15T06:49:37.000Z","_content":"## ~ function($) {}($) \n```python\nvar fn = function(opt){};\nfn($);\n```\n## $this和$(this)\n// this其实是一个Html 元素。\n// $this 只是个变量名，加$是为说明其是个jquery对象。\n// 而$(this)是个转换，将this表示的dom对象转为jquery对象，这样就可以使用jquery提供的方法操作。\n\n## return this.each(function () {})\n因为each返回的也是this对象，所以直接return this.each可以执行你的相关操作，还可以保持链式调用功能\n因为this.each保证了遍历完成才执行下一个操作，否则迭代是延迟执行的，前面的插件并没有实际执行。\n```python\njQuery.fn.test2= function(){ \n   this.css(\"background\",\"#ff0\");//这里面的this为jquery对象，而不是dom对象 \n   return this.each(function(){ //遍历匹配的元素，此处的this表示为jquery对象，而不是dom对象 \n    alert(\"this\"+this+this.innerHTML); \n    //提示当前对象的dom节点名称,这里的this关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）。 \n     }); \n};\n```\nthis.css(),this.each（）里面的this为jquery对象，但是alert里面this为dom对象.\n为什么要return this.each()\n先return this.each(),后调用each（）方法，而each（）方法返回jQuery对象，所以这样就可以继续链式操作了。\n首先在JQ中,each是遍历一个数组,比如你$('.some')返回的不一定只是一个jq对象,有可能是个数组,好多个elements.\n所以return this.each(){}是把所有你索引的对象都作用到这个插件下.\n你若保证你的插件每次都只会用一个JQ对象,那么你可以直接return this.\n\n\n## JavaScript prototype 属性\n定义和用法\nprototype 属性允许您向对象添加属性和方法\n注意： Prototype 是全局属性，适用于所有的Javascript对象。\n语法\nobject.prototype.name=value\n\n## _.extend\n_，在这里应该是接管了JQUERY，就是jQuery。(有不少人这样用，因为和$冲突)\n_.extend方法是把指定的对象进行扩展(在这里就是document.body.style)\nQuery中需要用到$符号，如果其他js库（例如大名鼎鼎的prototype)也定义了$符号，那么就会造成冲突，会影响到js代码的正常执行。\n\n## jquery call方法和apply方法\ncall方法: \n语法：call([thisObj[,arg1[, arg2[,   [,.argN]]]]]) \n定义：调用一个对象的一个方法，以另一个对象替换当前对象。 \n说明： \ncall 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。 \n如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 \n\napply方法： \n语法：apply([thisObj[,argArray]]) \n定义：应用某一对象的一个方法，用另一个对象替换当前对象。 \n说明： \n如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。 \n如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。 \n\n\n```python\n  \n    <script language=\"javascript\"><!--\n   \n    /**定义一个animal类*/  \n    function Animal(){   \n    this.name = \"Animal\";   \n    this.showName = function(){   \n    alert(this.name);   \n    }   \n    }   \n    /**定义一个Cat类*/  \n    function Cat(){   \n    this.name = \"Cat\";   \n    }   \n  \n    /**创建两个类对象*/  \n    var animal = new Animal();   \n    var cat = new Cat();   \n  \n    //通过call或apply方法，将原本属于Animal对象的showName()方法交给当前对象cat来使用了。   \n    //输入结果为\"Cat\"   \n    animal.showName.call(cat,\",\");   \n    //animal.showName.apply(cat,[]);   \n      \n    \n// --></script> \n```","source":"_posts/Jquery简写.md","raw":"---\ntitle: Jquery简写\ndate: 2016-12-15 14:49:37\ntags:\n---\n## ~ function($) {}($) \n```python\nvar fn = function(opt){};\nfn($);\n```\n## $this和$(this)\n// this其实是一个Html 元素。\n// $this 只是个变量名，加$是为说明其是个jquery对象。\n// 而$(this)是个转换，将this表示的dom对象转为jquery对象，这样就可以使用jquery提供的方法操作。\n\n## return this.each(function () {})\n因为each返回的也是this对象，所以直接return this.each可以执行你的相关操作，还可以保持链式调用功能\n因为this.each保证了遍历完成才执行下一个操作，否则迭代是延迟执行的，前面的插件并没有实际执行。\n```python\njQuery.fn.test2= function(){ \n   this.css(\"background\",\"#ff0\");//这里面的this为jquery对象，而不是dom对象 \n   return this.each(function(){ //遍历匹配的元素，此处的this表示为jquery对象，而不是dom对象 \n    alert(\"this\"+this+this.innerHTML); \n    //提示当前对象的dom节点名称,这里的this关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）。 \n     }); \n};\n```\nthis.css(),this.each（）里面的this为jquery对象，但是alert里面this为dom对象.\n为什么要return this.each()\n先return this.each(),后调用each（）方法，而each（）方法返回jQuery对象，所以这样就可以继续链式操作了。\n首先在JQ中,each是遍历一个数组,比如你$('.some')返回的不一定只是一个jq对象,有可能是个数组,好多个elements.\n所以return this.each(){}是把所有你索引的对象都作用到这个插件下.\n你若保证你的插件每次都只会用一个JQ对象,那么你可以直接return this.\n\n\n## JavaScript prototype 属性\n定义和用法\nprototype 属性允许您向对象添加属性和方法\n注意： Prototype 是全局属性，适用于所有的Javascript对象。\n语法\nobject.prototype.name=value\n\n## _.extend\n_，在这里应该是接管了JQUERY，就是jQuery。(有不少人这样用，因为和$冲突)\n_.extend方法是把指定的对象进行扩展(在这里就是document.body.style)\nQuery中需要用到$符号，如果其他js库（例如大名鼎鼎的prototype)也定义了$符号，那么就会造成冲突，会影响到js代码的正常执行。\n\n## jquery call方法和apply方法\ncall方法: \n语法：call([thisObj[,arg1[, arg2[,   [,.argN]]]]]) \n定义：调用一个对象的一个方法，以另一个对象替换当前对象。 \n说明： \ncall 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。 \n如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 \n\napply方法： \n语法：apply([thisObj[,argArray]]) \n定义：应用某一对象的一个方法，用另一个对象替换当前对象。 \n说明： \n如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。 \n如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。 \n\n\n```python\n  \n    <script language=\"javascript\"><!--\n   \n    /**定义一个animal类*/  \n    function Animal(){   \n    this.name = \"Animal\";   \n    this.showName = function(){   \n    alert(this.name);   \n    }   \n    }   \n    /**定义一个Cat类*/  \n    function Cat(){   \n    this.name = \"Cat\";   \n    }   \n  \n    /**创建两个类对象*/  \n    var animal = new Animal();   \n    var cat = new Cat();   \n  \n    //通过call或apply方法，将原本属于Animal对象的showName()方法交给当前对象cat来使用了。   \n    //输入结果为\"Cat\"   \n    animal.showName.call(cat,\",\");   \n    //animal.showName.apply(cat,[]);   \n      \n    \n// --></script> \n```","slug":"Jquery简写","published":1,"updated":"2018-05-16T09:03:16.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2h0004oyffyzudspec","content":"<h2 id=\"function\"><a href=\"#function\" class=\"headerlink\" title=\"~ function($) {}($)\"></a>~ function($) {}($)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var fn = function(opt)&#123;&#125;;</div><div class=\"line\">fn($);</div></pre></td></tr></table></figure>\n<h2 id=\"this和-this\"><a href=\"#this和-this\" class=\"headerlink\" title=\"$this和$(this)\"></a>$this和$(this)</h2><p>// this其实是一个Html 元素。<br>// $this 只是个变量名，加$是为说明其是个jquery对象。<br>// 而$(this)是个转换，将this表示的dom对象转为jquery对象，这样就可以使用jquery提供的方法操作。</p>\n<h2 id=\"return-this-each-function\"><a href=\"#return-this-each-function\" class=\"headerlink\" title=\"return this.each(function () {})\"></a>return this.each(function () {})</h2><p>因为each返回的也是this对象，所以直接return this.each可以执行你的相关操作，还可以保持链式调用功能<br>因为this.each保证了遍历完成才执行下一个操作，否则迭代是延迟执行的，前面的插件并没有实际执行。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.fn.test2= function()&#123; </div><div class=\"line\">   this.css(<span class=\"string\">\"background\"</span>,<span class=\"string\">\"#ff0\"</span>);//这里面的this为jquery对象，而不是dom对象 </div><div class=\"line\">   <span class=\"keyword\">return</span> this.each(function()&#123; //遍历匹配的元素，此处的this表示为jquery对象，而不是dom对象 </div><div class=\"line\">    alert(<span class=\"string\">\"this\"</span>+this+this.innerHTML); </div><div class=\"line\">    //提示当前对象的dom节点名称,这里的this关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）。 </div><div class=\"line\">     &#125;); </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>this.css(),this.each（）里面的this为jquery对象，但是alert里面this为dom对象.<br>为什么要return this.each()<br>先return this.each(),后调用each（）方法，而each（）方法返回jQuery对象，所以这样就可以继续链式操作了。<br>首先在JQ中,each是遍历一个数组,比如你$(‘.some’)返回的不一定只是一个jq对象,有可能是个数组,好多个elements.<br>所以return this.each(){}是把所有你索引的对象都作用到这个插件下.<br>你若保证你的插件每次都只会用一个JQ对象,那么你可以直接return this.</p>\n<h2 id=\"JavaScript-prototype-属性\"><a href=\"#JavaScript-prototype-属性\" class=\"headerlink\" title=\"JavaScript prototype 属性\"></a>JavaScript prototype 属性</h2><p>定义和用法<br>prototype 属性允许您向对象添加属性和方法<br>注意： Prototype 是全局属性，适用于所有的Javascript对象。<br>语法<br>object.prototype.name=value</p>\n<h2 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"_.extend\"></a>_.extend</h2><p><em>，在这里应该是接管了JQUERY，就是jQuery。(有不少人这样用，因为和$冲突)\n</em>.extend方法是把指定的对象进行扩展(在这里就是document.body.style)<br>Query中需要用到$符号，如果其他js库（例如大名鼎鼎的prototype)也定义了$符号，那么就会造成冲突，会影响到js代码的正常执行。</p>\n<h2 id=\"jquery-call方法和apply方法\"><a href=\"#jquery-call方法和apply方法\" class=\"headerlink\" title=\"jquery call方法和apply方法\"></a>jquery call方法和apply方法</h2><p>call方法:<br>语法：call([thisObj[,arg1[, arg2[,   [,.argN]]]]])<br>定义：调用一个对象的一个方法，以另一个对象替换当前对象。<br>说明：<br>call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。<br>如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 </p>\n<p>apply方法：<br>语法：apply([thisObj[,argArray]])<br>定义：应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明：<br>如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。<br>如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。 </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">    &lt;script language=\"javascript\"&gt;&lt;!--</div><div class=\"line\">   </div><div class=\"line\">    /**定义一个animal类*/  </div><div class=\"line\">    function Animal()&#123;   </div><div class=\"line\">    this.name = \"Animal\";   </div><div class=\"line\">    this.showName = function()&#123;   </div><div class=\"line\">    alert(this.name);   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    /**定义一个Cat类*/  </div><div class=\"line\">    function Cat()&#123;   </div><div class=\"line\">    this.name = \"Cat\";   </div><div class=\"line\">    &#125;   </div><div class=\"line\">  </div><div class=\"line\">    /**创建两个类对象*/  </div><div class=\"line\">    var animal = new Animal();   </div><div class=\"line\">    var cat = new Cat();   </div><div class=\"line\">  </div><div class=\"line\">    //通过call或apply方法，将原本属于Animal对象的showName()方法交给当前对象cat来使用了。   </div><div class=\"line\">    //输入结果为\"Cat\"   </div><div class=\"line\">    animal.showName.call(cat,\",\");   </div><div class=\"line\">    //animal.showName.apply(cat,[]);   </div><div class=\"line\">      </div><div class=\"line\">    </div><div class=\"line\">// --&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"function\"><a href=\"#function\" class=\"headerlink\" title=\"~ function($) {}($)\"></a>~ function($) {}($)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var fn = function(opt)&#123;&#125;;</div><div class=\"line\">fn($);</div></pre></td></tr></table></figure>\n<h2 id=\"this和-this\"><a href=\"#this和-this\" class=\"headerlink\" title=\"$this和$(this)\"></a>$this和$(this)</h2><p>// this其实是一个Html 元素。<br>// $this 只是个变量名，加$是为说明其是个jquery对象。<br>// 而$(this)是个转换，将this表示的dom对象转为jquery对象，这样就可以使用jquery提供的方法操作。</p>\n<h2 id=\"return-this-each-function\"><a href=\"#return-this-each-function\" class=\"headerlink\" title=\"return this.each(function () {})\"></a>return this.each(function () {})</h2><p>因为each返回的也是this对象，所以直接return this.each可以执行你的相关操作，还可以保持链式调用功能<br>因为this.each保证了遍历完成才执行下一个操作，否则迭代是延迟执行的，前面的插件并没有实际执行。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.fn.test2= function()&#123; </div><div class=\"line\">   this.css(<span class=\"string\">\"background\"</span>,<span class=\"string\">\"#ff0\"</span>);//这里面的this为jquery对象，而不是dom对象 </div><div class=\"line\">   <span class=\"keyword\">return</span> this.each(function()&#123; //遍历匹配的元素，此处的this表示为jquery对象，而不是dom对象 </div><div class=\"line\">    alert(<span class=\"string\">\"this\"</span>+this+this.innerHTML); </div><div class=\"line\">    //提示当前对象的dom节点名称,这里的this关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）。 </div><div class=\"line\">     &#125;); </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>this.css(),this.each（）里面的this为jquery对象，但是alert里面this为dom对象.<br>为什么要return this.each()<br>先return this.each(),后调用each（）方法，而each（）方法返回jQuery对象，所以这样就可以继续链式操作了。<br>首先在JQ中,each是遍历一个数组,比如你$(‘.some’)返回的不一定只是一个jq对象,有可能是个数组,好多个elements.<br>所以return this.each(){}是把所有你索引的对象都作用到这个插件下.<br>你若保证你的插件每次都只会用一个JQ对象,那么你可以直接return this.</p>\n<h2 id=\"JavaScript-prototype-属性\"><a href=\"#JavaScript-prototype-属性\" class=\"headerlink\" title=\"JavaScript prototype 属性\"></a>JavaScript prototype 属性</h2><p>定义和用法<br>prototype 属性允许您向对象添加属性和方法<br>注意： Prototype 是全局属性，适用于所有的Javascript对象。<br>语法<br>object.prototype.name=value</p>\n<h2 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"_.extend\"></a>_.extend</h2><p><em>，在这里应该是接管了JQUERY，就是jQuery。(有不少人这样用，因为和$冲突)\n</em>.extend方法是把指定的对象进行扩展(在这里就是document.body.style)<br>Query中需要用到$符号，如果其他js库（例如大名鼎鼎的prototype)也定义了$符号，那么就会造成冲突，会影响到js代码的正常执行。</p>\n<h2 id=\"jquery-call方法和apply方法\"><a href=\"#jquery-call方法和apply方法\" class=\"headerlink\" title=\"jquery call方法和apply方法\"></a>jquery call方法和apply方法</h2><p>call方法:<br>语法：call([thisObj[,arg1[, arg2[,   [,.argN]]]]])<br>定义：调用一个对象的一个方法，以另一个对象替换当前对象。<br>说明：<br>call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。<br>如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 </p>\n<p>apply方法：<br>语法：apply([thisObj[,argArray]])<br>定义：应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明：<br>如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。<br>如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。 </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">    &lt;script language=\"javascript\"&gt;&lt;!--</div><div class=\"line\">   </div><div class=\"line\">    /**定义一个animal类*/  </div><div class=\"line\">    function Animal()&#123;   </div><div class=\"line\">    this.name = \"Animal\";   </div><div class=\"line\">    this.showName = function()&#123;   </div><div class=\"line\">    alert(this.name);   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    /**定义一个Cat类*/  </div><div class=\"line\">    function Cat()&#123;   </div><div class=\"line\">    this.name = \"Cat\";   </div><div class=\"line\">    &#125;   </div><div class=\"line\">  </div><div class=\"line\">    /**创建两个类对象*/  </div><div class=\"line\">    var animal = new Animal();   </div><div class=\"line\">    var cat = new Cat();   </div><div class=\"line\">  </div><div class=\"line\">    //通过call或apply方法，将原本属于Animal对象的showName()方法交给当前对象cat来使用了。   </div><div class=\"line\">    //输入结果为\"Cat\"   </div><div class=\"line\">    animal.showName.call(cat,\",\");   </div><div class=\"line\">    //animal.showName.apply(cat,[]);   </div><div class=\"line\">      </div><div class=\"line\">    </div><div class=\"line\">// --&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>"},{"title":"AngularJS","date":"2017-01-12T03:01:24.000Z","_content":"\nangular -  ng关键字缩写\nAngularJS 是一个 JavaScript 框架。它可通过 script 标签添加到 HTML 页面。\nAngularJS 通过 指令 扩展了 HTML，且通过 表达式 绑定数据到 HTML。\nAngularJS 是一个 JavaScript 框架\nAngularJS 是一个 JavaScript 框架。它是一个以 JavaScript 编写的库。\nAngularJS 是以一个 JavaScript 文件形式发布的，可通过 script 标签添加到网页中：\n\n```python\n<script src=\"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js\">\n</script>\n```\n\n各个 angular.js 版本下载： https://github.com/angular/angular.js/releases\nAngularJS 扩展了 HTML\nAngularJS 通过 ng-directives 扩展了 HTML。\nng-app 指令定义一个 AngularJS 应用程序。\nng-model 指令把元素值（比如输入域的值）绑定到应用程序。\nng-bind 指令把应用程序数据绑定到 HTML 视图。\nAngularJS 实例\n\n```python\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<script src=\"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js\"></scrip t >\n</head>\n<body>\n \n<div ng-app=\"\">\n     <p>名字 : <input type=\"text\" ng-model=\"name\"></p>\n     <h1>Hello {{name}}</h1>\n</div>\n \n</body>\n</html>\n```\n\n实例讲解：\n当网页加载完毕，AngularJS 自动开启。\nng-app 指令告诉 AngularJS，<div> 元素是 AngularJS 应用程序 的\"所有者\"。\nng-model 指令把输入域的值绑定到应用程序变量 name。\nng-bind 指令把应用程序变量 name 绑定到某个段落的 innerHTML。\n\n什么是 AngularJS？\nAngularJS 使得开发现代的单一页面应用程序（SPAs：Single Page Applications）变得更加容易。\nAngularJS 把应用程序数据绑定到 HTML 元素。\nAngularJS 可以克隆和重复 HTML 元素。\nAngularJS 可以隐藏和显示 HTML 元素。\nAngularJS 可以在 HTML 元素\"背后\"添加代码。\nAngularJS 支持输入验证。\nAngularJS 指令\n正如您所看到的，AngularJS 指令是以 ng 作为前缀的 HTML 属性。\nng-init 指令初始化 AngularJS 应用程序变量。\nAngularJS 实例\n```python\n<div ng-app=\"\" ng-init=\"firstName='John'\">\n \n<p>姓名为 <span ng-bind=\"firstName\"></span></p>\n \n</div>\n```\nHTML5 允许扩展的（自制的）属性，以 data- 开头。\nAngularJS 属性以 ng- 开头，但是您可以使用 data-ng- 来让网页对 HTML5 有效。\nAngularJS 实例\n```python\n<div data-ng-app=\"\" data-ng-init=\"firstName='John'\">\n \n<p>姓名为 <span data-ng-bind=\"firstName\"></span></p>\n \n</div>\n```\nAngularJS 表达式\nAngularJS 表达式写在双大括号内：{{ expression }}。\nAngularJS 表达式把数据绑定到 HTML，这与 ng-bind 指令有异曲同工之妙。\nAngularJS 将在表达式书写的位置\"输出\"数据。\nAngularJS 表达式 很像 JavaScript 表达式：它们可以包含文字、运算符和变量。\n实例 {{ 5 + 5 }} 或 {{ firstName + \" \" + lastName }}\nAngularJS 实例\n```python\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<script src=\"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js\"></scrip t> \n</head>\n<body>\n \n<div ng-app=\"\">\n     <p>我的第一个表达式： {{ 5 + 5 }}</p>\n</div>\n \n</body>\n</html>\n```\nAngularJS 应用\nAngularJS 模块（Module） 定义了 AngularJS 应用。\nAngularJS 控制器（Controller） 用于控制 AngularJS 应用。\nng-app指令定义了应用, ng-controller 定义了控制器。\nAngularJS 实例\n```python\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n \n名: <input type=\"text\" ng-model=\"firstName\"><br>\n姓: <input type=\"text\" ng-model=\"lastName\"><br>\n<br>\n姓名: {{firstName + \" \" + lastName}}\n \n</div>\n \n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n    $scope.firstName= \"John\";\n    $scope.lastName= \"Doe\";\n});\n</scrip t>\n```\nAngularJS 模块定义应用:\nAngularJS 模块\n```python\nvar app = angular.module('myApp', []);\n```\nAngularJS 控制器控制应用:\nAngularJS 控制器\n```python\napp.controller('myCtrl', function($scope) {\n    $scope.firstName= \"John\";\n    $scope.lastName= \"Doe\";\n});\n```\n使用 ng-init 不是很常见。您将在控制器一章中学习到一个更好的初始化数据的方式。\n## 表达式\n```python\n数字\n<div ng-app=\"\" ng-init=\"quantity=1;cost=5\">\n \n<p>总价： {{ quantity * cost }}</p>\n \n</div>\n\n字符串\n<div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\">\n \n<p>姓名： {{ firstName + \" \" + lastName }}</p>\n \n</div>\n\n对象\n<div ng-app=\"\" ng-init=\"person={firstName:'John',lastName:'Doe'}\">\n \n<p>姓为 {{ person.lastName }}</p>\n \n</div>\n\n数组\n<div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\">\n \n<p>第三个值为 {{ points[2] }}</p>\n \n</div>\n```\nAngularJS 表达式 与 JavaScript 表达式\n类似于 JavaScript 表达式，AngularJS 表达式可以包含字母，操作符，变量。\n与 JavaScript 表达式不同，AngularJS 表达式可以写在 HTML 中。\n与 JavaScript 表达式不同，AngularJS 表达式不支持条件判断，循环及异常。\n与 JavaScript 表达式不同，AngularJS 表达式支持过滤器。\n\n## AngularJS 指令\nAngularJS 通过被称为 指令 的新属性来扩展 HTML。\nAngularJS 通过内置的指令来为应用添加功能。\nAngularJS 允许你自定义指令。\nAngularJS 指令是扩展的 HTML 属性，带有前缀 ng-。\nng-app 指令初始化一个 AngularJS 应用程序。\nng-init 指令初始化应用程序数据。\nng-model 指令把元素值（比如输入域的值）绑定到应用程序。\n\nng-app 指令告诉 AngularJS，<div> 元素是 AngularJS 应用程序 的\"所有者\"。\n一个网页可以包含多个运行在不同元素中的 AngularJS 应用程序。\n\n## 数据绑定\n上面实例中的 {{ firstName }} 表达式是一个 AngularJS 数据绑定表达式。\nAngularJS 中的数据绑定，同步了 AngularJS 表达式与 AngularJS 数据。\n{{ firstName }} 是通过 ng-model=\"firstName\" 进行同步。\n在下一个实例中，两个文本域是通过两个 ng-model 指令同步的：\n```python\n<div ng-app=\"\" ng-init=\"quantity=1;price=5\">\n \n<h2>价格计算器</h2>\n \n数量： <input type=\"number\"    ng-model=\"quantity\">\n价格： <input type=\"number\" ng-model=\"price\">\n \n<p><b>总价：</b> {{ quantity * price }}</p>\n \n</div>\n```\n\n## 重复 HTML 元素\nng-repeat 指令会重复一个 HTML 元素：\nAngularJS 实例\n```python\n<div ng-app=\"\" ng-init=\"names=['Jani','Hege','Kai']\">\n  <p>使用 ng-repeat 来循环数组</p>\n  <ul>\n    <li ng-repeat=\"x in names\">\n      {{ x }}\n    </li>\n  </ul>\n</div>\n```\nng-repeat 指令用在一个对象数组上：\nAngularJS 实例\n```python\n<div ng-app=\"\" ng-init=\"names=[\n{name:'Jani',country:'Norway'},\n{name:'Hege',country:'Sweden'},\n{name:'Kai',country:'Denmark'}]\">\n \n<p>循环对象：</p>\n<ul>\n  <li ng-repeat=\"x    in names\">\n    {{ x.name + ', ' + x.country }}\n  </li>\n</ul>\n \n</div>\n```\nAngularJS 完美支持数据库的 CRUD（增加Create、读取Read、更新Update、删除Delete）应用程序。\n把实例中的对象想象成数据库中的记录。\n\nng-app 指令\nng-app 指令定义了 AngularJS 应用程序的 根元素。\nng-app 指令在网页加载完毕时会自动引导（自动初始化）应用程序。\n稍后您将学习到 ng-app 如何通过一个值（比如 ng-app=\"myModule\"）连接到代码模块。\nng-init 指令\nng-init 指令为 AngularJS 应用程序定义了 初始值。\n通常情况下，不使用 ng-init。您将使用一个控制器或模块来代替它。\n稍后您将学习更多有关控制器和模块的知识。\nng-model 指令\nng-model 指令 绑定 HTML 元素 到应用程序数据。\nng-model 指令也可以：\n为应用程序数据提供类型验证（number、email、required）。\n为应用程序数据提供状态（invalid、dirty、touched、error）。\n为 HTML 元素提供 CSS 类。\n绑定 HTML 元素到 HTML 表单。\nng-repeat 指令\nng-repeat 指令对于集合中（数组中）的每个项会 克隆一次 HTML 元素。\n\n创建自定义的指令\n除了 AngularJS 内置的指令外，我们还可以创建自定义指令。\n你可以使用 .directive 函数来添加自定义的指令。\n要调用自定义指令，HTML 元素上需要添加自定义指令名。\n使用驼峰法来命名一个指令， runoobDirective, 但在使用它时需要以 - 分割, runoob-directive:\nAngularJS 实例\n```python\n<body ng-app=\"myApp\">\n\n<runoob-directive></runoob-directive>\n\n<script>\nvar app = angular.module(\"myApp\", []);\napp.directive(\"runoobDirective\", function() {\n    return {\n        template : \"<h1>自定义指令!</h1>\"\n    };\n});\n</scrip t>\n\n</body>\n```\n你可以通过以下方式来调用指令：\n元素名\n属性\n类名\n注释\n以下实例方式也能输出同样结果:\n\n```python\n元素名\n<runoob-directive></runoob-directive>\n\n属性\n<div runoob-directive></div>\n\n类名\n<div class=\"runoob-directive\"></div>\n\n注释\n<!-- directive: runoob-directive -->\n\n```\n限制使用\n你可以限制你的指令只能通过特定的方式来调用。\n实例\n通过添加 restrict 属性,并设置只值为 \"A\", 来设置指令只能通过属性的方式来调用:\n```python\nvar app = angular.module(\"myApp\", []);\napp.directive(\"runoobDirective\", function() {\n    return {\n        restrict : \"A\",\n        template : \"<h1>自定义指令!</h1>\"\n    };\n});\n```\nrestrict 值可以是以下几种:\nE 作为元素名使用\nA 作为属性使用\nC 作为类名使用\nM 作为注释使用\nrestrict 默认值为 EA, 即可以通过元素名和属性名来调用指令。\n\n```python\nangular自定义指令的两种写法：\n上面这种，感觉更清晰明确一点。\n// angular.module('MyApp',[])\n// .directive('zl1',zl1)\n// .controller('con1',['$scope',func1]);\n//\n// function zl1(){\n//   var directive={\n//     restrict:'AEC',\n//     template:'this is the it-first directive',\n//   };\n//   return directive;\n// };\n//\n// function func1($scope){\n//   $scope.name=\"alice\";\n// }\n\n//这是教程里类似的写法\nangular.module('myApp',[]).directive('zl1',[ function(){\n  return {\n    restrict:'AE',\n    template:'thirective',\n    link:function($scope,elm,attr,controller){\n      console.log(\"这是link\");\n    },\n    controller:function($scope,$element,$attrs){\n      console.log(\"这是con\");\n    }\n  };\n}]).controller('Con1',['$scope',function($scope){\n  $scope.name=\"aliceqqq\";\n}]);\nAlice2周前 (12-29)\n\n还有指令配置项的：link controller等在项目运用中有遇到过：\nangular.module('myApp', []).directive('first', [ function(){\n    return {\n        // scope: false, // 默认值，共享父级作用域\n        // controller: function($scope, $element, $attrs, $transclude) {},\n        restrict: 'AE', // E = Element, A = Attribute, C = Class, M = Comment\n        template: 'first name:{{name}}',\n    };\n}]).directive('second', [ function(){\n    return {\n        scope: true, // 继承父级作用域并创建指令自己的作用域\n        // controller: function($scope, $element, $attrs, $transclude) {},\n        restrict: 'AE', // E = Element, A = Attribute, C = Class, M = Comment\n        //当修改这里的name时，second会在自己的作用域中新建一个name变量，与父级作用域中的\n        // name相对独立，所以再修改父级中的name对second中的name就不会有影响了\n        template: 'second name:{{name}}',\n    };\n}]).directive('third', [ function(){\n    return {\n        scope: {}, // 创建指令自己的独立作用域，与父级毫无关系\n        // controller: function($scope, $element, $attrs, $transclude) {},\n        restrict: 'AE', // E = Element, A = Attribute, C = Class, M = Comment\n        template: 'third name:{{name}}',\n    };\n}])\n.controller('DirectiveController', ['$scope', function($scope){\n    $scope.name=\"mike\";\n}]);\n```\n\n## AngularJS ng-model 指令\nng-model 指令用于绑定应用程序数据到 HTML 控制器(input, select, textarea)的值。\nng-model 指令\nng-model 指令可以将输入域的值与 AngularJS 创建的变量绑定。\nAngularJS 实例\n```python\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n    名字: <input ng-model=\"name\">\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n    $scope.name = \"John Doe\";\n});\n</scrip t>\n```\n\n双向绑定\n双向绑定，在修改输入域的值时， AngularJS 属性的值也将修改：\nAngularJS 实例\n```python\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n    名字: <input ng-model=\"name\">\n    <h1>你输入了: {{name}}</h1>\n</div>\n```\n\n验证用户输入\nAngularJS 实例\n```python\n<form ng-app=\"\" name=\"myForm\">\n    Email:\n    <input type=\"email\" name=\"myAddress\" ng-model=\"text\">\n    <span ng-show=\"myForm.myAddress.$error.email\">不是一个合法的邮箱地址</span>\n</form>\n```\n以上实例中，提示信息会在 ng-show 属性返回 true 的情况下显示。\n\n应用状态\nng-model 指令可以为应用数据提供状态值(invalid, dirty, touched, error):\nAngularJS 实例\n```python\n<form ng-app=\"\" name=\"myForm\" ng-init=\"myText = 'test@runoob.com'\">\n    Email:\n    <input type=\"email\" name=\"myAddress\" ng-model=\"myText\" required></p>\n    <h1>状态</h1>\n    {{myForm.myAddress.$valid}}\n    {{myForm.myAddress.$dirty}}\n    {{myForm.myAddress.$touched}}\n</form>\n```\n\nCSS 类\nng-model 指令基于它们的状态为 HTML 元素提供了 CSS 类：\nAngularJS 实例\n```python\n<style>\ninput.ng-invalid {\n    background-color: lightblue;\n}\n</style>\n<body>\n\n<form ng-app=\"\" name=\"myForm\">\n    输入你的名字:\n    <input name=\"myAddress\" ng-model=\"text\" required>\n</form>\n```\nng-model 指令根据表单域的状态添加/移除以下类：\nng-empty\nng-not-empty\nng-touched\nng-untouched\nng-valid\nng-invalid\nng-dirty\nng-pending\nng-pristine\n\n## AngularJS 控制器\nAngularJS 控制器 控制 AngularJS 应用程序的数据。\n AngularJS 控制器是常规的 JavaScript 对象。\n AngularJS 控制器\nAngularJS 应用程序被控制器控制。\nng-controller 指令定义了应用程序控制器。\n控制器是 JavaScript 对象，由标准的 JavaScript 对象的构造函数 创建。\nAngularJS 实例\n```python\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n\n名: <input type=\"text\" ng-model=\"firstName\"><br>\n姓: <input type=\"text\" ng-model=\"lastName\"><br>\n<br>\n姓名: {{firstName + \" \" + lastName}}\n\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n    $scope.firstName = \"John\";\n    $scope.lastName = \"Doe\";\n});\n</scrip t >\n```\n应用解析：\nAngularJS 应用程序由 ng-app 定义。应用程序在 <div> 内运行。\nng-controller=\"myCtrl\" \b属性是一个 AngularJS 指令。用于定义一个控制器。\nmyCtrl 函数是一个 JavaScript 函数。\nAngularJS 使用$scope 对象来调用控制器。\n在 AngularJS 中， $scope 是一个应用对象(属于应用变量和函数)。\n控制器的 $scope （相当于作用域、控制范围）用来保存AngularJS Model(模型)的对象。\n控制器在作用域中创建了两个属性 (firstName 和 lastName)。\nng-model 指令绑定输入域到控制器的属性（firstName 和 lastName）。\n\n控制器方法\n上面的实例演示了一个带有 lastName 和 firstName 这两个属性的控制器对象。\n控制器也可以有方法（变量和函数）：\nAngularJS 实例\n```python\n<div ng-app=\"myApp\" ng-controller=\"personCtrl\">\n\n名: <input type=\"text\" ng-model=\"firstName\"><br>\n姓: <input type=\"text\" ng-model=\"lastName\"><br>\n<br>\n姓名: {{fullName()}}\n\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('personCtrl', function($scope) {\n    $scope.firstName = \"John\";\n    $scope.lastName = \"Doe\";\n    $scope.fullName = function() {\n        return $scope.firstName + \" \" + $scope.lastName;\n    }\n});\n</scrip t>\n```\n\n## AngularJS 包含\n在 AngularJS 中，你可以在 HTML 中包含 HTML 文件。\n使用 AngularJS, 你可以使用 ng-include 指令来包含 HTML 内容:\n实例\n```python\n<body ng-app=\"\">\n \n<div ng-include=\"'runoob.htm'\"></div>\n \n</body>\n```\n\n## AngularJS 依赖注入\n依赖注入（Dependency Injection，简称DI）是一种软件设计模式，在这种模式下，一个或更多的依赖（或服务）被注入（或者通过引用传递）到一个独立的对象（或客户端）中，然后成为了该客户端状态的一部分。\n该模式分离了客户端依赖本身行为的创建，这使得程序设计变得松耦合，并遵循了依赖反转和单一职责原则。与服务定位器模式形成直接对比的是，它允许客户端了解客户端如何使用该系统找到依赖\nAngularJS 提供很好的依赖注入机制。以下5个核心组件用来作为依赖注入：\nvalue\nfactory\nservice\nprovider\nconstant\n\nvalue\nValue 是一个简单的 javascript 对象，用于向控制器传递值（配置阶段）：\n```python\n// 定义一个模块\nvar mainApp = angular.module(\"mainApp\", []);\n\n// 创建 value 对象 \"defaultInput\" 并传递数据\nmainApp.value(\"defaultInput\", 5);\n...\n\n// 将 \"defaultInput\" 注入到控制器\nmainApp.controller('CalcController', function($scope, CalcService, defaultInput) {\n   $scope.number = defaultInput;\n   $scope.result = CalcService.square($scope.number);\n   \n   $scope.square = function() {\n      $scope.result = CalcService.square($scope.number);\n   }\n});\n```\nfactory\nfactory 是一个函数用于返回值。在 service 和 controller 需要时创建。\n通常我们使用 factory 函数来计算或返回值。\n```python\n// 定义一个模块\nvar mainApp = angular.module(\"mainApp\", []);\n\n// 创建 factory \"MathService\" 用于两数的乘积 provides a method multiply to return multiplication of two numbers\nmainApp.factory('MathService', function() {\n   var factory = {};\n   \n   factory.multiply = function(a, b) {\n      return a * b\n   }\n   return factory;\n}); \n\n// 在 service 中注入 factory \"MathService\"\nmainApp.service('CalcService', function(MathService){\n   this.square = function(a) {\n      return MathService.multiply(a,a);\n   }\n});\n...\n```\nprovider\nAngularJS 中通过 provider 创建一个 service、factory等(配置阶段)。\nProvider 中提供了一个 factory 方法 get()，它用于返回 value/service/factory。\n```python\n// 定义一个模块\nvar mainApp = angular.module(\"mainApp\", []);\n...\n\n// 使用 provider 创建 service 定义一个方法用于计算两数乘积\nmainApp.config(function($provide) {\n   $provide.provider('MathService', function() {\n      this.$get = function() {\n         var factory = {};  \n         \n         factory.multiply = function(a, b) {\n            return a * b; \n         }\n         return factory;\n      };\n   });\n});\n```\n\nconstant\nconstant(常量)用来在配置阶段传递数值，注意这个常量在配置阶段是不可用的。\nmainApp.constant(\"configParam\", \"constant value\");\n\n以下实例提供了以上几个依赖注入机制的演示。\n```python\n<html>\n   \n   <head>\n      <meta charset=\"utf-8\">\n      <title>AngularJS  依赖注入</title>\n   </head>\n   \n   <body>\n      <h2>AngularJS 简单应用</h2>\n      \n      <div ng-app = \"mainApp\" ng-controller = \"CalcController\">\n         <p>输入一个数字: <input type = \"number\" ng-model = \"number\" /></p>\n         <button ng-click = \"square()\">X<sup>2</sup></button>\n         <p>结果: {{result}}</p>\n      </div>\n      \n      <script src=\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js\"></scrip t>\n      \n      <script>\n         var mainApp = angular.module(\"mainApp\", []);\n         \n         mainApp.config(function($provide) {\n            $provide.provider('MathService', function() {\n               this.$get = function() {\n                  var factory = {};\n                  \n                  factory.multiply = function(a, b) {\n                     return a * b;\n                  }\n                  return factory;\n               };\n            });\n         });\n\t\t\t\n         mainApp.value(\"defaultInput\", 5);\n         \n         mainApp.factory('MathService', function() {\n            var factory = {};\n            \n            factory.multiply = function(a, b) {\n               return a * b;\n            }\n            return factory;\n         });\n         \n         mainApp.service('CalcService', function(MathService){\n            this.square = function(a) {\n               return MathService.multiply(a,a);\n            }\n         });\n         \n         mainApp.controller('CalcController', function($scope, CalcService, defaultInput) {\n            $scope.number = defaultInput;\n            $scope.result = CalcService.square($scope.number);\n\n            $scope.square = function() {\n               $scope.result = CalcService.square($scope.number);\n            }\n         });\n\t\t\t\n      </scrip t>\n      \n   </body>\n</html>\n```\n\n## AngularJS 服务(Service)\nAngularJS 中你可以创建自己的服务，或使用内建服务。\n什么是服务？\n在 AngularJS 中，服务是一个函数或对象，可在你的 AngularJS 应用中使用。\nAngularJS 内建了30 多个服务。\n有个 $location 服务，它可以返回当前页面的 URL 地址。\n实例\n```python\nvar app = angular.module('myApp', []);\napp.controller('customersCtrl', function($scope, $location) {\n    $scope.myUrl = $location.absUrl();\n});\n```\n$http 服务\n$http 是 AngularJS 应用中最常用的服务。 服务向服务器发送请求，应用响应服务器传送过来的数据。\n```python\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope, $http) {\n    $http.get(\"welcome.htm\").then(function (response) {\n        $scope.myWelcome = response.data;\n    });\n});\n```\n\n$timeout 服务\nAngularJS $timeout 服务对应了 JS window.setTimeout 函数。\n```python\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope, $timeout) {\n    $scope.myHeader = \"Hello World!\";\n    $timeout(function () {\n        $scope.myHeader = \"How are you today?\";\n    }, 2000);\n});\n```\n$interval 服务\nAngularJS $interval 服务对应了 JS window.setInterval 函数。\n\n创建自定义服务\n你可以创建访问自定义服务，链接到你的模块中：\n创建名为hexafy 的访问:\n```python\napp.service('hexafy', function() {\n    this.myFunc = function (x) {\n        return x.toString(16);\n    }\n});\n```\n要使用访问自定义服务，需要在定义过滤器的时候独立添加:\n实例\n使用自定义的的服务 hexafy 将一个数字转换为16进制数:\n\n```python\napp.controller('myCtrl', function($scope, hexafy) {\n    $scope.hex = hexafy.myFunc(255);\n});\n```\n过滤器中，使用自定义服务\n当你创建了自定义服务，并连接到你的应用上后，你可以在控制器，指令，过滤器或其他服务中使用它。\n在过滤器 myFormat 中使用服务 hexafy:\n```python\napp.filter('myFormat',['hexafy', function(hexafy) {\n    return function(x) {\n        return hexafy.myFunc(x);\n    };\n}]);\n```\n在对象数组中获取值时你可以使用过滤器：\n创建服务 hexafy:\n```python\n<ul>\n<li ng-repeat=\"x in counts\">{{x | myFormat}}</li>\n</ul>\n```\n## 应用\nng-app 指令位于应用的根元素下。\n对于单页Web应用（single page web application，SPA），应用的根通常为 <html> 元素。\n一个或多个 ng-controller 指令定义了应用的控制器。每个控制器有他自己的作用域：: 定义的 HTML 元素。\nAngularJS 在 HTML DOMContentLoaded 事件中自动开始。如果找到 ng-app 指令 ， AngularJS 载入指令中的模块，并将 ng-app 作为应用的根进行编译。\n应用的根可以是整个页面，或者页面的一小部分，如果是一小部分会更快编译和执行。\n\n\n## AngularJS中的依赖注入\n1、angular.module()创建、获取、注册angular中的模块\n```python\n/ 传递参数不止一个,代表新建模块;空数组代表该模块不依赖其他模块\nvar createModule = angular.module(\"myModule\", []);\n\n// 只有一个参数(模块名),代表获取模块\n// 如果模块不存在,angular框架会抛异常\nvar getModule = angular.module(\"myModule\");\n\n// true,都是同一个模块\nalert(createModule == getModule);\n```\n\n该函数既可以创建新的模块，也可以获取已有模块，是创建还是获取，通过参数的个数来区分。\nangular.module(name, [requires], [configFn]);\n\nname：字符串类型，代表模块的名称；\n\nrequires：字符串的数组，代表该模块依赖的其他模块列表，如果不依赖其他模块，用空数组即可；\n\nconfigFn：用来对该模块进行一些配置。\n\n4、angular中三种声明依赖的方式\n\nangular提供了3种获取依赖的方式：inference、annotation、inline方式。\n\n```python\n// 创建myModule模块、注册服务\nvar myModule = angular.module('myModule', []);\nmyModule.service('myService', function() {\n\t\t\tthis.my = 0;\n});\n\n// 获取injector\nvar injector = angular.injector([\"myModule\"]);\n\n// 第一种inference\ninjector.invoke(function(myService){alert(myService.my);});\n\n// 第二种annotation\nfunction explicit(serviceA) {alert(serviceA.my);};\nexplicit.$inject = ['myService'];\ninjector.invoke(explicit);\n\n// 第三种inline\ninjector.invoke(['myService', function(serviceA){alert(serviceA.my);}]);\n```\n```python\nhttp://blog.csdn.net/renfufei/article/details/19038123\n```\n依赖注解 | Dependency Annotation\ninjector 怎么知道需要注入何种 service 呢?\n为了解决依赖关系,应用程序开发者需要提供 injector 需要的 annotation 信息。在 Angular 中,某些API函数通过使用 injector 来调用,请按照API文档。injector 需要知道注入哪些服务给函数。下面是通过 service name 信息对代码进行注解的三种等价方式。他们都是等价的，你可以在适当的地方互换使用.\n\n推断依赖关系 | Inferring Dependencies\n最简单的获取依赖的方式,就是让函数参数名和依赖的名字一致。\n```python\nfunction MyController($scope, greeter) {  \n  ...  \n}  \n```\n给定一个 function, injector 通过检查函数声明和提取参数名称可以推断出 service 的名称 。在上面的例子中, $scope 和 greeter 是需要注入 function 的两个 services。\n虽然简单直接, 但这种方法在 JavaScript 压缩/混淆 时会失效,因为会重命名方法的参数名。这使得这种注解方式只适用于 pretotyping, 或者 demo 程序中。\n\n$inject 注解 | $inject Annotation\n为了可以在压缩代码后依然可以注入正确的 services, 函数需要通过 $inject 属性来注解. $inject 属性是一个数组,包含 需要注入的 service 名字.\n\nvar MyController = function(renamed$scope, renamedGreeter) {  \n}  \nMyController['$inject'] = ['$scope', 'greeter'];  \n\n\n在这种情况下,$inject数组中的值的顺序必须和要注入的参数的顺序一致。使用上面的代码片段作为一个例子, '$scope' 将注入到 “renamed$scope”, 而“greeter” 将注入到 “renamedGreeter”。再次提醒注意 $inject 注解必须和 函数声明时的实际参数保持同步(顺序,个数...)。\n对于 controller 声明,这种注解方法是很有用的,因为它将注解信息赋给了 function。\n\n简介AngularJS中使用factory和service的方法\nAngularJS支持使用服务的体系结构“关注点分离”的概念。服务是JavaScript函数，并负责只做一个特定的任务。这也使得他们即维护和测试的单独实体。控制器，过滤器可以调用它们作为需求的基础。服务使用AngularJS的依赖注入机制注入正常。\nAngularJS提供例如许多内在的服务，如：$http, $route, $window, $location等。每个服务负责例如一个特定的任务，$http是用来创建AJAX调用，以获得服务器的数据。 $route用来定义路由信息等。内置的服务总是前缀$符号。\n有两种方法来创建服务。\n    工厂\n    服务\n使用工厂方法\n使用工厂方法，我们先定义一个工厂，然后分配方法给它。\n```python\n   var mainApp = angular.module(\"mainApp\", []);\n   mainApp.factory('MathService', function() {   \n     var factory = {}; \n     factory.multiply = function(a, b) {\n      return a * b \n     }\n     return factory;\n   }); \n   ```\n   使用服务方法\n使用服务的方法，我们定义了一个服务，然后分配方法。还注入已经可用的服务。\n```python\nmainApp.service('CalcService', function(MathService){\n  this.square = function(a) { \n return MathService.multiply(a,a); \n }\n});\n```\n\n$rootScope\n\n一个网站中有很多页面都要判断登录状态 ， 我之前是直接在启动的时候查登录状态，并挂在$rootScope上，然后各个页面判断登录状态的操作逻辑直接与$rootScope对应属性双向绑定。 这样就不用事件传递了 ，如果涉及逻辑操作 ，还是建议放在服务里面。 services 相当于业务处理模块，而$rootScope 相当于全局变量。\nscope是AngularJS中的作用域(其实就是存储数据的地方)，很类似JavaScript的原型链 。搜索的时候，优先找自己的scope，如果没有找到就沿着作用域链向上搜索，直至到达根作用域rootScope。\n　　$rootScope是由angularJS加载模块的时候自动创建的，每个模块只会有1个rootScope。rootScope创建好会以服务的形式加入到 $injector中。也就是说通过 $injector.get(\"$ rootScope \");能够获取到某个模块的根作用域。更准确的来说，$rootScope是由angularJS的核心模块ng创建的。\n\n　　scope是html和单个controller之间的桥梁，数据绑定就靠他了。rootscope是各个controller中scope的桥梁。用rootscope定义的值，可以在各个controller中使用\n\n事件：\n\n$stateChangeError\n\n路由状态变化发生错误时触发的事件。参数有：event，toState，toParams，fromState，fromParams，error。以上根据字面意思即可理解，哈哈。\n\n$stateChangeStart\n\n路由状态变化发生前触发的事件。参数有：event，toState，toParams，fromState，fromParams。\n\n$stateChangeSuccess\n\n路由状态变化正确时触发的事件。参数有：event，toState，toParams，fromState，fromParams。\n\n$stateNotFound\n\n路由状态没找到的时候触发的事件。参数有：event，unfoundState，fromState，fromParams。\n\nstate(name,stateConfig);\n\n注册一个状态，并给定其配置。\n参数：\n\nname：状态的名称。\n\nstateConfig：状态配置对象。配置具有以下各项属性：\n\ntemplate： string/function，html模板字符串，或者一个返回html模板字符串的函数。\n\ntemplateUrl：string/function，模板路径的字符串，或者返回模板路径字符串的函数。\n\ntemplateProvider：function，返回html模板字符串或模板路径的服务。\n\ncontroller：string/function，新注册一个控制器函数或者一个已注册的控制器的名称字符串。\n\ncontrollerProvider：function，返回控制器或者控制器名称的服务\n\ncontrollerAs：string，控制器别名。\n\nparent：string/object，手动指定该状态的父级。\n\nresolve：object，将会被注入controller去执行的函数，<string,function>形式。\n\nurl：string，当前状态的对应url。\n\nviews：object，视图展示的配置。<string,object>形式。\n\nabstract：boolean，一个永远不会被激活的抽象的状态，但可以给其子级提供特性的继承。默认是true。\n\nonEnter：function，当进入一个状态后的回调函数。\n\nonExit：function，当退出一个状态后的回调函数。\n\nreloadOnSearch：boolean，如果为false，那么当一个search/query参数改变时不会触发相同的状态，用于当你修改$location.search()的时候不想重新加载页面。默认为true。\n\ndata：object，任意对象数据，用于自定义配置。继承父级状态的data属性。换句话说，通过原型继承可以达到添加一个data数据从而整个树结构都能获取到。\n\nparams：url里的参数值，通过它可以实现页面间的参数传递。\n\nAngularJS 中的 controllerAs\n\nController 在 AngularJS 应用中可以说是无处不在， 可以在 html 中通过 ngController 指令来指定 Controller ， 语法为：\n\n<ANY\n    ng-controller=\"expression\">\n    ...\n</ANY>\n在 ngRoute 模块中使用， 语法为：\n\n$routeProvider\n    .when('/my-url', {\n        controller: 'MyController'\n    });\n在 ui.route 模块中使用， 语法为：\n\n$stateProvider\n    .state('myState', {\n        controller: 'MyController'\n    })\n上面用法在 AngularJS 的社区、示例程序中非常普遍。 但是， 有一个细节可能很多人没有注意到， 那就是 controllerAs ， 上面的三种用法还可以分别这样使用：\n\n<ANY\n    ng-controller=\"expression as myExpr\">\n    ...\n</ANY>\n$routeProvider\n    .when('/my-url', {\n        controller: 'MyController',\n        controllerAs: 'ctrl'\n    });\n$stateProvider\n    .state('myState', {\n        controller: 'MyController',\n        controllerAs: 'ctrl'\n    })\n那么， 使用了 controllerAs 有什么区别呢？ 在 AngularJS 的文档中是这样说的：\n\none binds methods and properties directly onto the controller using this: ng-controller=”SettingsController1 as settings”\none injects $scope into the controller: ng-controller=”SettingsController2”\n上面的意思是说， 就是使用 controllerAs 将直接绑定 Controller 的属性和方法， 而不使用 controllerAs 将绑定到为 Controller 注入的 $scope 参数， 下面用一个具体的例子来说明一下：\n\n不使用 controllerAs 指令时， 通常我们这样做：\n```python\n\nangular\n    .module('app', []).\n    controller('TestController', TestController);\n\nTestController.$inject = ['$scope', '$window'];\n\nfunction TestController($scope, $window) {\n    $scope.name = 'beginor';\n    \n    $scope.greet = greet;\n    \n    function greet() {\n        $window.alert('Hello, ' + $scope.name);\n    }\n}\n<div ng-Controller=\"TestController\">\n    <label>Name:\n        <input type=\"text\" ng-model=\"name\" />\n    </label>\n    <button type=\"button\" ng-click=\"greet()\">\n</div>\n```\n在 HTML 视图中， 我们绑定的是 $scope 对象的属性和方法， 而不是 TestController 的实例。\n\n上面的例子在使用 controllerAs 时， 可以修改成这样：\n```python\nangular\n    .module('app', []).\n    controller('TestController', TestController);\n\nTestController.$inject = ['$window'];\n\nfunction TestController($window) {\n    this.name = 'beginor';\n    this.$window = $window;\n}\n\nTestController.prototype.greet = function () {\n    this.$window.alert('Hello, ' + this.name);\n}\n<div ng-Controller=\"TestController as vm\">\n    <label>Name:\n        <input type=\"text\" ng-model=\"vm.name\" />\n    </label>\n    <button type=\"button\" ng-click=\"vm.greet()\">\n</div>\n```\n看到区别了吧， 使用 controllerAs 时， 可以将 Controller 定义成 Javascript 的原型类， 在 HTML 视图中直接绑定原型类的属性和方法。\n\n这样做的优点是：\n\n可以使用 Javascript 的原型类， 我们可以使用更加高级的 ES6 或者 TypeScript 来编写 Controller ；\n避开了所谓的 child scope 原型继承带来的一些问题， 具体可以 参考这里 ；\n\n\nangular的uiRouter服务学习(5) --- $state.includes()方法\n$state.includes方法用于判断当前激活状态是否是指定的状态或者是指定状态的子状态.\n\n$state.includes(stateOrName,params,options)\n\n$state.includes方法接受三个参数,其中第二和第三个都不知道是干啥的...估计也不太用得到,就暂时不管了...\n\nstateOrName:字符串(必填). 是一个状态的名字.\n\n比如当前的激活状态是 \"contacts.details.item\" \n\n如下调用:\n\n```python\n$state.includes(\"contacts\");                              //返回true\n$state.includes(\"contacts.details\");                      //返回true\n$state.includes(\"contacts.details.item\");                 //返回true\n$state.includes(\"detail\");                                //返回undefined\n$state.includes(\"item\");                                  //返回undefined\n```\n也可以使用glob语法:\n\n复制代码\n```python\n$state.$current.name = 'contacts.details.item.url';\n \n$state.includes(\"*.details.*.*\"); // returns true\n$state.includes(\"*.details.**\"); // returns true\n$state.includes(\"**.item.**\"); // returns true\n$state.includes(\"*.details.item.url\"); // returns true\n$state.includes(\"*.details.*.url\"); // returns true\n$state.includes(\"*.details.*\"); // returns undefined\n$state.includes(\"item.**\"); // returns undefined\n```\n复制代码\n可以用于激活某个tab,让当前项高亮显示:\n```python\n<li ng-class=\"{active:state.includes('dashboard.report')}\"><a ui-sref=\"dashboard.report\">Reports</a></li>\n```\n需要注意的是,在表达式里直接用$state是不行的,需要在控制器中把$state赋值给$scope下的变量.这样在表达式里才能使用:\n```python\n    $stateProvider.state('dashboard',{\n        url:'/dashboard',\n        templateUrl:'./tpls/dashboard.html',\n        controller:function($scope,$state){\n            $scope.state = $state;              \n        }\n    })\n```\n\nAngularJS ng - swi tch 指令\n根据选中的值显示对应部分:\n```python\n<div ng-switch=\"myVar\">\n  <div ng-switch-when=\"runoob\">\n     <h1>菜鸟教程</h1>\n     <p>欢迎访问菜鸟教程</p>\n  </div>\n  <div ng-switch-when=\"google\">\n     <h1>Google</h1>\n     <p>欢迎访问Google</p>\n  </div>\n  <div ng-switch-when=\"taobao\">\n     <h1>淘宝</h1>\n     <p>欢迎访问淘宝</p>\n  </div>\n  <div ng-switch-default>\n     <h1>切换</h1>\n     <p>选择不同选项显示对应的值。</p>\n  </div>\n</div>\n```\n定义和用法\nng-sw itch 指令根据表达式显示或隐藏对应的部分。\n对应的子元素使用 ng-sw itch-when 指令，如果匹配选中选择显示，其他为匹配的则移除。\n你可以通过使用 ng-s witch-default 指令设置默认选项，如果都没有匹配的情况，默认选项会显示。\n语法\n```python\n<element ng-switch=\"expression\">\n  <element ng-switch-when=\"value\"></element>\n  <element ng-switch-when=\"value\"></element>\n  <element ng-switch-when=\"value\"></element>\n  <element ng-switch-default></element>\n</element>\n<form> 元素支持该属性。\n```\n\n在 Angularjs 中 ui-sref 和 $state.go 如何传递参数\nui-sref、$state.go 的区别\n\nui-sref 一般使用在 < a >...< / a >；\n\n<a ui-sref=\"message-list\">消息中心< / a >\n\n$state.go('someState')一般使用在 controller里面；\n\n.controller('firstCtrl', function($scope, $state) {\n      $state.go('login');\n });\n这两个本质上是一样的东西，我们看ui-sref的源码：\n\n复制代码\n...\nelement.bind(\"click\", function(e) {\n    var button = e.which || e.button;\n    if ( !(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target')) ) {\n\n      var transition = $timeout(function() {\n        // HERE we call $state.go inside of ui-sref\n        $state.go(ref.state, params, options);\n      });\n复制代码\nui-sref最后调用的还是$state.go()方法\n首先，要在目标页面定义接受的参数：\nhttp://images2015.cnblogs.com/blog/337212/201603/337212-20160318181804412-426985465.png\n传参，\n\nui-sref:\nhttp://images2015.cnblogs.com/blog/337212/201603/337212-20160318182142693-1979913166.png\nhttp://images2015.cnblogs.com/blog/337212/201603/337212-20160318182359646-1518874208.png\n\n\n\n","source":"_posts/AngularJS.md","raw":"---\ntitle: AngularJS\ndate: 2017-01-12 11:01:24\ntags:\n---\n\nangular -  ng关键字缩写\nAngularJS 是一个 JavaScript 框架。它可通过 script 标签添加到 HTML 页面。\nAngularJS 通过 指令 扩展了 HTML，且通过 表达式 绑定数据到 HTML。\nAngularJS 是一个 JavaScript 框架\nAngularJS 是一个 JavaScript 框架。它是一个以 JavaScript 编写的库。\nAngularJS 是以一个 JavaScript 文件形式发布的，可通过 script 标签添加到网页中：\n\n```python\n<script src=\"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js\">\n</script>\n```\n\n各个 angular.js 版本下载： https://github.com/angular/angular.js/releases\nAngularJS 扩展了 HTML\nAngularJS 通过 ng-directives 扩展了 HTML。\nng-app 指令定义一个 AngularJS 应用程序。\nng-model 指令把元素值（比如输入域的值）绑定到应用程序。\nng-bind 指令把应用程序数据绑定到 HTML 视图。\nAngularJS 实例\n\n```python\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<script src=\"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js\"></scrip t >\n</head>\n<body>\n \n<div ng-app=\"\">\n     <p>名字 : <input type=\"text\" ng-model=\"name\"></p>\n     <h1>Hello {{name}}</h1>\n</div>\n \n</body>\n</html>\n```\n\n实例讲解：\n当网页加载完毕，AngularJS 自动开启。\nng-app 指令告诉 AngularJS，<div> 元素是 AngularJS 应用程序 的\"所有者\"。\nng-model 指令把输入域的值绑定到应用程序变量 name。\nng-bind 指令把应用程序变量 name 绑定到某个段落的 innerHTML。\n\n什么是 AngularJS？\nAngularJS 使得开发现代的单一页面应用程序（SPAs：Single Page Applications）变得更加容易。\nAngularJS 把应用程序数据绑定到 HTML 元素。\nAngularJS 可以克隆和重复 HTML 元素。\nAngularJS 可以隐藏和显示 HTML 元素。\nAngularJS 可以在 HTML 元素\"背后\"添加代码。\nAngularJS 支持输入验证。\nAngularJS 指令\n正如您所看到的，AngularJS 指令是以 ng 作为前缀的 HTML 属性。\nng-init 指令初始化 AngularJS 应用程序变量。\nAngularJS 实例\n```python\n<div ng-app=\"\" ng-init=\"firstName='John'\">\n \n<p>姓名为 <span ng-bind=\"firstName\"></span></p>\n \n</div>\n```\nHTML5 允许扩展的（自制的）属性，以 data- 开头。\nAngularJS 属性以 ng- 开头，但是您可以使用 data-ng- 来让网页对 HTML5 有效。\nAngularJS 实例\n```python\n<div data-ng-app=\"\" data-ng-init=\"firstName='John'\">\n \n<p>姓名为 <span data-ng-bind=\"firstName\"></span></p>\n \n</div>\n```\nAngularJS 表达式\nAngularJS 表达式写在双大括号内：{{ expression }}。\nAngularJS 表达式把数据绑定到 HTML，这与 ng-bind 指令有异曲同工之妙。\nAngularJS 将在表达式书写的位置\"输出\"数据。\nAngularJS 表达式 很像 JavaScript 表达式：它们可以包含文字、运算符和变量。\n实例 {{ 5 + 5 }} 或 {{ firstName + \" \" + lastName }}\nAngularJS 实例\n```python\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<script src=\"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js\"></scrip t> \n</head>\n<body>\n \n<div ng-app=\"\">\n     <p>我的第一个表达式： {{ 5 + 5 }}</p>\n</div>\n \n</body>\n</html>\n```\nAngularJS 应用\nAngularJS 模块（Module） 定义了 AngularJS 应用。\nAngularJS 控制器（Controller） 用于控制 AngularJS 应用。\nng-app指令定义了应用, ng-controller 定义了控制器。\nAngularJS 实例\n```python\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n \n名: <input type=\"text\" ng-model=\"firstName\"><br>\n姓: <input type=\"text\" ng-model=\"lastName\"><br>\n<br>\n姓名: {{firstName + \" \" + lastName}}\n \n</div>\n \n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n    $scope.firstName= \"John\";\n    $scope.lastName= \"Doe\";\n});\n</scrip t>\n```\nAngularJS 模块定义应用:\nAngularJS 模块\n```python\nvar app = angular.module('myApp', []);\n```\nAngularJS 控制器控制应用:\nAngularJS 控制器\n```python\napp.controller('myCtrl', function($scope) {\n    $scope.firstName= \"John\";\n    $scope.lastName= \"Doe\";\n});\n```\n使用 ng-init 不是很常见。您将在控制器一章中学习到一个更好的初始化数据的方式。\n## 表达式\n```python\n数字\n<div ng-app=\"\" ng-init=\"quantity=1;cost=5\">\n \n<p>总价： {{ quantity * cost }}</p>\n \n</div>\n\n字符串\n<div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\">\n \n<p>姓名： {{ firstName + \" \" + lastName }}</p>\n \n</div>\n\n对象\n<div ng-app=\"\" ng-init=\"person={firstName:'John',lastName:'Doe'}\">\n \n<p>姓为 {{ person.lastName }}</p>\n \n</div>\n\n数组\n<div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\">\n \n<p>第三个值为 {{ points[2] }}</p>\n \n</div>\n```\nAngularJS 表达式 与 JavaScript 表达式\n类似于 JavaScript 表达式，AngularJS 表达式可以包含字母，操作符，变量。\n与 JavaScript 表达式不同，AngularJS 表达式可以写在 HTML 中。\n与 JavaScript 表达式不同，AngularJS 表达式不支持条件判断，循环及异常。\n与 JavaScript 表达式不同，AngularJS 表达式支持过滤器。\n\n## AngularJS 指令\nAngularJS 通过被称为 指令 的新属性来扩展 HTML。\nAngularJS 通过内置的指令来为应用添加功能。\nAngularJS 允许你自定义指令。\nAngularJS 指令是扩展的 HTML 属性，带有前缀 ng-。\nng-app 指令初始化一个 AngularJS 应用程序。\nng-init 指令初始化应用程序数据。\nng-model 指令把元素值（比如输入域的值）绑定到应用程序。\n\nng-app 指令告诉 AngularJS，<div> 元素是 AngularJS 应用程序 的\"所有者\"。\n一个网页可以包含多个运行在不同元素中的 AngularJS 应用程序。\n\n## 数据绑定\n上面实例中的 {{ firstName }} 表达式是一个 AngularJS 数据绑定表达式。\nAngularJS 中的数据绑定，同步了 AngularJS 表达式与 AngularJS 数据。\n{{ firstName }} 是通过 ng-model=\"firstName\" 进行同步。\n在下一个实例中，两个文本域是通过两个 ng-model 指令同步的：\n```python\n<div ng-app=\"\" ng-init=\"quantity=1;price=5\">\n \n<h2>价格计算器</h2>\n \n数量： <input type=\"number\"    ng-model=\"quantity\">\n价格： <input type=\"number\" ng-model=\"price\">\n \n<p><b>总价：</b> {{ quantity * price }}</p>\n \n</div>\n```\n\n## 重复 HTML 元素\nng-repeat 指令会重复一个 HTML 元素：\nAngularJS 实例\n```python\n<div ng-app=\"\" ng-init=\"names=['Jani','Hege','Kai']\">\n  <p>使用 ng-repeat 来循环数组</p>\n  <ul>\n    <li ng-repeat=\"x in names\">\n      {{ x }}\n    </li>\n  </ul>\n</div>\n```\nng-repeat 指令用在一个对象数组上：\nAngularJS 实例\n```python\n<div ng-app=\"\" ng-init=\"names=[\n{name:'Jani',country:'Norway'},\n{name:'Hege',country:'Sweden'},\n{name:'Kai',country:'Denmark'}]\">\n \n<p>循环对象：</p>\n<ul>\n  <li ng-repeat=\"x    in names\">\n    {{ x.name + ', ' + x.country }}\n  </li>\n</ul>\n \n</div>\n```\nAngularJS 完美支持数据库的 CRUD（增加Create、读取Read、更新Update、删除Delete）应用程序。\n把实例中的对象想象成数据库中的记录。\n\nng-app 指令\nng-app 指令定义了 AngularJS 应用程序的 根元素。\nng-app 指令在网页加载完毕时会自动引导（自动初始化）应用程序。\n稍后您将学习到 ng-app 如何通过一个值（比如 ng-app=\"myModule\"）连接到代码模块。\nng-init 指令\nng-init 指令为 AngularJS 应用程序定义了 初始值。\n通常情况下，不使用 ng-init。您将使用一个控制器或模块来代替它。\n稍后您将学习更多有关控制器和模块的知识。\nng-model 指令\nng-model 指令 绑定 HTML 元素 到应用程序数据。\nng-model 指令也可以：\n为应用程序数据提供类型验证（number、email、required）。\n为应用程序数据提供状态（invalid、dirty、touched、error）。\n为 HTML 元素提供 CSS 类。\n绑定 HTML 元素到 HTML 表单。\nng-repeat 指令\nng-repeat 指令对于集合中（数组中）的每个项会 克隆一次 HTML 元素。\n\n创建自定义的指令\n除了 AngularJS 内置的指令外，我们还可以创建自定义指令。\n你可以使用 .directive 函数来添加自定义的指令。\n要调用自定义指令，HTML 元素上需要添加自定义指令名。\n使用驼峰法来命名一个指令， runoobDirective, 但在使用它时需要以 - 分割, runoob-directive:\nAngularJS 实例\n```python\n<body ng-app=\"myApp\">\n\n<runoob-directive></runoob-directive>\n\n<script>\nvar app = angular.module(\"myApp\", []);\napp.directive(\"runoobDirective\", function() {\n    return {\n        template : \"<h1>自定义指令!</h1>\"\n    };\n});\n</scrip t>\n\n</body>\n```\n你可以通过以下方式来调用指令：\n元素名\n属性\n类名\n注释\n以下实例方式也能输出同样结果:\n\n```python\n元素名\n<runoob-directive></runoob-directive>\n\n属性\n<div runoob-directive></div>\n\n类名\n<div class=\"runoob-directive\"></div>\n\n注释\n<!-- directive: runoob-directive -->\n\n```\n限制使用\n你可以限制你的指令只能通过特定的方式来调用。\n实例\n通过添加 restrict 属性,并设置只值为 \"A\", 来设置指令只能通过属性的方式来调用:\n```python\nvar app = angular.module(\"myApp\", []);\napp.directive(\"runoobDirective\", function() {\n    return {\n        restrict : \"A\",\n        template : \"<h1>自定义指令!</h1>\"\n    };\n});\n```\nrestrict 值可以是以下几种:\nE 作为元素名使用\nA 作为属性使用\nC 作为类名使用\nM 作为注释使用\nrestrict 默认值为 EA, 即可以通过元素名和属性名来调用指令。\n\n```python\nangular自定义指令的两种写法：\n上面这种，感觉更清晰明确一点。\n// angular.module('MyApp',[])\n// .directive('zl1',zl1)\n// .controller('con1',['$scope',func1]);\n//\n// function zl1(){\n//   var directive={\n//     restrict:'AEC',\n//     template:'this is the it-first directive',\n//   };\n//   return directive;\n// };\n//\n// function func1($scope){\n//   $scope.name=\"alice\";\n// }\n\n//这是教程里类似的写法\nangular.module('myApp',[]).directive('zl1',[ function(){\n  return {\n    restrict:'AE',\n    template:'thirective',\n    link:function($scope,elm,attr,controller){\n      console.log(\"这是link\");\n    },\n    controller:function($scope,$element,$attrs){\n      console.log(\"这是con\");\n    }\n  };\n}]).controller('Con1',['$scope',function($scope){\n  $scope.name=\"aliceqqq\";\n}]);\nAlice2周前 (12-29)\n\n还有指令配置项的：link controller等在项目运用中有遇到过：\nangular.module('myApp', []).directive('first', [ function(){\n    return {\n        // scope: false, // 默认值，共享父级作用域\n        // controller: function($scope, $element, $attrs, $transclude) {},\n        restrict: 'AE', // E = Element, A = Attribute, C = Class, M = Comment\n        template: 'first name:{{name}}',\n    };\n}]).directive('second', [ function(){\n    return {\n        scope: true, // 继承父级作用域并创建指令自己的作用域\n        // controller: function($scope, $element, $attrs, $transclude) {},\n        restrict: 'AE', // E = Element, A = Attribute, C = Class, M = Comment\n        //当修改这里的name时，second会在自己的作用域中新建一个name变量，与父级作用域中的\n        // name相对独立，所以再修改父级中的name对second中的name就不会有影响了\n        template: 'second name:{{name}}',\n    };\n}]).directive('third', [ function(){\n    return {\n        scope: {}, // 创建指令自己的独立作用域，与父级毫无关系\n        // controller: function($scope, $element, $attrs, $transclude) {},\n        restrict: 'AE', // E = Element, A = Attribute, C = Class, M = Comment\n        template: 'third name:{{name}}',\n    };\n}])\n.controller('DirectiveController', ['$scope', function($scope){\n    $scope.name=\"mike\";\n}]);\n```\n\n## AngularJS ng-model 指令\nng-model 指令用于绑定应用程序数据到 HTML 控制器(input, select, textarea)的值。\nng-model 指令\nng-model 指令可以将输入域的值与 AngularJS 创建的变量绑定。\nAngularJS 实例\n```python\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n    名字: <input ng-model=\"name\">\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n    $scope.name = \"John Doe\";\n});\n</scrip t>\n```\n\n双向绑定\n双向绑定，在修改输入域的值时， AngularJS 属性的值也将修改：\nAngularJS 实例\n```python\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n    名字: <input ng-model=\"name\">\n    <h1>你输入了: {{name}}</h1>\n</div>\n```\n\n验证用户输入\nAngularJS 实例\n```python\n<form ng-app=\"\" name=\"myForm\">\n    Email:\n    <input type=\"email\" name=\"myAddress\" ng-model=\"text\">\n    <span ng-show=\"myForm.myAddress.$error.email\">不是一个合法的邮箱地址</span>\n</form>\n```\n以上实例中，提示信息会在 ng-show 属性返回 true 的情况下显示。\n\n应用状态\nng-model 指令可以为应用数据提供状态值(invalid, dirty, touched, error):\nAngularJS 实例\n```python\n<form ng-app=\"\" name=\"myForm\" ng-init=\"myText = 'test@runoob.com'\">\n    Email:\n    <input type=\"email\" name=\"myAddress\" ng-model=\"myText\" required></p>\n    <h1>状态</h1>\n    {{myForm.myAddress.$valid}}\n    {{myForm.myAddress.$dirty}}\n    {{myForm.myAddress.$touched}}\n</form>\n```\n\nCSS 类\nng-model 指令基于它们的状态为 HTML 元素提供了 CSS 类：\nAngularJS 实例\n```python\n<style>\ninput.ng-invalid {\n    background-color: lightblue;\n}\n</style>\n<body>\n\n<form ng-app=\"\" name=\"myForm\">\n    输入你的名字:\n    <input name=\"myAddress\" ng-model=\"text\" required>\n</form>\n```\nng-model 指令根据表单域的状态添加/移除以下类：\nng-empty\nng-not-empty\nng-touched\nng-untouched\nng-valid\nng-invalid\nng-dirty\nng-pending\nng-pristine\n\n## AngularJS 控制器\nAngularJS 控制器 控制 AngularJS 应用程序的数据。\n AngularJS 控制器是常规的 JavaScript 对象。\n AngularJS 控制器\nAngularJS 应用程序被控制器控制。\nng-controller 指令定义了应用程序控制器。\n控制器是 JavaScript 对象，由标准的 JavaScript 对象的构造函数 创建。\nAngularJS 实例\n```python\n<div ng-app=\"myApp\" ng-controller=\"myCtrl\">\n\n名: <input type=\"text\" ng-model=\"firstName\"><br>\n姓: <input type=\"text\" ng-model=\"lastName\"><br>\n<br>\n姓名: {{firstName + \" \" + lastName}}\n\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope) {\n    $scope.firstName = \"John\";\n    $scope.lastName = \"Doe\";\n});\n</scrip t >\n```\n应用解析：\nAngularJS 应用程序由 ng-app 定义。应用程序在 <div> 内运行。\nng-controller=\"myCtrl\" \b属性是一个 AngularJS 指令。用于定义一个控制器。\nmyCtrl 函数是一个 JavaScript 函数。\nAngularJS 使用$scope 对象来调用控制器。\n在 AngularJS 中， $scope 是一个应用对象(属于应用变量和函数)。\n控制器的 $scope （相当于作用域、控制范围）用来保存AngularJS Model(模型)的对象。\n控制器在作用域中创建了两个属性 (firstName 和 lastName)。\nng-model 指令绑定输入域到控制器的属性（firstName 和 lastName）。\n\n控制器方法\n上面的实例演示了一个带有 lastName 和 firstName 这两个属性的控制器对象。\n控制器也可以有方法（变量和函数）：\nAngularJS 实例\n```python\n<div ng-app=\"myApp\" ng-controller=\"personCtrl\">\n\n名: <input type=\"text\" ng-model=\"firstName\"><br>\n姓: <input type=\"text\" ng-model=\"lastName\"><br>\n<br>\n姓名: {{fullName()}}\n\n</div>\n\n<script>\nvar app = angular.module('myApp', []);\napp.controller('personCtrl', function($scope) {\n    $scope.firstName = \"John\";\n    $scope.lastName = \"Doe\";\n    $scope.fullName = function() {\n        return $scope.firstName + \" \" + $scope.lastName;\n    }\n});\n</scrip t>\n```\n\n## AngularJS 包含\n在 AngularJS 中，你可以在 HTML 中包含 HTML 文件。\n使用 AngularJS, 你可以使用 ng-include 指令来包含 HTML 内容:\n实例\n```python\n<body ng-app=\"\">\n \n<div ng-include=\"'runoob.htm'\"></div>\n \n</body>\n```\n\n## AngularJS 依赖注入\n依赖注入（Dependency Injection，简称DI）是一种软件设计模式，在这种模式下，一个或更多的依赖（或服务）被注入（或者通过引用传递）到一个独立的对象（或客户端）中，然后成为了该客户端状态的一部分。\n该模式分离了客户端依赖本身行为的创建，这使得程序设计变得松耦合，并遵循了依赖反转和单一职责原则。与服务定位器模式形成直接对比的是，它允许客户端了解客户端如何使用该系统找到依赖\nAngularJS 提供很好的依赖注入机制。以下5个核心组件用来作为依赖注入：\nvalue\nfactory\nservice\nprovider\nconstant\n\nvalue\nValue 是一个简单的 javascript 对象，用于向控制器传递值（配置阶段）：\n```python\n// 定义一个模块\nvar mainApp = angular.module(\"mainApp\", []);\n\n// 创建 value 对象 \"defaultInput\" 并传递数据\nmainApp.value(\"defaultInput\", 5);\n...\n\n// 将 \"defaultInput\" 注入到控制器\nmainApp.controller('CalcController', function($scope, CalcService, defaultInput) {\n   $scope.number = defaultInput;\n   $scope.result = CalcService.square($scope.number);\n   \n   $scope.square = function() {\n      $scope.result = CalcService.square($scope.number);\n   }\n});\n```\nfactory\nfactory 是一个函数用于返回值。在 service 和 controller 需要时创建。\n通常我们使用 factory 函数来计算或返回值。\n```python\n// 定义一个模块\nvar mainApp = angular.module(\"mainApp\", []);\n\n// 创建 factory \"MathService\" 用于两数的乘积 provides a method multiply to return multiplication of two numbers\nmainApp.factory('MathService', function() {\n   var factory = {};\n   \n   factory.multiply = function(a, b) {\n      return a * b\n   }\n   return factory;\n}); \n\n// 在 service 中注入 factory \"MathService\"\nmainApp.service('CalcService', function(MathService){\n   this.square = function(a) {\n      return MathService.multiply(a,a);\n   }\n});\n...\n```\nprovider\nAngularJS 中通过 provider 创建一个 service、factory等(配置阶段)。\nProvider 中提供了一个 factory 方法 get()，它用于返回 value/service/factory。\n```python\n// 定义一个模块\nvar mainApp = angular.module(\"mainApp\", []);\n...\n\n// 使用 provider 创建 service 定义一个方法用于计算两数乘积\nmainApp.config(function($provide) {\n   $provide.provider('MathService', function() {\n      this.$get = function() {\n         var factory = {};  \n         \n         factory.multiply = function(a, b) {\n            return a * b; \n         }\n         return factory;\n      };\n   });\n});\n```\n\nconstant\nconstant(常量)用来在配置阶段传递数值，注意这个常量在配置阶段是不可用的。\nmainApp.constant(\"configParam\", \"constant value\");\n\n以下实例提供了以上几个依赖注入机制的演示。\n```python\n<html>\n   \n   <head>\n      <meta charset=\"utf-8\">\n      <title>AngularJS  依赖注入</title>\n   </head>\n   \n   <body>\n      <h2>AngularJS 简单应用</h2>\n      \n      <div ng-app = \"mainApp\" ng-controller = \"CalcController\">\n         <p>输入一个数字: <input type = \"number\" ng-model = \"number\" /></p>\n         <button ng-click = \"square()\">X<sup>2</sup></button>\n         <p>结果: {{result}}</p>\n      </div>\n      \n      <script src=\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js\"></scrip t>\n      \n      <script>\n         var mainApp = angular.module(\"mainApp\", []);\n         \n         mainApp.config(function($provide) {\n            $provide.provider('MathService', function() {\n               this.$get = function() {\n                  var factory = {};\n                  \n                  factory.multiply = function(a, b) {\n                     return a * b;\n                  }\n                  return factory;\n               };\n            });\n         });\n\t\t\t\n         mainApp.value(\"defaultInput\", 5);\n         \n         mainApp.factory('MathService', function() {\n            var factory = {};\n            \n            factory.multiply = function(a, b) {\n               return a * b;\n            }\n            return factory;\n         });\n         \n         mainApp.service('CalcService', function(MathService){\n            this.square = function(a) {\n               return MathService.multiply(a,a);\n            }\n         });\n         \n         mainApp.controller('CalcController', function($scope, CalcService, defaultInput) {\n            $scope.number = defaultInput;\n            $scope.result = CalcService.square($scope.number);\n\n            $scope.square = function() {\n               $scope.result = CalcService.square($scope.number);\n            }\n         });\n\t\t\t\n      </scrip t>\n      \n   </body>\n</html>\n```\n\n## AngularJS 服务(Service)\nAngularJS 中你可以创建自己的服务，或使用内建服务。\n什么是服务？\n在 AngularJS 中，服务是一个函数或对象，可在你的 AngularJS 应用中使用。\nAngularJS 内建了30 多个服务。\n有个 $location 服务，它可以返回当前页面的 URL 地址。\n实例\n```python\nvar app = angular.module('myApp', []);\napp.controller('customersCtrl', function($scope, $location) {\n    $scope.myUrl = $location.absUrl();\n});\n```\n$http 服务\n$http 是 AngularJS 应用中最常用的服务。 服务向服务器发送请求，应用响应服务器传送过来的数据。\n```python\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope, $http) {\n    $http.get(\"welcome.htm\").then(function (response) {\n        $scope.myWelcome = response.data;\n    });\n});\n```\n\n$timeout 服务\nAngularJS $timeout 服务对应了 JS window.setTimeout 函数。\n```python\nvar app = angular.module('myApp', []);\napp.controller('myCtrl', function($scope, $timeout) {\n    $scope.myHeader = \"Hello World!\";\n    $timeout(function () {\n        $scope.myHeader = \"How are you today?\";\n    }, 2000);\n});\n```\n$interval 服务\nAngularJS $interval 服务对应了 JS window.setInterval 函数。\n\n创建自定义服务\n你可以创建访问自定义服务，链接到你的模块中：\n创建名为hexafy 的访问:\n```python\napp.service('hexafy', function() {\n    this.myFunc = function (x) {\n        return x.toString(16);\n    }\n});\n```\n要使用访问自定义服务，需要在定义过滤器的时候独立添加:\n实例\n使用自定义的的服务 hexafy 将一个数字转换为16进制数:\n\n```python\napp.controller('myCtrl', function($scope, hexafy) {\n    $scope.hex = hexafy.myFunc(255);\n});\n```\n过滤器中，使用自定义服务\n当你创建了自定义服务，并连接到你的应用上后，你可以在控制器，指令，过滤器或其他服务中使用它。\n在过滤器 myFormat 中使用服务 hexafy:\n```python\napp.filter('myFormat',['hexafy', function(hexafy) {\n    return function(x) {\n        return hexafy.myFunc(x);\n    };\n}]);\n```\n在对象数组中获取值时你可以使用过滤器：\n创建服务 hexafy:\n```python\n<ul>\n<li ng-repeat=\"x in counts\">{{x | myFormat}}</li>\n</ul>\n```\n## 应用\nng-app 指令位于应用的根元素下。\n对于单页Web应用（single page web application，SPA），应用的根通常为 <html> 元素。\n一个或多个 ng-controller 指令定义了应用的控制器。每个控制器有他自己的作用域：: 定义的 HTML 元素。\nAngularJS 在 HTML DOMContentLoaded 事件中自动开始。如果找到 ng-app 指令 ， AngularJS 载入指令中的模块，并将 ng-app 作为应用的根进行编译。\n应用的根可以是整个页面，或者页面的一小部分，如果是一小部分会更快编译和执行。\n\n\n## AngularJS中的依赖注入\n1、angular.module()创建、获取、注册angular中的模块\n```python\n/ 传递参数不止一个,代表新建模块;空数组代表该模块不依赖其他模块\nvar createModule = angular.module(\"myModule\", []);\n\n// 只有一个参数(模块名),代表获取模块\n// 如果模块不存在,angular框架会抛异常\nvar getModule = angular.module(\"myModule\");\n\n// true,都是同一个模块\nalert(createModule == getModule);\n```\n\n该函数既可以创建新的模块，也可以获取已有模块，是创建还是获取，通过参数的个数来区分。\nangular.module(name, [requires], [configFn]);\n\nname：字符串类型，代表模块的名称；\n\nrequires：字符串的数组，代表该模块依赖的其他模块列表，如果不依赖其他模块，用空数组即可；\n\nconfigFn：用来对该模块进行一些配置。\n\n4、angular中三种声明依赖的方式\n\nangular提供了3种获取依赖的方式：inference、annotation、inline方式。\n\n```python\n// 创建myModule模块、注册服务\nvar myModule = angular.module('myModule', []);\nmyModule.service('myService', function() {\n\t\t\tthis.my = 0;\n});\n\n// 获取injector\nvar injector = angular.injector([\"myModule\"]);\n\n// 第一种inference\ninjector.invoke(function(myService){alert(myService.my);});\n\n// 第二种annotation\nfunction explicit(serviceA) {alert(serviceA.my);};\nexplicit.$inject = ['myService'];\ninjector.invoke(explicit);\n\n// 第三种inline\ninjector.invoke(['myService', function(serviceA){alert(serviceA.my);}]);\n```\n```python\nhttp://blog.csdn.net/renfufei/article/details/19038123\n```\n依赖注解 | Dependency Annotation\ninjector 怎么知道需要注入何种 service 呢?\n为了解决依赖关系,应用程序开发者需要提供 injector 需要的 annotation 信息。在 Angular 中,某些API函数通过使用 injector 来调用,请按照API文档。injector 需要知道注入哪些服务给函数。下面是通过 service name 信息对代码进行注解的三种等价方式。他们都是等价的，你可以在适当的地方互换使用.\n\n推断依赖关系 | Inferring Dependencies\n最简单的获取依赖的方式,就是让函数参数名和依赖的名字一致。\n```python\nfunction MyController($scope, greeter) {  \n  ...  \n}  \n```\n给定一个 function, injector 通过检查函数声明和提取参数名称可以推断出 service 的名称 。在上面的例子中, $scope 和 greeter 是需要注入 function 的两个 services。\n虽然简单直接, 但这种方法在 JavaScript 压缩/混淆 时会失效,因为会重命名方法的参数名。这使得这种注解方式只适用于 pretotyping, 或者 demo 程序中。\n\n$inject 注解 | $inject Annotation\n为了可以在压缩代码后依然可以注入正确的 services, 函数需要通过 $inject 属性来注解. $inject 属性是一个数组,包含 需要注入的 service 名字.\n\nvar MyController = function(renamed$scope, renamedGreeter) {  \n}  \nMyController['$inject'] = ['$scope', 'greeter'];  \n\n\n在这种情况下,$inject数组中的值的顺序必须和要注入的参数的顺序一致。使用上面的代码片段作为一个例子, '$scope' 将注入到 “renamed$scope”, 而“greeter” 将注入到 “renamedGreeter”。再次提醒注意 $inject 注解必须和 函数声明时的实际参数保持同步(顺序,个数...)。\n对于 controller 声明,这种注解方法是很有用的,因为它将注解信息赋给了 function。\n\n简介AngularJS中使用factory和service的方法\nAngularJS支持使用服务的体系结构“关注点分离”的概念。服务是JavaScript函数，并负责只做一个特定的任务。这也使得他们即维护和测试的单独实体。控制器，过滤器可以调用它们作为需求的基础。服务使用AngularJS的依赖注入机制注入正常。\nAngularJS提供例如许多内在的服务，如：$http, $route, $window, $location等。每个服务负责例如一个特定的任务，$http是用来创建AJAX调用，以获得服务器的数据。 $route用来定义路由信息等。内置的服务总是前缀$符号。\n有两种方法来创建服务。\n    工厂\n    服务\n使用工厂方法\n使用工厂方法，我们先定义一个工厂，然后分配方法给它。\n```python\n   var mainApp = angular.module(\"mainApp\", []);\n   mainApp.factory('MathService', function() {   \n     var factory = {}; \n     factory.multiply = function(a, b) {\n      return a * b \n     }\n     return factory;\n   }); \n   ```\n   使用服务方法\n使用服务的方法，我们定义了一个服务，然后分配方法。还注入已经可用的服务。\n```python\nmainApp.service('CalcService', function(MathService){\n  this.square = function(a) { \n return MathService.multiply(a,a); \n }\n});\n```\n\n$rootScope\n\n一个网站中有很多页面都要判断登录状态 ， 我之前是直接在启动的时候查登录状态，并挂在$rootScope上，然后各个页面判断登录状态的操作逻辑直接与$rootScope对应属性双向绑定。 这样就不用事件传递了 ，如果涉及逻辑操作 ，还是建议放在服务里面。 services 相当于业务处理模块，而$rootScope 相当于全局变量。\nscope是AngularJS中的作用域(其实就是存储数据的地方)，很类似JavaScript的原型链 。搜索的时候，优先找自己的scope，如果没有找到就沿着作用域链向上搜索，直至到达根作用域rootScope。\n　　$rootScope是由angularJS加载模块的时候自动创建的，每个模块只会有1个rootScope。rootScope创建好会以服务的形式加入到 $injector中。也就是说通过 $injector.get(\"$ rootScope \");能够获取到某个模块的根作用域。更准确的来说，$rootScope是由angularJS的核心模块ng创建的。\n\n　　scope是html和单个controller之间的桥梁，数据绑定就靠他了。rootscope是各个controller中scope的桥梁。用rootscope定义的值，可以在各个controller中使用\n\n事件：\n\n$stateChangeError\n\n路由状态变化发生错误时触发的事件。参数有：event，toState，toParams，fromState，fromParams，error。以上根据字面意思即可理解，哈哈。\n\n$stateChangeStart\n\n路由状态变化发生前触发的事件。参数有：event，toState，toParams，fromState，fromParams。\n\n$stateChangeSuccess\n\n路由状态变化正确时触发的事件。参数有：event，toState，toParams，fromState，fromParams。\n\n$stateNotFound\n\n路由状态没找到的时候触发的事件。参数有：event，unfoundState，fromState，fromParams。\n\nstate(name,stateConfig);\n\n注册一个状态，并给定其配置。\n参数：\n\nname：状态的名称。\n\nstateConfig：状态配置对象。配置具有以下各项属性：\n\ntemplate： string/function，html模板字符串，或者一个返回html模板字符串的函数。\n\ntemplateUrl：string/function，模板路径的字符串，或者返回模板路径字符串的函数。\n\ntemplateProvider：function，返回html模板字符串或模板路径的服务。\n\ncontroller：string/function，新注册一个控制器函数或者一个已注册的控制器的名称字符串。\n\ncontrollerProvider：function，返回控制器或者控制器名称的服务\n\ncontrollerAs：string，控制器别名。\n\nparent：string/object，手动指定该状态的父级。\n\nresolve：object，将会被注入controller去执行的函数，<string,function>形式。\n\nurl：string，当前状态的对应url。\n\nviews：object，视图展示的配置。<string,object>形式。\n\nabstract：boolean，一个永远不会被激活的抽象的状态，但可以给其子级提供特性的继承。默认是true。\n\nonEnter：function，当进入一个状态后的回调函数。\n\nonExit：function，当退出一个状态后的回调函数。\n\nreloadOnSearch：boolean，如果为false，那么当一个search/query参数改变时不会触发相同的状态，用于当你修改$location.search()的时候不想重新加载页面。默认为true。\n\ndata：object，任意对象数据，用于自定义配置。继承父级状态的data属性。换句话说，通过原型继承可以达到添加一个data数据从而整个树结构都能获取到。\n\nparams：url里的参数值，通过它可以实现页面间的参数传递。\n\nAngularJS 中的 controllerAs\n\nController 在 AngularJS 应用中可以说是无处不在， 可以在 html 中通过 ngController 指令来指定 Controller ， 语法为：\n\n<ANY\n    ng-controller=\"expression\">\n    ...\n</ANY>\n在 ngRoute 模块中使用， 语法为：\n\n$routeProvider\n    .when('/my-url', {\n        controller: 'MyController'\n    });\n在 ui.route 模块中使用， 语法为：\n\n$stateProvider\n    .state('myState', {\n        controller: 'MyController'\n    })\n上面用法在 AngularJS 的社区、示例程序中非常普遍。 但是， 有一个细节可能很多人没有注意到， 那就是 controllerAs ， 上面的三种用法还可以分别这样使用：\n\n<ANY\n    ng-controller=\"expression as myExpr\">\n    ...\n</ANY>\n$routeProvider\n    .when('/my-url', {\n        controller: 'MyController',\n        controllerAs: 'ctrl'\n    });\n$stateProvider\n    .state('myState', {\n        controller: 'MyController',\n        controllerAs: 'ctrl'\n    })\n那么， 使用了 controllerAs 有什么区别呢？ 在 AngularJS 的文档中是这样说的：\n\none binds methods and properties directly onto the controller using this: ng-controller=”SettingsController1 as settings”\none injects $scope into the controller: ng-controller=”SettingsController2”\n上面的意思是说， 就是使用 controllerAs 将直接绑定 Controller 的属性和方法， 而不使用 controllerAs 将绑定到为 Controller 注入的 $scope 参数， 下面用一个具体的例子来说明一下：\n\n不使用 controllerAs 指令时， 通常我们这样做：\n```python\n\nangular\n    .module('app', []).\n    controller('TestController', TestController);\n\nTestController.$inject = ['$scope', '$window'];\n\nfunction TestController($scope, $window) {\n    $scope.name = 'beginor';\n    \n    $scope.greet = greet;\n    \n    function greet() {\n        $window.alert('Hello, ' + $scope.name);\n    }\n}\n<div ng-Controller=\"TestController\">\n    <label>Name:\n        <input type=\"text\" ng-model=\"name\" />\n    </label>\n    <button type=\"button\" ng-click=\"greet()\">\n</div>\n```\n在 HTML 视图中， 我们绑定的是 $scope 对象的属性和方法， 而不是 TestController 的实例。\n\n上面的例子在使用 controllerAs 时， 可以修改成这样：\n```python\nangular\n    .module('app', []).\n    controller('TestController', TestController);\n\nTestController.$inject = ['$window'];\n\nfunction TestController($window) {\n    this.name = 'beginor';\n    this.$window = $window;\n}\n\nTestController.prototype.greet = function () {\n    this.$window.alert('Hello, ' + this.name);\n}\n<div ng-Controller=\"TestController as vm\">\n    <label>Name:\n        <input type=\"text\" ng-model=\"vm.name\" />\n    </label>\n    <button type=\"button\" ng-click=\"vm.greet()\">\n</div>\n```\n看到区别了吧， 使用 controllerAs 时， 可以将 Controller 定义成 Javascript 的原型类， 在 HTML 视图中直接绑定原型类的属性和方法。\n\n这样做的优点是：\n\n可以使用 Javascript 的原型类， 我们可以使用更加高级的 ES6 或者 TypeScript 来编写 Controller ；\n避开了所谓的 child scope 原型继承带来的一些问题， 具体可以 参考这里 ；\n\n\nangular的uiRouter服务学习(5) --- $state.includes()方法\n$state.includes方法用于判断当前激活状态是否是指定的状态或者是指定状态的子状态.\n\n$state.includes(stateOrName,params,options)\n\n$state.includes方法接受三个参数,其中第二和第三个都不知道是干啥的...估计也不太用得到,就暂时不管了...\n\nstateOrName:字符串(必填). 是一个状态的名字.\n\n比如当前的激活状态是 \"contacts.details.item\" \n\n如下调用:\n\n```python\n$state.includes(\"contacts\");                              //返回true\n$state.includes(\"contacts.details\");                      //返回true\n$state.includes(\"contacts.details.item\");                 //返回true\n$state.includes(\"detail\");                                //返回undefined\n$state.includes(\"item\");                                  //返回undefined\n```\n也可以使用glob语法:\n\n复制代码\n```python\n$state.$current.name = 'contacts.details.item.url';\n \n$state.includes(\"*.details.*.*\"); // returns true\n$state.includes(\"*.details.**\"); // returns true\n$state.includes(\"**.item.**\"); // returns true\n$state.includes(\"*.details.item.url\"); // returns true\n$state.includes(\"*.details.*.url\"); // returns true\n$state.includes(\"*.details.*\"); // returns undefined\n$state.includes(\"item.**\"); // returns undefined\n```\n复制代码\n可以用于激活某个tab,让当前项高亮显示:\n```python\n<li ng-class=\"{active:state.includes('dashboard.report')}\"><a ui-sref=\"dashboard.report\">Reports</a></li>\n```\n需要注意的是,在表达式里直接用$state是不行的,需要在控制器中把$state赋值给$scope下的变量.这样在表达式里才能使用:\n```python\n    $stateProvider.state('dashboard',{\n        url:'/dashboard',\n        templateUrl:'./tpls/dashboard.html',\n        controller:function($scope,$state){\n            $scope.state = $state;              \n        }\n    })\n```\n\nAngularJS ng - swi tch 指令\n根据选中的值显示对应部分:\n```python\n<div ng-switch=\"myVar\">\n  <div ng-switch-when=\"runoob\">\n     <h1>菜鸟教程</h1>\n     <p>欢迎访问菜鸟教程</p>\n  </div>\n  <div ng-switch-when=\"google\">\n     <h1>Google</h1>\n     <p>欢迎访问Google</p>\n  </div>\n  <div ng-switch-when=\"taobao\">\n     <h1>淘宝</h1>\n     <p>欢迎访问淘宝</p>\n  </div>\n  <div ng-switch-default>\n     <h1>切换</h1>\n     <p>选择不同选项显示对应的值。</p>\n  </div>\n</div>\n```\n定义和用法\nng-sw itch 指令根据表达式显示或隐藏对应的部分。\n对应的子元素使用 ng-sw itch-when 指令，如果匹配选中选择显示，其他为匹配的则移除。\n你可以通过使用 ng-s witch-default 指令设置默认选项，如果都没有匹配的情况，默认选项会显示。\n语法\n```python\n<element ng-switch=\"expression\">\n  <element ng-switch-when=\"value\"></element>\n  <element ng-switch-when=\"value\"></element>\n  <element ng-switch-when=\"value\"></element>\n  <element ng-switch-default></element>\n</element>\n<form> 元素支持该属性。\n```\n\n在 Angularjs 中 ui-sref 和 $state.go 如何传递参数\nui-sref、$state.go 的区别\n\nui-sref 一般使用在 < a >...< / a >；\n\n<a ui-sref=\"message-list\">消息中心< / a >\n\n$state.go('someState')一般使用在 controller里面；\n\n.controller('firstCtrl', function($scope, $state) {\n      $state.go('login');\n });\n这两个本质上是一样的东西，我们看ui-sref的源码：\n\n复制代码\n...\nelement.bind(\"click\", function(e) {\n    var button = e.which || e.button;\n    if ( !(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target')) ) {\n\n      var transition = $timeout(function() {\n        // HERE we call $state.go inside of ui-sref\n        $state.go(ref.state, params, options);\n      });\n复制代码\nui-sref最后调用的还是$state.go()方法\n首先，要在目标页面定义接受的参数：\nhttp://images2015.cnblogs.com/blog/337212/201603/337212-20160318181804412-426985465.png\n传参，\n\nui-sref:\nhttp://images2015.cnblogs.com/blog/337212/201603/337212-20160318182142693-1979913166.png\nhttp://images2015.cnblogs.com/blog/337212/201603/337212-20160318182359646-1518874208.png\n\n\n\n","slug":"AngularJS","published":1,"updated":"2018-05-16T09:03:16.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2j0005oyff56u16m7r","content":"<p>angular -  ng关键字缩写<br>AngularJS 是一个 JavaScript 框架。它可通过 script 标签添加到 HTML 页面。<br>AngularJS 通过 指令 扩展了 HTML，且通过 表达式 绑定数据到 HTML。<br>AngularJS 是一个 JavaScript 框架<br>AngularJS 是一个 JavaScript 框架。它是一个以 JavaScript 编写的库。<br>AngularJS 是以一个 JavaScript 文件形式发布的，可通过 script 标签添加到网页中：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=\"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js\"&gt;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>各个 angular.js 版本下载： <a href=\"https://github.com/angular/angular.js/releases\" target=\"_blank\" rel=\"external\">https://github.com/angular/angular.js/releases</a><br>AngularJS 扩展了 HTML<br>AngularJS 通过 ng-directives 扩展了 HTML。<br>ng-app 指令定义一个 AngularJS 应用程序。<br>ng-model 指令把元素值（比如输入域的值）绑定到应用程序。<br>ng-bind 指令把应用程序数据绑定到 HTML 视图。<br>AngularJS 实例</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;meta charset=\"utf-8\"&gt;</div><div class=\"line\">&lt;script src=\"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js\"&gt;&lt;/scrip t &gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;div ng-app=\"\"&gt;</div><div class=\"line\">     &lt;p&gt;名字 : &lt;input type=\"text\" ng-model=\"name\"&gt;&lt;/p&gt;</div><div class=\"line\">     &lt;h1&gt;Hello &#123;&#123;name&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>实例讲解：<br>当网页加载完毕，AngularJS 自动开启。<br>ng-app 指令告诉 AngularJS，<div> 元素是 AngularJS 应用程序 的”所有者”。<br>ng-model 指令把输入域的值绑定到应用程序变量 name。<br>ng-bind 指令把应用程序变量 name 绑定到某个段落的 innerHTML。</div></p>\n<p>什么是 AngularJS？<br>AngularJS 使得开发现代的单一页面应用程序（SPAs：Single Page Applications）变得更加容易。<br>AngularJS 把应用程序数据绑定到 HTML 元素。<br>AngularJS 可以克隆和重复 HTML 元素。<br>AngularJS 可以隐藏和显示 HTML 元素。<br>AngularJS 可以在 HTML 元素”背后”添加代码。<br>AngularJS 支持输入验证。<br>AngularJS 指令<br>正如您所看到的，AngularJS 指令是以 ng 作为前缀的 HTML 属性。<br>ng-init 指令初始化 AngularJS 应用程序变量。<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"firstName='John'\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;姓名为 &lt;span ng-bind=\"firstName\"&gt;&lt;/span&gt;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>HTML5 允许扩展的（自制的）属性，以 data- 开头。<br>AngularJS 属性以 ng- 开头，但是您可以使用 data-ng- 来让网页对 HTML5 有效。<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div data-ng-app=\"\" data-ng-init=\"firstName='John'\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;姓名为 &lt;span data-ng-bind=\"firstName\"&gt;&lt;/span&gt;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>AngularJS 表达式<br>AngularJS 表达式写在双大括号内：。<br>AngularJS 表达式把数据绑定到 HTML，这与 ng-bind 指令有异曲同工之妙。<br>AngularJS 将在表达式书写的位置”输出”数据。<br>AngularJS 表达式 很像 JavaScript 表达式：它们可以包含文字、运算符和变量。<br>实例 10 或 undefined undefined<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;meta charset=\"utf-8\"&gt;</div><div class=\"line\">&lt;script src=\"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js\"&gt;&lt;/scrip t&gt; </div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;div ng-app=\"\"&gt;</div><div class=\"line\">     &lt;p&gt;我的第一个表达式： &#123;&#123; 5 + 5 &#125;&#125;&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>AngularJS 应用<br>AngularJS 模块（Module） 定义了 AngularJS 应用。<br>AngularJS 控制器（Controller） 用于控制 AngularJS 应用。<br>ng-app指令定义了应用, ng-controller 定义了控制器。<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"myApp\" ng-controller=\"myCtrl\"&gt;</div><div class=\"line\"> </div><div class=\"line\">名: &lt;input type=\"text\" ng-model=\"firstName\"&gt;&lt;br&gt;</div><div class=\"line\">姓: &lt;input type=\"text\" ng-model=\"lastName\"&gt;&lt;br&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">姓名: &#123;&#123;firstName + \" \" + lastName&#125;&#125;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var app = angular.module('myApp', []);</div><div class=\"line\">app.controller('myCtrl', function($scope) &#123;</div><div class=\"line\">    $scope.firstName= \"John\";</div><div class=\"line\">    $scope.lastName= \"Doe\";</div><div class=\"line\">&#125;);</div><div class=\"line\">&lt;/scrip t&gt;</div></pre></td></tr></table></figure></p>\n<p>AngularJS 模块定义应用:<br>AngularJS 模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(<span class=\"string\">'myApp'</span>, []);</div></pre></td></tr></table></figure></p>\n<p>AngularJS 控制器控制应用:<br>AngularJS 控制器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, function($scope) &#123;</div><div class=\"line\">    $scope.firstName= <span class=\"string\">\"John\"</span>;</div><div class=\"line\">    $scope.lastName= <span class=\"string\">\"Doe\"</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>使用 ng-init 不是很常见。您将在控制器一章中学习到一个更好的初始化数据的方式。</p>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">数字</div><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"quantity=1;cost=5\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;总价： &#123;&#123; quantity * cost &#125;&#125;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">字符串</div><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;姓名： &#123;&#123; firstName + \" \" + lastName &#125;&#125;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">对象</div><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"person=&#123;firstName:'John',lastName:'Doe'&#125;\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;姓为 &#123;&#123; person.lastName &#125;&#125;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">数组</div><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;第三个值为 &#123;&#123; points[2] &#125;&#125;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>AngularJS 表达式 与 JavaScript 表达式<br>类似于 JavaScript 表达式，AngularJS 表达式可以包含字母，操作符，变量。<br>与 JavaScript 表达式不同，AngularJS 表达式可以写在 HTML 中。<br>与 JavaScript 表达式不同，AngularJS 表达式不支持条件判断，循环及异常。<br>与 JavaScript 表达式不同，AngularJS 表达式支持过滤器。</p>\n<h2 id=\"AngularJS-指令\"><a href=\"#AngularJS-指令\" class=\"headerlink\" title=\"AngularJS 指令\"></a>AngularJS 指令</h2><p>AngularJS 通过被称为 指令 的新属性来扩展 HTML。<br>AngularJS 通过内置的指令来为应用添加功能。<br>AngularJS 允许你自定义指令。<br>AngularJS 指令是扩展的 HTML 属性，带有前缀 ng-。<br>ng-app 指令初始化一个 AngularJS 应用程序。<br>ng-init 指令初始化应用程序数据。<br>ng-model 指令把元素值（比如输入域的值）绑定到应用程序。</p>\n<p>ng-app 指令告诉 AngularJS，<div> 元素是 AngularJS 应用程序 的”所有者”。<br>一个网页可以包含多个运行在不同元素中的 AngularJS 应用程序。</div></p>\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p>上面实例中的  表达式是一个 AngularJS 数据绑定表达式。<br>AngularJS 中的数据绑定，同步了 AngularJS 表达式与 AngularJS 数据。<br> 是通过 ng-model=”firstName” 进行同步。<br>在下一个实例中，两个文本域是通过两个 ng-model 指令同步的：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"quantity=1;price=5\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;h2&gt;价格计算器&lt;/h2&gt;</div><div class=\"line\"> </div><div class=\"line\">数量： &lt;input type=\"number\"    ng-model=\"quantity\"&gt;</div><div class=\"line\">价格： &lt;input type=\"number\" ng-model=\"price\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;&lt;b&gt;总价：&lt;/b&gt; &#123;&#123; quantity * price &#125;&#125;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"重复-HTML-元素\"><a href=\"#重复-HTML-元素\" class=\"headerlink\" title=\"重复 HTML 元素\"></a>重复 HTML 元素</h2><p>ng-repeat 指令会重复一个 HTML 元素：<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"names=['Jani','Hege','Kai']\"&gt;</div><div class=\"line\">  &lt;p&gt;使用 ng-repeat 来循环数组&lt;/p&gt;</div><div class=\"line\">  &lt;ul&gt;</div><div class=\"line\">    &lt;li ng-repeat=\"x in names\"&gt;</div><div class=\"line\">      &#123;&#123; x &#125;&#125;</div><div class=\"line\">    &lt;/li&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>ng-repeat 指令用在一个对象数组上：<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"names=[</div><div class=\"line\">&#123;name:'Jani',country:'Norway'&#125;,</div><div class=\"line\">&#123;name:'Hege',country:'Sweden'&#125;,</div><div class=\"line\">&#123;name:'Kai',country:'Denmark'&#125;]\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;循环对象：&lt;/p&gt;</div><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">  &lt;li ng-repeat=\"x    in names\"&gt;</div><div class=\"line\">    &#123;&#123; x.name + ', ' + x.country &#125;&#125;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>AngularJS 完美支持数据库的 CRUD（增加Create、读取Read、更新Update、删除Delete）应用程序。<br>把实例中的对象想象成数据库中的记录。</p>\n<p>ng-app 指令<br>ng-app 指令定义了 AngularJS 应用程序的 根元素。<br>ng-app 指令在网页加载完毕时会自动引导（自动初始化）应用程序。<br>稍后您将学习到 ng-app 如何通过一个值（比如 ng-app=”myModule”）连接到代码模块。<br>ng-init 指令<br>ng-init 指令为 AngularJS 应用程序定义了 初始值。<br>通常情况下，不使用 ng-init。您将使用一个控制器或模块来代替它。<br>稍后您将学习更多有关控制器和模块的知识。<br>ng-model 指令<br>ng-model 指令 绑定 HTML 元素 到应用程序数据。<br>ng-model 指令也可以：<br>为应用程序数据提供类型验证（number、email、required）。<br>为应用程序数据提供状态（invalid、dirty、touched、error）。<br>为 HTML 元素提供 CSS 类。<br>绑定 HTML 元素到 HTML 表单。<br>ng-repeat 指令<br>ng-repeat 指令对于集合中（数组中）的每个项会 克隆一次 HTML 元素。</p>\n<p>创建自定义的指令<br>除了 AngularJS 内置的指令外，我们还可以创建自定义指令。<br>你可以使用 .directive 函数来添加自定义的指令。<br>要调用自定义指令，HTML 元素上需要添加自定义指令名。<br>使用驼峰法来命名一个指令， runoobDirective, 但在使用它时需要以 - 分割, runoob-directive:<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body ng-app=\"myApp\"&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;runoob-directive&gt;&lt;/runoob-directive&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var app = angular.module(\"myApp\", []);</div><div class=\"line\">app.directive(\"runoobDirective\", function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        template : \"&lt;h1&gt;自定义指令!&lt;/h1&gt;\"</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\">&lt;/scrip t&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure></p>\n<p>你可以通过以下方式来调用指令：<br>元素名<br>属性<br>类名<br>注释<br>以下实例方式也能输出同样结果:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">元素名</div><div class=\"line\">&lt;runoob-directive&gt;&lt;/runoob-directive&gt;</div><div class=\"line\"></div><div class=\"line\">属性</div><div class=\"line\">&lt;div runoob-directive&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">类名</div><div class=\"line\">&lt;div class=\"runoob-directive\"&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">注释</div><div class=\"line\">&lt;!-- directive: runoob-directive --&gt;</div></pre></td></tr></table></figure>\n<p>限制使用<br>你可以限制你的指令只能通过特定的方式来调用。<br>实例<br>通过添加 restrict 属性,并设置只值为 “A”, 来设置指令只能通过属性的方式来调用:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(<span class=\"string\">\"myApp\"</span>, []);</div><div class=\"line\">app.directive(<span class=\"string\">\"runoobDirective\"</span>, function() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        restrict : <span class=\"string\">\"A\"</span>,</div><div class=\"line\">        template : <span class=\"string\">\"&lt;h1&gt;自定义指令!&lt;/h1&gt;\"</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>restrict 值可以是以下几种:<br>E 作为元素名使用<br>A 作为属性使用<br>C 作为类名使用<br>M 作为注释使用<br>restrict 默认值为 EA, 即可以通过元素名和属性名来调用指令。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular自定义指令的两种写法：</div><div class=\"line\">上面这种，感觉更清晰明确一点。</div><div class=\"line\">// angular.module(<span class=\"string\">'MyApp'</span>,[])</div><div class=\"line\">// .directive(<span class=\"string\">'zl1'</span>,zl1)</div><div class=\"line\">// .controller(<span class=\"string\">'con1'</span>,[<span class=\"string\">'$scope'</span>,func1]);</div><div class=\"line\">//</div><div class=\"line\">// function zl1()&#123;</div><div class=\"line\">//   var directive=&#123;</div><div class=\"line\">//     restrict:<span class=\"string\">'AEC'</span>,</div><div class=\"line\">//     template:<span class=\"string\">'this is the it-first directive'</span>,</div><div class=\"line\">//   &#125;;</div><div class=\"line\">//   <span class=\"keyword\">return</span> directive;</div><div class=\"line\">// &#125;;</div><div class=\"line\">//</div><div class=\"line\">// function func1($scope)&#123;</div><div class=\"line\">//   $scope.name=<span class=\"string\">\"alice\"</span>;</div><div class=\"line\">// &#125;</div><div class=\"line\"></div><div class=\"line\">//这是教程里类似的写法</div><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>,[]).directive(<span class=\"string\">'zl1'</span>,[ function()&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    restrict:<span class=\"string\">'AE'</span>,</div><div class=\"line\">    template:<span class=\"string\">'thirective'</span>,</div><div class=\"line\">    link:function($scope,elm,attr,controller)&#123;</div><div class=\"line\">      console.log(<span class=\"string\">\"这是link\"</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    controller:function($scope,$element,$attrs)&#123;</div><div class=\"line\">      console.log(<span class=\"string\">\"这是con\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;]).controller(<span class=\"string\">'Con1'</span>,[<span class=\"string\">'$scope'</span>,function($scope)&#123;</div><div class=\"line\">  $scope.name=<span class=\"string\">\"aliceqqq\"</span>;</div><div class=\"line\">&#125;]);</div><div class=\"line\">Alice2周前 (<span class=\"number\">12</span><span class=\"number\">-29</span>)</div><div class=\"line\"></div><div class=\"line\">还有指令配置项的：link controller等在项目运用中有遇到过：</div><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>, []).directive(<span class=\"string\">'first'</span>, [ function()&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        // scope: false, // 默认值，共享父级作用域</div><div class=\"line\">        // controller: function($scope, $element, $attrs, $transclude) &#123;&#125;,</div><div class=\"line\">        restrict: <span class=\"string\">'AE'</span>, // E = Element, A = Attribute, C = Class, M = Comment</div><div class=\"line\">        template: <span class=\"string\">'first name:&#123;&#123;name&#125;&#125;'</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;]).directive(<span class=\"string\">'second'</span>, [ function()&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        scope: true, // 继承父级作用域并创建指令自己的作用域</div><div class=\"line\">        // controller: function($scope, $element, $attrs, $transclude) &#123;&#125;,</div><div class=\"line\">        restrict: <span class=\"string\">'AE'</span>, // E = Element, A = Attribute, C = Class, M = Comment</div><div class=\"line\">        //当修改这里的name时，second会在自己的作用域中新建一个name变量，与父级作用域中的</div><div class=\"line\">        // name相对独立，所以再修改父级中的name对second中的name就不会有影响了</div><div class=\"line\">        template: <span class=\"string\">'second name:&#123;&#123;name&#125;&#125;'</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;]).directive(<span class=\"string\">'third'</span>, [ function()&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        scope: &#123;&#125;, // 创建指令自己的独立作用域，与父级毫无关系</div><div class=\"line\">        // controller: function($scope, $element, $attrs, $transclude) &#123;&#125;,</div><div class=\"line\">        restrict: <span class=\"string\">'AE'</span>, // E = Element, A = Attribute, C = Class, M = Comment</div><div class=\"line\">        template: <span class=\"string\">'third name:&#123;&#123;name&#125;&#125;'</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;])</div><div class=\"line\">.controller(<span class=\"string\">'DirectiveController'</span>, [<span class=\"string\">'$scope'</span>, function($scope)&#123;</div><div class=\"line\">    $scope.name=<span class=\"string\">\"mike\"</span>;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<h2 id=\"AngularJS-ng-model-指令\"><a href=\"#AngularJS-ng-model-指令\" class=\"headerlink\" title=\"AngularJS ng-model 指令\"></a>AngularJS ng-model 指令</h2><p>ng-model 指令用于绑定应用程序数据到 HTML 控制器(input, select, textarea)的值。<br>ng-model 指令<br>ng-model 指令可以将输入域的值与 AngularJS 创建的变量绑定。<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"myApp\" ng-controller=\"myCtrl\"&gt;</div><div class=\"line\">    名字: &lt;input ng-model=\"name\"&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var app = angular.module('myApp', []);</div><div class=\"line\">app.controller('myCtrl', function($scope) &#123;</div><div class=\"line\">    $scope.name = \"John Doe\";</div><div class=\"line\">&#125;);</div><div class=\"line\">&lt;/scrip t&gt;</div></pre></td></tr></table></figure></p>\n<p>双向绑定<br>双向绑定，在修改输入域的值时， AngularJS 属性的值也将修改：<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"myApp\" ng-controller=\"myCtrl\"&gt;</div><div class=\"line\">    名字: &lt;input ng-model=\"name\"&gt;</div><div class=\"line\">    &lt;h1&gt;你输入了: &#123;&#123;name&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>验证用户输入<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form ng-app=\"\" name=\"myForm\"&gt;</div><div class=\"line\">    Email:</div><div class=\"line\">    &lt;input type=\"email\" name=\"myAddress\" ng-model=\"text\"&gt;</div><div class=\"line\">    &lt;span ng-show=\"myForm.myAddress.$error.email\"&gt;不是一个合法的邮箱地址&lt;/span&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>以上实例中，提示信息会在 ng-show 属性返回 true 的情况下显示。</p>\n<p>应用状态<br>ng-model 指令可以为应用数据提供状态值(invalid, dirty, touched, error):<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form ng-app=\"\" name=\"myForm\" ng-init=\"myText = 'test@runoob.com'\"&gt;</div><div class=\"line\">    Email:</div><div class=\"line\">    &lt;input type=\"email\" name=\"myAddress\" ng-model=\"myText\" required&gt;&lt;/p&gt;</div><div class=\"line\">    &lt;h1&gt;状态&lt;/h1&gt;</div><div class=\"line\">    &#123;&#123;myForm.myAddress.$valid&#125;&#125;</div><div class=\"line\">    &#123;&#123;myForm.myAddress.$dirty&#125;&#125;</div><div class=\"line\">    &#123;&#123;myForm.myAddress.$touched&#125;&#125;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>CSS 类<br>ng-model 指令基于它们的状态为 HTML 元素提供了 CSS 类：<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style&gt;</div><div class=\"line\">input.ng-invalid &#123;</div><div class=\"line\">    background-color: lightblue;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;form ng-app=\"\" name=\"myForm\"&gt;</div><div class=\"line\">    输入你的名字:</div><div class=\"line\">    &lt;input name=\"myAddress\" ng-model=\"text\" required&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>ng-model 指令根据表单域的状态添加/移除以下类：<br>ng-empty<br>ng-not-empty<br>ng-touched<br>ng-untouched<br>ng-valid<br>ng-invalid<br>ng-dirty<br>ng-pending<br>ng-pristine</p>\n<h2 id=\"AngularJS-控制器\"><a href=\"#AngularJS-控制器\" class=\"headerlink\" title=\"AngularJS 控制器\"></a>AngularJS 控制器</h2><p>AngularJS 控制器 控制 AngularJS 应用程序的数据。<br> AngularJS 控制器是常规的 JavaScript 对象。<br> AngularJS 控制器<br>AngularJS 应用程序被控制器控制。<br>ng-controller 指令定义了应用程序控制器。<br>控制器是 JavaScript 对象，由标准的 JavaScript 对象的构造函数 创建。<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"myApp\" ng-controller=\"myCtrl\"&gt;</div><div class=\"line\"></div><div class=\"line\">名: &lt;input type=\"text\" ng-model=\"firstName\"&gt;&lt;br&gt;</div><div class=\"line\">姓: &lt;input type=\"text\" ng-model=\"lastName\"&gt;&lt;br&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">姓名: &#123;&#123;firstName + \" \" + lastName&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var app = angular.module('myApp', []);</div><div class=\"line\">app.controller('myCtrl', function($scope) &#123;</div><div class=\"line\">    $scope.firstName = \"John\";</div><div class=\"line\">    $scope.lastName = \"Doe\";</div><div class=\"line\">&#125;);</div><div class=\"line\">&lt;/scrip t &gt;</div></pre></td></tr></table></figure></p>\n<p>应用解析：<br>AngularJS 应用程序由 ng-app 定义。应用程序在 <div> 内运行。<br>ng-controller=”myCtrl” \b属性是一个 AngularJS 指令。用于定义一个控制器。<br>myCtrl 函数是一个 JavaScript 函数。<br>AngularJS 使用$scope 对象来调用控制器。<br>在 AngularJS 中， $scope 是一个应用对象(属于应用变量和函数)。<br>控制器的 $scope （相当于作用域、控制范围）用来保存AngularJS Model(模型)的对象。<br>控制器在作用域中创建了两个属性 (firstName 和 lastName)。<br>ng-model 指令绑定输入域到控制器的属性（firstName 和 lastName）。</div></p>\n<p>控制器方法<br>上面的实例演示了一个带有 lastName 和 firstName 这两个属性的控制器对象。<br>控制器也可以有方法（变量和函数）：<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"myApp\" ng-controller=\"personCtrl\"&gt;</div><div class=\"line\"></div><div class=\"line\">名: &lt;input type=\"text\" ng-model=\"firstName\"&gt;&lt;br&gt;</div><div class=\"line\">姓: &lt;input type=\"text\" ng-model=\"lastName\"&gt;&lt;br&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">姓名: &#123;&#123;fullName()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var app = angular.module('myApp', []);</div><div class=\"line\">app.controller('personCtrl', function($scope) &#123;</div><div class=\"line\">    $scope.firstName = \"John\";</div><div class=\"line\">    $scope.lastName = \"Doe\";</div><div class=\"line\">    $scope.fullName = function() &#123;</div><div class=\"line\">        return $scope.firstName + \" \" + $scope.lastName;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">&lt;/scrip t&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"AngularJS-包含\"><a href=\"#AngularJS-包含\" class=\"headerlink\" title=\"AngularJS 包含\"></a>AngularJS 包含</h2><p>在 AngularJS 中，你可以在 HTML 中包含 HTML 文件。<br>使用 AngularJS, 你可以使用 ng-include 指令来包含 HTML 内容:<br>实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body ng-app=\"\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;div ng-include=\"'runoob.htm'\"&gt;&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"AngularJS-依赖注入\"><a href=\"#AngularJS-依赖注入\" class=\"headerlink\" title=\"AngularJS 依赖注入\"></a>AngularJS 依赖注入</h2><p>依赖注入（Dependency Injection，简称DI）是一种软件设计模式，在这种模式下，一个或更多的依赖（或服务）被注入（或者通过引用传递）到一个独立的对象（或客户端）中，然后成为了该客户端状态的一部分。<br>该模式分离了客户端依赖本身行为的创建，这使得程序设计变得松耦合，并遵循了依赖反转和单一职责原则。与服务定位器模式形成直接对比的是，它允许客户端了解客户端如何使用该系统找到依赖<br>AngularJS 提供很好的依赖注入机制。以下5个核心组件用来作为依赖注入：<br>value<br>factory<br>service<br>provider<br>constant</p>\n<p>value<br>Value 是一个简单的 javascript 对象，用于向控制器传递值（配置阶段）：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 定义一个模块</div><div class=\"line\">var mainApp = angular.module(<span class=\"string\">\"mainApp\"</span>, []);</div><div class=\"line\"></div><div class=\"line\">// 创建 value 对象 <span class=\"string\">\"defaultInput\"</span> 并传递数据</div><div class=\"line\">mainApp.value(<span class=\"string\">\"defaultInput\"</span>, <span class=\"number\">5</span>);</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">// 将 <span class=\"string\">\"defaultInput\"</span> 注入到控制器</div><div class=\"line\">mainApp.controller(<span class=\"string\">'CalcController'</span>, function($scope, CalcService, defaultInput) &#123;</div><div class=\"line\">   $scope.number = defaultInput;</div><div class=\"line\">   $scope.result = CalcService.square($scope.number);</div><div class=\"line\">   </div><div class=\"line\">   $scope.square = function() &#123;</div><div class=\"line\">      $scope.result = CalcService.square($scope.number);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>factory<br>factory 是一个函数用于返回值。在 service 和 controller 需要时创建。<br>通常我们使用 factory 函数来计算或返回值。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 定义一个模块</div><div class=\"line\">var mainApp = angular.module(<span class=\"string\">\"mainApp\"</span>, []);</div><div class=\"line\"></div><div class=\"line\">// 创建 factory <span class=\"string\">\"MathService\"</span> 用于两数的乘积 provides a method multiply to <span class=\"keyword\">return</span> multiplication of two numbers</div><div class=\"line\">mainApp.factory(<span class=\"string\">'MathService'</span>, function() &#123;</div><div class=\"line\">   var factory = &#123;&#125;;</div><div class=\"line\">   </div><div class=\"line\">   factory.multiply = function(a, b) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a * b</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> factory;</div><div class=\"line\">&#125;); </div><div class=\"line\"></div><div class=\"line\">// 在 service 中注入 factory <span class=\"string\">\"MathService\"</span></div><div class=\"line\">mainApp.service(<span class=\"string\">'CalcService'</span>, function(MathService)&#123;</div><div class=\"line\">   this.square = function(a) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> MathService.multiply(a,a);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>provider<br>AngularJS 中通过 provider 创建一个 service、factory等(配置阶段)。<br>Provider 中提供了一个 factory 方法 get()，它用于返回 value/service/factory。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 定义一个模块</div><div class=\"line\">var mainApp = angular.module(<span class=\"string\">\"mainApp\"</span>, []);</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">// 使用 provider 创建 service 定义一个方法用于计算两数乘积</div><div class=\"line\">mainApp.config(function($provide) &#123;</div><div class=\"line\">   $provide.provider(<span class=\"string\">'MathService'</span>, function() &#123;</div><div class=\"line\">      this.$get = function() &#123;</div><div class=\"line\">         var factory = &#123;&#125;;  </div><div class=\"line\">         </div><div class=\"line\">         factory.multiply = function(a, b) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> a * b; </div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">return</span> factory;</div><div class=\"line\">      &#125;;</div><div class=\"line\">   &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>constant<br>constant(常量)用来在配置阶段传递数值，注意这个常量在配置阶段是不可用的。<br>mainApp.constant(“configParam”, “constant value”);</p>\n<p>以下实例提供了以上几个依赖注入机制的演示。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">   </div><div class=\"line\">   &lt;head&gt;</div><div class=\"line\">      &lt;meta charset=\"utf-8\"&gt;</div><div class=\"line\">      &lt;title&gt;AngularJS  依赖注入&lt;/title&gt;</div><div class=\"line\">   &lt;/head&gt;</div><div class=\"line\">   </div><div class=\"line\">   &lt;body&gt;</div><div class=\"line\">      &lt;h2&gt;AngularJS 简单应用&lt;/h2&gt;</div><div class=\"line\">      </div><div class=\"line\">      &lt;div ng-app = \"mainApp\" ng-controller = \"CalcController\"&gt;</div><div class=\"line\">         &lt;p&gt;输入一个数字: &lt;input type = \"number\" ng-model = \"number\" /&gt;&lt;/p&gt;</div><div class=\"line\">         &lt;button ng-click = \"square()\"&gt;X&lt;sup&gt;2&lt;/sup&gt;&lt;/button&gt;</div><div class=\"line\">         &lt;p&gt;结果: &#123;&#123;result&#125;&#125;&lt;/p&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">      </div><div class=\"line\">      &lt;script src=\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js\"&gt;&lt;/scrip t&gt;</div><div class=\"line\">      </div><div class=\"line\">      &lt;script&gt;</div><div class=\"line\">         var mainApp = angular.module(\"mainApp\", []);</div><div class=\"line\">         </div><div class=\"line\">         mainApp.config(function($provide) &#123;</div><div class=\"line\">            $provide.provider('MathService', function() &#123;</div><div class=\"line\">               this.$get = function() &#123;</div><div class=\"line\">                  var factory = &#123;&#125;;</div><div class=\"line\">                  </div><div class=\"line\">                  factory.multiply = function(a, b) &#123;</div><div class=\"line\">                     return a * b;</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  return factory;</div><div class=\"line\">               &#125;;</div><div class=\"line\">            &#125;);</div><div class=\"line\">         &#125;);</div><div class=\"line\">\t\t\t</div><div class=\"line\">         mainApp.value(\"defaultInput\", 5);</div><div class=\"line\">         </div><div class=\"line\">         mainApp.factory('MathService', function() &#123;</div><div class=\"line\">            var factory = &#123;&#125;;</div><div class=\"line\">            </div><div class=\"line\">            factory.multiply = function(a, b) &#123;</div><div class=\"line\">               return a * b;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return factory;</div><div class=\"line\">         &#125;);</div><div class=\"line\">         </div><div class=\"line\">         mainApp.service('CalcService', function(MathService)&#123;</div><div class=\"line\">            this.square = function(a) &#123;</div><div class=\"line\">               return MathService.multiply(a,a);</div><div class=\"line\">            &#125;</div><div class=\"line\">         &#125;);</div><div class=\"line\">         </div><div class=\"line\">         mainApp.controller('CalcController', function($scope, CalcService, defaultInput) &#123;</div><div class=\"line\">            $scope.number = defaultInput;</div><div class=\"line\">            $scope.result = CalcService.square($scope.number);</div><div class=\"line\"></div><div class=\"line\">            $scope.square = function() &#123;</div><div class=\"line\">               $scope.result = CalcService.square($scope.number);</div><div class=\"line\">            &#125;</div><div class=\"line\">         &#125;);</div><div class=\"line\">\t\t\t</div><div class=\"line\">      &lt;/scrip t&gt;</div><div class=\"line\">      </div><div class=\"line\">   &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"AngularJS-服务-Service\"><a href=\"#AngularJS-服务-Service\" class=\"headerlink\" title=\"AngularJS 服务(Service)\"></a>AngularJS 服务(Service)</h2><p>AngularJS 中你可以创建自己的服务，或使用内建服务。<br>什么是服务？<br>在 AngularJS 中，服务是一个函数或对象，可在你的 AngularJS 应用中使用。<br>AngularJS 内建了30 多个服务。<br>有个 $location 服务，它可以返回当前页面的 URL 地址。<br>实例<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(<span class=\"string\">'myApp'</span>, []);</div><div class=\"line\">app.controller(<span class=\"string\">'customersCtrl'</span>, function($scope, $location) &#123;</div><div class=\"line\">    $scope.myUrl = $location.absUrl();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>$http 服务<br>$http 是 AngularJS 应用中最常用的服务。 服务向服务器发送请求，应用响应服务器传送过来的数据。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(<span class=\"string\">'myApp'</span>, []);</div><div class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, function($scope, $http) &#123;</div><div class=\"line\">    $http.get(<span class=\"string\">\"welcome.htm\"</span>).then(function (response) &#123;</div><div class=\"line\">        $scope.myWelcome = response.data;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>$timeout 服务<br>AngularJS $timeout 服务对应了 JS window.setTimeout 函数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(<span class=\"string\">'myApp'</span>, []);</div><div class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, function($scope, $timeout) &#123;</div><div class=\"line\">    $scope.myHeader = <span class=\"string\">\"Hello World!\"</span>;</div><div class=\"line\">    $timeout(function () &#123;</div><div class=\"line\">        $scope.myHeader = <span class=\"string\">\"How are you today?\"</span>;</div><div class=\"line\">    &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>$interval 服务<br>AngularJS $interval 服务对应了 JS window.setInterval 函数。</p>\n<p>创建自定义服务<br>你可以创建访问自定义服务，链接到你的模块中：<br>创建名为hexafy 的访问:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.service(<span class=\"string\">'hexafy'</span>, function() &#123;</div><div class=\"line\">    this.myFunc = function (x) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x.toString(<span class=\"number\">16</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>要使用访问自定义服务，需要在定义过滤器的时候独立添加:<br>实例<br>使用自定义的的服务 hexafy 将一个数字转换为16进制数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, function($scope, hexafy) &#123;</div><div class=\"line\">    $scope.hex = hexafy.myFunc(<span class=\"number\">255</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>过滤器中，使用自定义服务<br>当你创建了自定义服务，并连接到你的应用上后，你可以在控制器，指令，过滤器或其他服务中使用它。<br>在过滤器 myFormat 中使用服务 hexafy:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.filter(<span class=\"string\">'myFormat'</span>,[<span class=\"string\">'hexafy'</span>, function(hexafy) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> function(x) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> hexafy.myFunc(x);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure></p>\n<p>在对象数组中获取值时你可以使用过滤器：<br>创建服务 hexafy:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">&lt;li ng-repeat=\"x in counts\"&gt;&#123;&#123;x | myFormat&#125;&#125;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>ng-app 指令位于应用的根元素下。<br>对于单页Web应用（single page web application，SPA），应用的根通常为 <html> 元素。<br>一个或多个 ng-controller 指令定义了应用的控制器。每个控制器有他自己的作用域：: 定义的 HTML 元素。<br>AngularJS 在 HTML DOMContentLoaded 事件中自动开始。如果找到 ng-app 指令 ， AngularJS 载入指令中的模块，并将 ng-app 作为应用的根进行编译。<br>应用的根可以是整个页面，或者页面的一小部分，如果是一小部分会更快编译和执行。</html></p>\n<h2 id=\"AngularJS中的依赖注入\"><a href=\"#AngularJS中的依赖注入\" class=\"headerlink\" title=\"AngularJS中的依赖注入\"></a>AngularJS中的依赖注入</h2><p>1、angular.module()创建、获取、注册angular中的模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/ 传递参数不止一个,代表新建模块;空数组代表该模块不依赖其他模块</div><div class=\"line\">var createModule = angular.module(<span class=\"string\">\"myModule\"</span>, []);</div><div class=\"line\"></div><div class=\"line\">// 只有一个参数(模块名),代表获取模块</div><div class=\"line\">// 如果模块不存在,angular框架会抛异常</div><div class=\"line\">var getModule = angular.module(<span class=\"string\">\"myModule\"</span>);</div><div class=\"line\"></div><div class=\"line\">// true,都是同一个模块</div><div class=\"line\">alert(createModule == getModule);</div></pre></td></tr></table></figure></p>\n<p>该函数既可以创建新的模块，也可以获取已有模块，是创建还是获取，通过参数的个数来区分。<br>angular.module(name, [requires], [configFn]);</p>\n<p>name：字符串类型，代表模块的名称；</p>\n<p>requires：字符串的数组，代表该模块依赖的其他模块列表，如果不依赖其他模块，用空数组即可；</p>\n<p>configFn：用来对该模块进行一些配置。</p>\n<p>4、angular中三种声明依赖的方式</p>\n<p>angular提供了3种获取依赖的方式：inference、annotation、inline方式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建myModule模块、注册服务</div><div class=\"line\">var myModule = angular.module(<span class=\"string\">'myModule'</span>, []);</div><div class=\"line\">myModule.service(<span class=\"string\">'myService'</span>, function() &#123;</div><div class=\"line\">\t\t\tthis.my = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 获取injector</div><div class=\"line\">var injector = angular.injector([<span class=\"string\">\"myModule\"</span>]);</div><div class=\"line\"></div><div class=\"line\">// 第一种inference</div><div class=\"line\">injector.invoke(function(myService)&#123;alert(myService.my);&#125;);</div><div class=\"line\"></div><div class=\"line\">// 第二种annotation</div><div class=\"line\">function explicit(serviceA) &#123;alert(serviceA.my);&#125;;</div><div class=\"line\">explicit.$inject = [<span class=\"string\">'myService'</span>];</div><div class=\"line\">injector.invoke(explicit);</div><div class=\"line\"></div><div class=\"line\">// 第三种inline</div><div class=\"line\">injector.invoke([<span class=\"string\">'myService'</span>, function(serviceA)&#123;alert(serviceA.my);&#125;]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://blog.csdn.net/renfufei/article/details/<span class=\"number\">19038123</span></div></pre></td></tr></table></figure>\n<p>依赖注解 | Dependency Annotation<br>injector 怎么知道需要注入何种 service 呢?<br>为了解决依赖关系,应用程序开发者需要提供 injector 需要的 annotation 信息。在 Angular 中,某些API函数通过使用 injector 来调用,请按照API文档。injector 需要知道注入哪些服务给函数。下面是通过 service name 信息对代码进行注解的三种等价方式。他们都是等价的，你可以在适当的地方互换使用.</p>\n<p>推断依赖关系 | Inferring Dependencies<br>最简单的获取依赖的方式,就是让函数参数名和依赖的名字一致。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function MyController($scope, greeter) &#123;  </div><div class=\"line\">  ...  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>给定一个 function, injector 通过检查函数声明和提取参数名称可以推断出 service 的名称 。在上面的例子中, $scope 和 greeter 是需要注入 function 的两个 services。<br>虽然简单直接, 但这种方法在 JavaScript 压缩/混淆 时会失效,因为会重命名方法的参数名。这使得这种注解方式只适用于 pretotyping, 或者 demo 程序中。</p>\n<p>$inject 注解 | $inject Annotation<br>为了可以在压缩代码后依然可以注入正确的 services, 函数需要通过 $inject 属性来注解. $inject 属性是一个数组,包含 需要注入的 service 名字.</p>\n<p>var MyController = function(renamed$scope, renamedGreeter) {<br>}<br>MyController[‘$inject’] = [‘$scope’, ‘greeter’];  </p>\n<p>在这种情况下,$inject数组中的值的顺序必须和要注入的参数的顺序一致。使用上面的代码片段作为一个例子, ‘$scope’ 将注入到 “renamed$scope”, 而“greeter” 将注入到 “renamedGreeter”。再次提醒注意 $inject 注解必须和 函数声明时的实际参数保持同步(顺序,个数…)。<br>对于 controller 声明,这种注解方法是很有用的,因为它将注解信息赋给了 function。</p>\n<p>简介AngularJS中使用factory和service的方法<br>AngularJS支持使用服务的体系结构“关注点分离”的概念。服务是JavaScript函数，并负责只做一个特定的任务。这也使得他们即维护和测试的单独实体。控制器，过滤器可以调用它们作为需求的基础。服务使用AngularJS的依赖注入机制注入正常。<br>AngularJS提供例如许多内在的服务，如：$http, $route, $window, $location等。每个服务负责例如一个特定的任务，$http是用来创建AJAX调用，以获得服务器的数据。 $route用来定义路由信息等。内置的服务总是前缀$符号。<br>有两种方法来创建服务。<br>    工厂<br>    服务<br>使用工厂方法<br>使用工厂方法，我们先定义一个工厂，然后分配方法给它。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mainApp = angular.module(<span class=\"string\">\"mainApp\"</span>, []);</div><div class=\"line\">mainApp.factory(<span class=\"string\">'MathService'</span>, function() &#123;   </div><div class=\"line\">  var factory = &#123;&#125;; </div><div class=\"line\">  factory.multiply = function(a, b) &#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> a * b </div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> factory;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>   使用服务方法<br>使用服务的方法，我们定义了一个服务，然后分配方法。还注入已经可用的服务。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mainApp.service(<span class=\"string\">'CalcService'</span>, function(MathService)&#123;</div><div class=\"line\">  this.square = function(a) &#123; </div><div class=\"line\"> <span class=\"keyword\">return</span> MathService.multiply(a,a); </div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>$rootScope</p>\n<p>一个网站中有很多页面都要判断登录状态 ， 我之前是直接在启动的时候查登录状态，并挂在$rootScope上，然后各个页面判断登录状态的操作逻辑直接与$rootScope对应属性双向绑定。 这样就不用事件传递了 ，如果涉及逻辑操作 ，还是建议放在服务里面。 services 相当于业务处理模块，而$rootScope 相当于全局变量。<br>scope是AngularJS中的作用域(其实就是存储数据的地方)，很类似JavaScript的原型链 。搜索的时候，优先找自己的scope，如果没有找到就沿着作用域链向上搜索，直至到达根作用域rootScope。<br>　　$rootScope是由angularJS加载模块的时候自动创建的，每个模块只会有1个rootScope。rootScope创建好会以服务的形式加入到 $injector中。也就是说通过 $injector.get(“$ rootScope “);能够获取到某个模块的根作用域。更准确的来说，$rootScope是由angularJS的核心模块ng创建的。</p>\n<p>　　scope是html和单个controller之间的桥梁，数据绑定就靠他了。rootscope是各个controller中scope的桥梁。用rootscope定义的值，可以在各个controller中使用</p>\n<p>事件：</p>\n<p>$stateChangeError</p>\n<p>路由状态变化发生错误时触发的事件。参数有：event，toState，toParams，fromState，fromParams，error。以上根据字面意思即可理解，哈哈。</p>\n<p>$stateChangeStart</p>\n<p>路由状态变化发生前触发的事件。参数有：event，toState，toParams，fromState，fromParams。</p>\n<p>$stateChangeSuccess</p>\n<p>路由状态变化正确时触发的事件。参数有：event，toState，toParams，fromState，fromParams。</p>\n<p>$stateNotFound</p>\n<p>路由状态没找到的时候触发的事件。参数有：event，unfoundState，fromState，fromParams。</p>\n<p>state(name,stateConfig);</p>\n<p>注册一个状态，并给定其配置。<br>参数：</p>\n<p>name：状态的名称。</p>\n<p>stateConfig：状态配置对象。配置具有以下各项属性：</p>\n<p>template： string/function，html模板字符串，或者一个返回html模板字符串的函数。</p>\n<p>templateUrl：string/function，模板路径的字符串，或者返回模板路径字符串的函数。</p>\n<p>templateProvider：function，返回html模板字符串或模板路径的服务。</p>\n<p>controller：string/function，新注册一个控制器函数或者一个已注册的控制器的名称字符串。</p>\n<p>controllerProvider：function，返回控制器或者控制器名称的服务</p>\n<p>controllerAs：string，控制器别名。</p>\n<p>parent：string/object，手动指定该状态的父级。</p>\n<p>resolve：object，将会被注入controller去执行的函数，<string,function>形式。</string,function></p>\n<p>url：string，当前状态的对应url。</p>\n<p>views：object，视图展示的配置。<string,object>形式。</string,object></p>\n<p>abstract：boolean，一个永远不会被激活的抽象的状态，但可以给其子级提供特性的继承。默认是true。</p>\n<p>onEnter：function，当进入一个状态后的回调函数。</p>\n<p>onExit：function，当退出一个状态后的回调函数。</p>\n<p>reloadOnSearch：boolean，如果为false，那么当一个search/query参数改变时不会触发相同的状态，用于当你修改$location.search()的时候不想重新加载页面。默认为true。</p>\n<p>data：object，任意对象数据，用于自定义配置。继承父级状态的data属性。换句话说，通过原型继承可以达到添加一个data数据从而整个树结构都能获取到。</p>\n<p>params：url里的参数值，通过它可以实现页面间的参数传递。</p>\n<p>AngularJS 中的 controllerAs</p>\n<p>Controller 在 AngularJS 应用中可以说是无处不在， 可以在 html 中通过 ngController 指令来指定 Controller ， 语法为：</p>\n<p><any ng-controller=\"expression\"><br>    …<br></any><br>在 ngRoute 模块中使用， 语法为：</p>\n<p>$routeProvider<br>    .when(‘/my-url’, {<br>        controller: ‘MyController’<br>    });<br>在 ui.route 模块中使用， 语法为：</p>\n<p>$stateProvider<br>    .state(‘myState’, {<br>        controller: ‘MyController’<br>    })<br>上面用法在 AngularJS 的社区、示例程序中非常普遍。 但是， 有一个细节可能很多人没有注意到， 那就是 controllerAs ， 上面的三种用法还可以分别这样使用：</p>\n<p><any ng-controller=\"expression as myExpr\"><br>    …<br></any><br>$routeProvider<br>    .when(‘/my-url’, {<br>        controller: ‘MyController’,<br>        controllerAs: ‘ctrl’<br>    });<br>$stateProvider<br>    .state(‘myState’, {<br>        controller: ‘MyController’,<br>        controllerAs: ‘ctrl’<br>    })<br>那么， 使用了 controllerAs 有什么区别呢？ 在 AngularJS 的文档中是这样说的：</p>\n<p>one binds methods and properties directly onto the controller using this: ng-controller=”SettingsController1 as settings”<br>one injects $scope into the controller: ng-controller=”SettingsController2”<br>上面的意思是说， 就是使用 controllerAs 将直接绑定 Controller 的属性和方法， 而不使用 controllerAs 将绑定到为 Controller 注入的 $scope 参数， 下面用一个具体的例子来说明一下：</p>\n<p>不使用 controllerAs 指令时， 通常我们这样做：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">angular</div><div class=\"line\">    .module('app', []).</div><div class=\"line\">    controller('TestController', TestController);</div><div class=\"line\"></div><div class=\"line\">TestController.$inject = ['$scope', '$window'];</div><div class=\"line\"></div><div class=\"line\">function TestController($scope, $window) &#123;</div><div class=\"line\">    $scope.name = 'beginor';</div><div class=\"line\">    </div><div class=\"line\">    $scope.greet = greet;</div><div class=\"line\">    </div><div class=\"line\">    function greet() &#123;</div><div class=\"line\">        $window.alert('Hello, ' + $scope.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;div ng-Controller=\"TestController\"&gt;</div><div class=\"line\">    &lt;label&gt;Name:</div><div class=\"line\">        &lt;input type=\"text\" ng-model=\"name\" /&gt;</div><div class=\"line\">    &lt;/label&gt;</div><div class=\"line\">    &lt;button type=\"button\" ng-click=\"greet()\"&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>在 HTML 视图中， 我们绑定的是 $scope 对象的属性和方法， 而不是 TestController 的实例。</p>\n<p>上面的例子在使用 controllerAs 时， 可以修改成这样：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular</div><div class=\"line\">    .module('app', []).</div><div class=\"line\">    controller('TestController', TestController);</div><div class=\"line\"></div><div class=\"line\">TestController.$inject = ['$window'];</div><div class=\"line\"></div><div class=\"line\">function TestController($window) &#123;</div><div class=\"line\">    this.name = 'beginor';</div><div class=\"line\">    this.$window = $window;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TestController.prototype.greet = function () &#123;</div><div class=\"line\">    this.$window.alert('Hello, ' + this.name);</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;div ng-Controller=\"TestController as vm\"&gt;</div><div class=\"line\">    &lt;label&gt;Name:</div><div class=\"line\">        &lt;input type=\"text\" ng-model=\"vm.name\" /&gt;</div><div class=\"line\">    &lt;/label&gt;</div><div class=\"line\">    &lt;button type=\"button\" ng-click=\"vm.greet()\"&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>看到区别了吧， 使用 controllerAs 时， 可以将 Controller 定义成 Javascript 的原型类， 在 HTML 视图中直接绑定原型类的属性和方法。</p>\n<p>这样做的优点是：</p>\n<p>可以使用 Javascript 的原型类， 我们可以使用更加高级的 ES6 或者 TypeScript 来编写 Controller ；<br>避开了所谓的 child scope 原型继承带来的一些问题， 具体可以 参考这里 ；</p>\n<p>angular的uiRouter服务学习(5) — $state.includes()方法<br>$state.includes方法用于判断当前激活状态是否是指定的状态或者是指定状态的子状态.</p>\n<p>$state.includes(stateOrName,params,options)</p>\n<p>$state.includes方法接受三个参数,其中第二和第三个都不知道是干啥的…估计也不太用得到,就暂时不管了…</p>\n<p>stateOrName:字符串(必填). 是一个状态的名字.</p>\n<p>比如当前的激活状态是 “contacts.details.item” </p>\n<p>如下调用:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$state.includes(<span class=\"string\">\"contacts\"</span>);                              //返回true</div><div class=\"line\">$state.includes(<span class=\"string\">\"contacts.details\"</span>);                      //返回true</div><div class=\"line\">$state.includes(<span class=\"string\">\"contacts.details.item\"</span>);                 //返回true</div><div class=\"line\">$state.includes(<span class=\"string\">\"detail\"</span>);                                //返回undefined</div><div class=\"line\">$state.includes(<span class=\"string\">\"item\"</span>);                                  //返回undefined</div></pre></td></tr></table></figure>\n<p>也可以使用glob语法:</p>\n<p>复制代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$state.$current.name = <span class=\"string\">'contacts.details.item.url'</span>;</div><div class=\"line\"> </div><div class=\"line\">$state.includes(<span class=\"string\">\"*.details.*.*\"</span>); // returns true</div><div class=\"line\">$state.includes(<span class=\"string\">\"*.details.**\"</span>); // returns true</div><div class=\"line\">$state.includes(<span class=\"string\">\"**.item.**\"</span>); // returns true</div><div class=\"line\">$state.includes(<span class=\"string\">\"*.details.item.url\"</span>); // returns true</div><div class=\"line\">$state.includes(<span class=\"string\">\"*.details.*.url\"</span>); // returns true</div><div class=\"line\">$state.includes(<span class=\"string\">\"*.details.*\"</span>); // returns undefined</div><div class=\"line\">$state.includes(<span class=\"string\">\"item.**\"</span>); // returns undefined</div></pre></td></tr></table></figure></p>\n<p>复制代码<br>可以用于激活某个tab,让当前项高亮显示:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li ng-class=\"&#123;active:state.includes('dashboard.report')&#125;\"&gt;&lt;a ui-sref=\"dashboard.report\"&gt;Reports&lt;/a&gt;&lt;/li&gt;</div></pre></td></tr></table></figure></p>\n<p>需要注意的是,在表达式里直接用$state是不行的,需要在控制器中把$state赋值给$scope下的变量.这样在表达式里才能使用:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$stateProvider.state(<span class=\"string\">'dashboard'</span>,&#123;</div><div class=\"line\">    url:<span class=\"string\">'/dashboard'</span>,</div><div class=\"line\">    templateUrl:<span class=\"string\">'./tpls/dashboard.html'</span>,</div><div class=\"line\">    controller:function($scope,$state)&#123;</div><div class=\"line\">        $scope.state = $state;              </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>AngularJS ng - swi tch 指令<br>根据选中的值显示对应部分:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-switch=\"myVar\"&gt;</div><div class=\"line\">  &lt;div ng-switch-when=\"runoob\"&gt;</div><div class=\"line\">     &lt;h1&gt;菜鸟教程&lt;/h1&gt;</div><div class=\"line\">     &lt;p&gt;欢迎访问菜鸟教程&lt;/p&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div ng-switch-when=\"google\"&gt;</div><div class=\"line\">     &lt;h1&gt;Google&lt;/h1&gt;</div><div class=\"line\">     &lt;p&gt;欢迎访问Google&lt;/p&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div ng-switch-when=\"taobao\"&gt;</div><div class=\"line\">     &lt;h1&gt;淘宝&lt;/h1&gt;</div><div class=\"line\">     &lt;p&gt;欢迎访问淘宝&lt;/p&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div ng-switch-default&gt;</div><div class=\"line\">     &lt;h1&gt;切换&lt;/h1&gt;</div><div class=\"line\">     &lt;p&gt;选择不同选项显示对应的值。&lt;/p&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>定义和用法<br>ng-sw itch 指令根据表达式显示或隐藏对应的部分。<br>对应的子元素使用 ng-sw itch-when 指令，如果匹配选中选择显示，其他为匹配的则移除。<br>你可以通过使用 ng-s witch-default 指令设置默认选项，如果都没有匹配的情况，默认选项会显示。<br>语法<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;element ng-switch=\"expression\"&gt;</div><div class=\"line\">  &lt;element ng-switch-when=\"value\"&gt;&lt;/element&gt;</div><div class=\"line\">  &lt;element ng-switch-when=\"value\"&gt;&lt;/element&gt;</div><div class=\"line\">  &lt;element ng-switch-when=\"value\"&gt;&lt;/element&gt;</div><div class=\"line\">  &lt;element ng-switch-default&gt;&lt;/element&gt;</div><div class=\"line\">&lt;/element&gt;</div><div class=\"line\">&lt;form&gt; 元素支持该属性。</div></pre></td></tr></table></figure></p>\n<p>在 Angularjs 中 ui-sref 和 $state.go 如何传递参数<br>ui-sref、$state.go 的区别</p>\n<p>ui-sref 一般使用在 &lt; a &gt;…&lt; / a &gt;；</p>\n<p><a ui-sref=\"message-list\">消息中心&lt; / a &gt;</a></p>\n<p>$state.go(‘someState’)一般使用在 controller里面；</p>\n<p>.controller(‘firstCtrl’, function($scope, $state) {<br>      $state.go(‘login’);<br> });<br>这两个本质上是一样的东西，我们看ui-sref的源码：</p>\n<p>复制代码<br>…<br>element.bind(“click”, function(e) {<br>    var button = e.which || e.button;<br>    if ( !(button &gt; 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr(‘target’)) ) {</p>\n<pre><code>var transition = $timeout(function() {\n  // HERE we call $state.go inside of ui-sref\n  $state.go(ref.state, params, options);\n});\n</code></pre><p>复制代码<br>ui-sref最后调用的还是$state.go()方法<br>首先，要在目标页面定义接受的参数：<br>http://images2015.cnblogs.com/blog/337212/201603/337212-20160318181804412-426985465.png<br>传参，</p>\n<p>ui-sref:<br>http://images2015.cnblogs.com/blog/337212/201603/337212-20160318182142693-1979913166.png<br>http://images2015.cnblogs.com/blog/337212/201603/337212-20160318182359646-1518874208.png</p>\n","excerpt":"","more":"<p>angular -  ng关键字缩写<br>AngularJS 是一个 JavaScript 框架。它可通过 script 标签添加到 HTML 页面。<br>AngularJS 通过 指令 扩展了 HTML，且通过 表达式 绑定数据到 HTML。<br>AngularJS 是一个 JavaScript 框架<br>AngularJS 是一个 JavaScript 框架。它是一个以 JavaScript 编写的库。<br>AngularJS 是以一个 JavaScript 文件形式发布的，可通过 script 标签添加到网页中：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=\"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js\"&gt;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>各个 angular.js 版本下载： <a href=\"https://github.com/angular/angular.js/releases\">https://github.com/angular/angular.js/releases</a><br>AngularJS 扩展了 HTML<br>AngularJS 通过 ng-directives 扩展了 HTML。<br>ng-app 指令定义一个 AngularJS 应用程序。<br>ng-model 指令把元素值（比如输入域的值）绑定到应用程序。<br>ng-bind 指令把应用程序数据绑定到 HTML 视图。<br>AngularJS 实例</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;meta charset=\"utf-8\"&gt;</div><div class=\"line\">&lt;script src=\"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js\"&gt;&lt;/scrip t &gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;div ng-app=\"\"&gt;</div><div class=\"line\">     &lt;p&gt;名字 : &lt;input type=\"text\" ng-model=\"name\"&gt;&lt;/p&gt;</div><div class=\"line\">     &lt;h1&gt;Hello &#123;&#123;name&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>实例讲解：<br>当网页加载完毕，AngularJS 自动开启。<br>ng-app 指令告诉 AngularJS，<div> 元素是 AngularJS 应用程序 的”所有者”。<br>ng-model 指令把输入域的值绑定到应用程序变量 name。<br>ng-bind 指令把应用程序变量 name 绑定到某个段落的 innerHTML。</p>\n<p>什么是 AngularJS？<br>AngularJS 使得开发现代的单一页面应用程序（SPAs：Single Page Applications）变得更加容易。<br>AngularJS 把应用程序数据绑定到 HTML 元素。<br>AngularJS 可以克隆和重复 HTML 元素。<br>AngularJS 可以隐藏和显示 HTML 元素。<br>AngularJS 可以在 HTML 元素”背后”添加代码。<br>AngularJS 支持输入验证。<br>AngularJS 指令<br>正如您所看到的，AngularJS 指令是以 ng 作为前缀的 HTML 属性。<br>ng-init 指令初始化 AngularJS 应用程序变量。<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"firstName='John'\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;姓名为 &lt;span ng-bind=\"firstName\"&gt;&lt;/span&gt;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>HTML5 允许扩展的（自制的）属性，以 data- 开头。<br>AngularJS 属性以 ng- 开头，但是您可以使用 data-ng- 来让网页对 HTML5 有效。<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div data-ng-app=\"\" data-ng-init=\"firstName='John'\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;姓名为 &lt;span data-ng-bind=\"firstName\"&gt;&lt;/span&gt;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>AngularJS 表达式<br>AngularJS 表达式写在双大括号内：。<br>AngularJS 表达式把数据绑定到 HTML，这与 ng-bind 指令有异曲同工之妙。<br>AngularJS 将在表达式书写的位置”输出”数据。<br>AngularJS 表达式 很像 JavaScript 表达式：它们可以包含文字、运算符和变量。<br>实例 10 或 undefined undefined<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">&lt;meta charset=\"utf-8\"&gt;</div><div class=\"line\">&lt;script src=\"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js\"&gt;&lt;/scrip t&gt; </div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;div ng-app=\"\"&gt;</div><div class=\"line\">     &lt;p&gt;我的第一个表达式： &#123;&#123; 5 + 5 &#125;&#125;&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>AngularJS 应用<br>AngularJS 模块（Module） 定义了 AngularJS 应用。<br>AngularJS 控制器（Controller） 用于控制 AngularJS 应用。<br>ng-app指令定义了应用, ng-controller 定义了控制器。<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"myApp\" ng-controller=\"myCtrl\"&gt;</div><div class=\"line\"> </div><div class=\"line\">名: &lt;input type=\"text\" ng-model=\"firstName\"&gt;&lt;br&gt;</div><div class=\"line\">姓: &lt;input type=\"text\" ng-model=\"lastName\"&gt;&lt;br&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">姓名: &#123;&#123;firstName + \" \" + lastName&#125;&#125;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var app = angular.module('myApp', []);</div><div class=\"line\">app.controller('myCtrl', function($scope) &#123;</div><div class=\"line\">    $scope.firstName= \"John\";</div><div class=\"line\">    $scope.lastName= \"Doe\";</div><div class=\"line\">&#125;);</div><div class=\"line\">&lt;/scrip t&gt;</div></pre></td></tr></table></figure></p>\n<p>AngularJS 模块定义应用:<br>AngularJS 模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(<span class=\"string\">'myApp'</span>, []);</div></pre></td></tr></table></figure></p>\n<p>AngularJS 控制器控制应用:<br>AngularJS 控制器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, function($scope) &#123;</div><div class=\"line\">    $scope.firstName= <span class=\"string\">\"John\"</span>;</div><div class=\"line\">    $scope.lastName= <span class=\"string\">\"Doe\"</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>使用 ng-init 不是很常见。您将在控制器一章中学习到一个更好的初始化数据的方式。</p>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">数字</div><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"quantity=1;cost=5\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;总价： &#123;&#123; quantity * cost &#125;&#125;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">字符串</div><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;姓名： &#123;&#123; firstName + \" \" + lastName &#125;&#125;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">对象</div><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"person=&#123;firstName:'John',lastName:'Doe'&#125;\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;姓为 &#123;&#123; person.lastName &#125;&#125;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">数组</div><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;第三个值为 &#123;&#123; points[2] &#125;&#125;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>AngularJS 表达式 与 JavaScript 表达式<br>类似于 JavaScript 表达式，AngularJS 表达式可以包含字母，操作符，变量。<br>与 JavaScript 表达式不同，AngularJS 表达式可以写在 HTML 中。<br>与 JavaScript 表达式不同，AngularJS 表达式不支持条件判断，循环及异常。<br>与 JavaScript 表达式不同，AngularJS 表达式支持过滤器。</p>\n<h2 id=\"AngularJS-指令\"><a href=\"#AngularJS-指令\" class=\"headerlink\" title=\"AngularJS 指令\"></a>AngularJS 指令</h2><p>AngularJS 通过被称为 指令 的新属性来扩展 HTML。<br>AngularJS 通过内置的指令来为应用添加功能。<br>AngularJS 允许你自定义指令。<br>AngularJS 指令是扩展的 HTML 属性，带有前缀 ng-。<br>ng-app 指令初始化一个 AngularJS 应用程序。<br>ng-init 指令初始化应用程序数据。<br>ng-model 指令把元素值（比如输入域的值）绑定到应用程序。</p>\n<p>ng-app 指令告诉 AngularJS，<div> 元素是 AngularJS 应用程序 的”所有者”。<br>一个网页可以包含多个运行在不同元素中的 AngularJS 应用程序。</p>\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p>上面实例中的  表达式是一个 AngularJS 数据绑定表达式。<br>AngularJS 中的数据绑定，同步了 AngularJS 表达式与 AngularJS 数据。<br> 是通过 ng-model=”firstName” 进行同步。<br>在下一个实例中，两个文本域是通过两个 ng-model 指令同步的：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"quantity=1;price=5\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;h2&gt;价格计算器&lt;/h2&gt;</div><div class=\"line\"> </div><div class=\"line\">数量： &lt;input type=\"number\"    ng-model=\"quantity\"&gt;</div><div class=\"line\">价格： &lt;input type=\"number\" ng-model=\"price\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;&lt;b&gt;总价：&lt;/b&gt; &#123;&#123; quantity * price &#125;&#125;&lt;/p&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"重复-HTML-元素\"><a href=\"#重复-HTML-元素\" class=\"headerlink\" title=\"重复 HTML 元素\"></a>重复 HTML 元素</h2><p>ng-repeat 指令会重复一个 HTML 元素：<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"names=['Jani','Hege','Kai']\"&gt;</div><div class=\"line\">  &lt;p&gt;使用 ng-repeat 来循环数组&lt;/p&gt;</div><div class=\"line\">  &lt;ul&gt;</div><div class=\"line\">    &lt;li ng-repeat=\"x in names\"&gt;</div><div class=\"line\">      &#123;&#123; x &#125;&#125;</div><div class=\"line\">    &lt;/li&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>ng-repeat 指令用在一个对象数组上：<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"\" ng-init=\"names=[</div><div class=\"line\">&#123;name:'Jani',country:'Norway'&#125;,</div><div class=\"line\">&#123;name:'Hege',country:'Sweden'&#125;,</div><div class=\"line\">&#123;name:'Kai',country:'Denmark'&#125;]\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;p&gt;循环对象：&lt;/p&gt;</div><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">  &lt;li ng-repeat=\"x    in names\"&gt;</div><div class=\"line\">    &#123;&#123; x.name + ', ' + x.country &#125;&#125;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>AngularJS 完美支持数据库的 CRUD（增加Create、读取Read、更新Update、删除Delete）应用程序。<br>把实例中的对象想象成数据库中的记录。</p>\n<p>ng-app 指令<br>ng-app 指令定义了 AngularJS 应用程序的 根元素。<br>ng-app 指令在网页加载完毕时会自动引导（自动初始化）应用程序。<br>稍后您将学习到 ng-app 如何通过一个值（比如 ng-app=”myModule”）连接到代码模块。<br>ng-init 指令<br>ng-init 指令为 AngularJS 应用程序定义了 初始值。<br>通常情况下，不使用 ng-init。您将使用一个控制器或模块来代替它。<br>稍后您将学习更多有关控制器和模块的知识。<br>ng-model 指令<br>ng-model 指令 绑定 HTML 元素 到应用程序数据。<br>ng-model 指令也可以：<br>为应用程序数据提供类型验证（number、email、required）。<br>为应用程序数据提供状态（invalid、dirty、touched、error）。<br>为 HTML 元素提供 CSS 类。<br>绑定 HTML 元素到 HTML 表单。<br>ng-repeat 指令<br>ng-repeat 指令对于集合中（数组中）的每个项会 克隆一次 HTML 元素。</p>\n<p>创建自定义的指令<br>除了 AngularJS 内置的指令外，我们还可以创建自定义指令。<br>你可以使用 .directive 函数来添加自定义的指令。<br>要调用自定义指令，HTML 元素上需要添加自定义指令名。<br>使用驼峰法来命名一个指令， runoobDirective, 但在使用它时需要以 - 分割, runoob-directive:<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body ng-app=\"myApp\"&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;runoob-directive&gt;&lt;/runoob-directive&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var app = angular.module(\"myApp\", []);</div><div class=\"line\">app.directive(\"runoobDirective\", function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        template : \"&lt;h1&gt;自定义指令!&lt;/h1&gt;\"</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\">&lt;/scrip t&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure></p>\n<p>你可以通过以下方式来调用指令：<br>元素名<br>属性<br>类名<br>注释<br>以下实例方式也能输出同样结果:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">元素名</div><div class=\"line\">&lt;runoob-directive&gt;&lt;/runoob-directive&gt;</div><div class=\"line\"></div><div class=\"line\">属性</div><div class=\"line\">&lt;div runoob-directive&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">类名</div><div class=\"line\">&lt;div class=\"runoob-directive\"&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">注释</div><div class=\"line\">&lt;!-- directive: runoob-directive --&gt;</div></pre></td></tr></table></figure>\n<p>限制使用<br>你可以限制你的指令只能通过特定的方式来调用。<br>实例<br>通过添加 restrict 属性,并设置只值为 “A”, 来设置指令只能通过属性的方式来调用:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(<span class=\"string\">\"myApp\"</span>, []);</div><div class=\"line\">app.directive(<span class=\"string\">\"runoobDirective\"</span>, function() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        restrict : <span class=\"string\">\"A\"</span>,</div><div class=\"line\">        template : <span class=\"string\">\"&lt;h1&gt;自定义指令!&lt;/h1&gt;\"</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>restrict 值可以是以下几种:<br>E 作为元素名使用<br>A 作为属性使用<br>C 作为类名使用<br>M 作为注释使用<br>restrict 默认值为 EA, 即可以通过元素名和属性名来调用指令。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular自定义指令的两种写法：</div><div class=\"line\">上面这种，感觉更清晰明确一点。</div><div class=\"line\">// angular.module(<span class=\"string\">'MyApp'</span>,[])</div><div class=\"line\">// .directive(<span class=\"string\">'zl1'</span>,zl1)</div><div class=\"line\">// .controller(<span class=\"string\">'con1'</span>,[<span class=\"string\">'$scope'</span>,func1]);</div><div class=\"line\">//</div><div class=\"line\">// function zl1()&#123;</div><div class=\"line\">//   var directive=&#123;</div><div class=\"line\">//     restrict:<span class=\"string\">'AEC'</span>,</div><div class=\"line\">//     template:<span class=\"string\">'this is the it-first directive'</span>,</div><div class=\"line\">//   &#125;;</div><div class=\"line\">//   <span class=\"keyword\">return</span> directive;</div><div class=\"line\">// &#125;;</div><div class=\"line\">//</div><div class=\"line\">// function func1($scope)&#123;</div><div class=\"line\">//   $scope.name=<span class=\"string\">\"alice\"</span>;</div><div class=\"line\">// &#125;</div><div class=\"line\"></div><div class=\"line\">//这是教程里类似的写法</div><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>,[]).directive(<span class=\"string\">'zl1'</span>,[ function()&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    restrict:<span class=\"string\">'AE'</span>,</div><div class=\"line\">    template:<span class=\"string\">'thirective'</span>,</div><div class=\"line\">    link:function($scope,elm,attr,controller)&#123;</div><div class=\"line\">      console.log(<span class=\"string\">\"这是link\"</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    controller:function($scope,$element,$attrs)&#123;</div><div class=\"line\">      console.log(<span class=\"string\">\"这是con\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;]).controller(<span class=\"string\">'Con1'</span>,[<span class=\"string\">'$scope'</span>,function($scope)&#123;</div><div class=\"line\">  $scope.name=<span class=\"string\">\"aliceqqq\"</span>;</div><div class=\"line\">&#125;]);</div><div class=\"line\">Alice2周前 (<span class=\"number\">12</span><span class=\"number\">-29</span>)</div><div class=\"line\"></div><div class=\"line\">还有指令配置项的：link controller等在项目运用中有遇到过：</div><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>, []).directive(<span class=\"string\">'first'</span>, [ function()&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        // scope: false, // 默认值，共享父级作用域</div><div class=\"line\">        // controller: function($scope, $element, $attrs, $transclude) &#123;&#125;,</div><div class=\"line\">        restrict: <span class=\"string\">'AE'</span>, // E = Element, A = Attribute, C = Class, M = Comment</div><div class=\"line\">        template: <span class=\"string\">'first name:&#123;&#123;name&#125;&#125;'</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;]).directive(<span class=\"string\">'second'</span>, [ function()&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        scope: true, // 继承父级作用域并创建指令自己的作用域</div><div class=\"line\">        // controller: function($scope, $element, $attrs, $transclude) &#123;&#125;,</div><div class=\"line\">        restrict: <span class=\"string\">'AE'</span>, // E = Element, A = Attribute, C = Class, M = Comment</div><div class=\"line\">        //当修改这里的name时，second会在自己的作用域中新建一个name变量，与父级作用域中的</div><div class=\"line\">        // name相对独立，所以再修改父级中的name对second中的name就不会有影响了</div><div class=\"line\">        template: <span class=\"string\">'second name:&#123;&#123;name&#125;&#125;'</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;]).directive(<span class=\"string\">'third'</span>, [ function()&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        scope: &#123;&#125;, // 创建指令自己的独立作用域，与父级毫无关系</div><div class=\"line\">        // controller: function($scope, $element, $attrs, $transclude) &#123;&#125;,</div><div class=\"line\">        restrict: <span class=\"string\">'AE'</span>, // E = Element, A = Attribute, C = Class, M = Comment</div><div class=\"line\">        template: <span class=\"string\">'third name:&#123;&#123;name&#125;&#125;'</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;])</div><div class=\"line\">.controller(<span class=\"string\">'DirectiveController'</span>, [<span class=\"string\">'$scope'</span>, function($scope)&#123;</div><div class=\"line\">    $scope.name=<span class=\"string\">\"mike\"</span>;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure>\n<h2 id=\"AngularJS-ng-model-指令\"><a href=\"#AngularJS-ng-model-指令\" class=\"headerlink\" title=\"AngularJS ng-model 指令\"></a>AngularJS ng-model 指令</h2><p>ng-model 指令用于绑定应用程序数据到 HTML 控制器(input, select, textarea)的值。<br>ng-model 指令<br>ng-model 指令可以将输入域的值与 AngularJS 创建的变量绑定。<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"myApp\" ng-controller=\"myCtrl\"&gt;</div><div class=\"line\">    名字: &lt;input ng-model=\"name\"&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var app = angular.module('myApp', []);</div><div class=\"line\">app.controller('myCtrl', function($scope) &#123;</div><div class=\"line\">    $scope.name = \"John Doe\";</div><div class=\"line\">&#125;);</div><div class=\"line\">&lt;/scrip t&gt;</div></pre></td></tr></table></figure></p>\n<p>双向绑定<br>双向绑定，在修改输入域的值时， AngularJS 属性的值也将修改：<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"myApp\" ng-controller=\"myCtrl\"&gt;</div><div class=\"line\">    名字: &lt;input ng-model=\"name\"&gt;</div><div class=\"line\">    &lt;h1&gt;你输入了: &#123;&#123;name&#125;&#125;&lt;/h1&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>验证用户输入<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form ng-app=\"\" name=\"myForm\"&gt;</div><div class=\"line\">    Email:</div><div class=\"line\">    &lt;input type=\"email\" name=\"myAddress\" ng-model=\"text\"&gt;</div><div class=\"line\">    &lt;span ng-show=\"myForm.myAddress.$error.email\"&gt;不是一个合法的邮箱地址&lt;/span&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>以上实例中，提示信息会在 ng-show 属性返回 true 的情况下显示。</p>\n<p>应用状态<br>ng-model 指令可以为应用数据提供状态值(invalid, dirty, touched, error):<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form ng-app=\"\" name=\"myForm\" ng-init=\"myText = 'test@runoob.com'\"&gt;</div><div class=\"line\">    Email:</div><div class=\"line\">    &lt;input type=\"email\" name=\"myAddress\" ng-model=\"myText\" required&gt;&lt;/p&gt;</div><div class=\"line\">    &lt;h1&gt;状态&lt;/h1&gt;</div><div class=\"line\">    &#123;&#123;myForm.myAddress.$valid&#125;&#125;</div><div class=\"line\">    &#123;&#123;myForm.myAddress.$dirty&#125;&#125;</div><div class=\"line\">    &#123;&#123;myForm.myAddress.$touched&#125;&#125;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>CSS 类<br>ng-model 指令基于它们的状态为 HTML 元素提供了 CSS 类：<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style&gt;</div><div class=\"line\">input.ng-invalid &#123;</div><div class=\"line\">    background-color: lightblue;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;/style&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;form ng-app=\"\" name=\"myForm\"&gt;</div><div class=\"line\">    输入你的名字:</div><div class=\"line\">    &lt;input name=\"myAddress\" ng-model=\"text\" required&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>ng-model 指令根据表单域的状态添加/移除以下类：<br>ng-empty<br>ng-not-empty<br>ng-touched<br>ng-untouched<br>ng-valid<br>ng-invalid<br>ng-dirty<br>ng-pending<br>ng-pristine</p>\n<h2 id=\"AngularJS-控制器\"><a href=\"#AngularJS-控制器\" class=\"headerlink\" title=\"AngularJS 控制器\"></a>AngularJS 控制器</h2><p>AngularJS 控制器 控制 AngularJS 应用程序的数据。<br> AngularJS 控制器是常规的 JavaScript 对象。<br> AngularJS 控制器<br>AngularJS 应用程序被控制器控制。<br>ng-controller 指令定义了应用程序控制器。<br>控制器是 JavaScript 对象，由标准的 JavaScript 对象的构造函数 创建。<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"myApp\" ng-controller=\"myCtrl\"&gt;</div><div class=\"line\"></div><div class=\"line\">名: &lt;input type=\"text\" ng-model=\"firstName\"&gt;&lt;br&gt;</div><div class=\"line\">姓: &lt;input type=\"text\" ng-model=\"lastName\"&gt;&lt;br&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">姓名: &#123;&#123;firstName + \" \" + lastName&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var app = angular.module('myApp', []);</div><div class=\"line\">app.controller('myCtrl', function($scope) &#123;</div><div class=\"line\">    $scope.firstName = \"John\";</div><div class=\"line\">    $scope.lastName = \"Doe\";</div><div class=\"line\">&#125;);</div><div class=\"line\">&lt;/scrip t &gt;</div></pre></td></tr></table></figure></p>\n<p>应用解析：<br>AngularJS 应用程序由 ng-app 定义。应用程序在 <div> 内运行。<br>ng-controller=”myCtrl” \b属性是一个 AngularJS 指令。用于定义一个控制器。<br>myCtrl 函数是一个 JavaScript 函数。<br>AngularJS 使用$scope 对象来调用控制器。<br>在 AngularJS 中， $scope 是一个应用对象(属于应用变量和函数)。<br>控制器的 $scope （相当于作用域、控制范围）用来保存AngularJS Model(模型)的对象。<br>控制器在作用域中创建了两个属性 (firstName 和 lastName)。<br>ng-model 指令绑定输入域到控制器的属性（firstName 和 lastName）。</p>\n<p>控制器方法<br>上面的实例演示了一个带有 lastName 和 firstName 这两个属性的控制器对象。<br>控制器也可以有方法（变量和函数）：<br>AngularJS 实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-app=\"myApp\" ng-controller=\"personCtrl\"&gt;</div><div class=\"line\"></div><div class=\"line\">名: &lt;input type=\"text\" ng-model=\"firstName\"&gt;&lt;br&gt;</div><div class=\"line\">姓: &lt;input type=\"text\" ng-model=\"lastName\"&gt;&lt;br&gt;</div><div class=\"line\">&lt;br&gt;</div><div class=\"line\">姓名: &#123;&#123;fullName()&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">var app = angular.module('myApp', []);</div><div class=\"line\">app.controller('personCtrl', function($scope) &#123;</div><div class=\"line\">    $scope.firstName = \"John\";</div><div class=\"line\">    $scope.lastName = \"Doe\";</div><div class=\"line\">    $scope.fullName = function() &#123;</div><div class=\"line\">        return $scope.firstName + \" \" + $scope.lastName;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">&lt;/scrip t&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"AngularJS-包含\"><a href=\"#AngularJS-包含\" class=\"headerlink\" title=\"AngularJS 包含\"></a>AngularJS 包含</h2><p>在 AngularJS 中，你可以在 HTML 中包含 HTML 文件。<br>使用 AngularJS, 你可以使用 ng-include 指令来包含 HTML 内容:<br>实例<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body ng-app=\"\"&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;div ng-include=\"'runoob.htm'\"&gt;&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"AngularJS-依赖注入\"><a href=\"#AngularJS-依赖注入\" class=\"headerlink\" title=\"AngularJS 依赖注入\"></a>AngularJS 依赖注入</h2><p>依赖注入（Dependency Injection，简称DI）是一种软件设计模式，在这种模式下，一个或更多的依赖（或服务）被注入（或者通过引用传递）到一个独立的对象（或客户端）中，然后成为了该客户端状态的一部分。<br>该模式分离了客户端依赖本身行为的创建，这使得程序设计变得松耦合，并遵循了依赖反转和单一职责原则。与服务定位器模式形成直接对比的是，它允许客户端了解客户端如何使用该系统找到依赖<br>AngularJS 提供很好的依赖注入机制。以下5个核心组件用来作为依赖注入：<br>value<br>factory<br>service<br>provider<br>constant</p>\n<p>value<br>Value 是一个简单的 javascript 对象，用于向控制器传递值（配置阶段）：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 定义一个模块</div><div class=\"line\">var mainApp = angular.module(<span class=\"string\">\"mainApp\"</span>, []);</div><div class=\"line\"></div><div class=\"line\">// 创建 value 对象 <span class=\"string\">\"defaultInput\"</span> 并传递数据</div><div class=\"line\">mainApp.value(<span class=\"string\">\"defaultInput\"</span>, <span class=\"number\">5</span>);</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">// 将 <span class=\"string\">\"defaultInput\"</span> 注入到控制器</div><div class=\"line\">mainApp.controller(<span class=\"string\">'CalcController'</span>, function($scope, CalcService, defaultInput) &#123;</div><div class=\"line\">   $scope.number = defaultInput;</div><div class=\"line\">   $scope.result = CalcService.square($scope.number);</div><div class=\"line\">   </div><div class=\"line\">   $scope.square = function() &#123;</div><div class=\"line\">      $scope.result = CalcService.square($scope.number);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>factory<br>factory 是一个函数用于返回值。在 service 和 controller 需要时创建。<br>通常我们使用 factory 函数来计算或返回值。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 定义一个模块</div><div class=\"line\">var mainApp = angular.module(<span class=\"string\">\"mainApp\"</span>, []);</div><div class=\"line\"></div><div class=\"line\">// 创建 factory <span class=\"string\">\"MathService\"</span> 用于两数的乘积 provides a method multiply to <span class=\"keyword\">return</span> multiplication of two numbers</div><div class=\"line\">mainApp.factory(<span class=\"string\">'MathService'</span>, function() &#123;</div><div class=\"line\">   var factory = &#123;&#125;;</div><div class=\"line\">   </div><div class=\"line\">   factory.multiply = function(a, b) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> a * b</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">return</span> factory;</div><div class=\"line\">&#125;); </div><div class=\"line\"></div><div class=\"line\">// 在 service 中注入 factory <span class=\"string\">\"MathService\"</span></div><div class=\"line\">mainApp.service(<span class=\"string\">'CalcService'</span>, function(MathService)&#123;</div><div class=\"line\">   this.square = function(a) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> MathService.multiply(a,a);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>provider<br>AngularJS 中通过 provider 创建一个 service、factory等(配置阶段)。<br>Provider 中提供了一个 factory 方法 get()，它用于返回 value/service/factory。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 定义一个模块</div><div class=\"line\">var mainApp = angular.module(<span class=\"string\">\"mainApp\"</span>, []);</div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">// 使用 provider 创建 service 定义一个方法用于计算两数乘积</div><div class=\"line\">mainApp.config(function($provide) &#123;</div><div class=\"line\">   $provide.provider(<span class=\"string\">'MathService'</span>, function() &#123;</div><div class=\"line\">      this.$get = function() &#123;</div><div class=\"line\">         var factory = &#123;&#125;;  </div><div class=\"line\">         </div><div class=\"line\">         factory.multiply = function(a, b) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> a * b; </div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">return</span> factory;</div><div class=\"line\">      &#125;;</div><div class=\"line\">   &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>constant<br>constant(常量)用来在配置阶段传递数值，注意这个常量在配置阶段是不可用的。<br>mainApp.constant(“configParam”, “constant value”);</p>\n<p>以下实例提供了以上几个依赖注入机制的演示。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">   </div><div class=\"line\">   &lt;head&gt;</div><div class=\"line\">      &lt;meta charset=\"utf-8\"&gt;</div><div class=\"line\">      &lt;title&gt;AngularJS  依赖注入&lt;/title&gt;</div><div class=\"line\">   &lt;/head&gt;</div><div class=\"line\">   </div><div class=\"line\">   &lt;body&gt;</div><div class=\"line\">      &lt;h2&gt;AngularJS 简单应用&lt;/h2&gt;</div><div class=\"line\">      </div><div class=\"line\">      &lt;div ng-app = \"mainApp\" ng-controller = \"CalcController\"&gt;</div><div class=\"line\">         &lt;p&gt;输入一个数字: &lt;input type = \"number\" ng-model = \"number\" /&gt;&lt;/p&gt;</div><div class=\"line\">         &lt;button ng-click = \"square()\"&gt;X&lt;sup&gt;2&lt;/sup&gt;&lt;/button&gt;</div><div class=\"line\">         &lt;p&gt;结果: &#123;&#123;result&#125;&#125;&lt;/p&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">      </div><div class=\"line\">      &lt;script src=\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js\"&gt;&lt;/scrip t&gt;</div><div class=\"line\">      </div><div class=\"line\">      &lt;script&gt;</div><div class=\"line\">         var mainApp = angular.module(\"mainApp\", []);</div><div class=\"line\">         </div><div class=\"line\">         mainApp.config(function($provide) &#123;</div><div class=\"line\">            $provide.provider('MathService', function() &#123;</div><div class=\"line\">               this.$get = function() &#123;</div><div class=\"line\">                  var factory = &#123;&#125;;</div><div class=\"line\">                  </div><div class=\"line\">                  factory.multiply = function(a, b) &#123;</div><div class=\"line\">                     return a * b;</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  return factory;</div><div class=\"line\">               &#125;;</div><div class=\"line\">            &#125;);</div><div class=\"line\">         &#125;);</div><div class=\"line\">\t\t\t</div><div class=\"line\">         mainApp.value(\"defaultInput\", 5);</div><div class=\"line\">         </div><div class=\"line\">         mainApp.factory('MathService', function() &#123;</div><div class=\"line\">            var factory = &#123;&#125;;</div><div class=\"line\">            </div><div class=\"line\">            factory.multiply = function(a, b) &#123;</div><div class=\"line\">               return a * b;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return factory;</div><div class=\"line\">         &#125;);</div><div class=\"line\">         </div><div class=\"line\">         mainApp.service('CalcService', function(MathService)&#123;</div><div class=\"line\">            this.square = function(a) &#123;</div><div class=\"line\">               return MathService.multiply(a,a);</div><div class=\"line\">            &#125;</div><div class=\"line\">         &#125;);</div><div class=\"line\">         </div><div class=\"line\">         mainApp.controller('CalcController', function($scope, CalcService, defaultInput) &#123;</div><div class=\"line\">            $scope.number = defaultInput;</div><div class=\"line\">            $scope.result = CalcService.square($scope.number);</div><div class=\"line\"></div><div class=\"line\">            $scope.square = function() &#123;</div><div class=\"line\">               $scope.result = CalcService.square($scope.number);</div><div class=\"line\">            &#125;</div><div class=\"line\">         &#125;);</div><div class=\"line\">\t\t\t</div><div class=\"line\">      &lt;/scrip t&gt;</div><div class=\"line\">      </div><div class=\"line\">   &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"AngularJS-服务-Service\"><a href=\"#AngularJS-服务-Service\" class=\"headerlink\" title=\"AngularJS 服务(Service)\"></a>AngularJS 服务(Service)</h2><p>AngularJS 中你可以创建自己的服务，或使用内建服务。<br>什么是服务？<br>在 AngularJS 中，服务是一个函数或对象，可在你的 AngularJS 应用中使用。<br>AngularJS 内建了30 多个服务。<br>有个 $location 服务，它可以返回当前页面的 URL 地址。<br>实例<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(<span class=\"string\">'myApp'</span>, []);</div><div class=\"line\">app.controller(<span class=\"string\">'customersCtrl'</span>, function($scope, $location) &#123;</div><div class=\"line\">    $scope.myUrl = $location.absUrl();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>$http 服务<br>$http 是 AngularJS 应用中最常用的服务。 服务向服务器发送请求，应用响应服务器传送过来的数据。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(<span class=\"string\">'myApp'</span>, []);</div><div class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, function($scope, $http) &#123;</div><div class=\"line\">    $http.get(<span class=\"string\">\"welcome.htm\"</span>).then(function (response) &#123;</div><div class=\"line\">        $scope.myWelcome = response.data;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>$timeout 服务<br>AngularJS $timeout 服务对应了 JS window.setTimeout 函数。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var app = angular.module(<span class=\"string\">'myApp'</span>, []);</div><div class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, function($scope, $timeout) &#123;</div><div class=\"line\">    $scope.myHeader = <span class=\"string\">\"Hello World!\"</span>;</div><div class=\"line\">    $timeout(function () &#123;</div><div class=\"line\">        $scope.myHeader = <span class=\"string\">\"How are you today?\"</span>;</div><div class=\"line\">    &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>$interval 服务<br>AngularJS $interval 服务对应了 JS window.setInterval 函数。</p>\n<p>创建自定义服务<br>你可以创建访问自定义服务，链接到你的模块中：<br>创建名为hexafy 的访问:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.service(<span class=\"string\">'hexafy'</span>, function() &#123;</div><div class=\"line\">    this.myFunc = function (x) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x.toString(<span class=\"number\">16</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>要使用访问自定义服务，需要在定义过滤器的时候独立添加:<br>实例<br>使用自定义的的服务 hexafy 将一个数字转换为16进制数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, function($scope, hexafy) &#123;</div><div class=\"line\">    $scope.hex = hexafy.myFunc(<span class=\"number\">255</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>过滤器中，使用自定义服务<br>当你创建了自定义服务，并连接到你的应用上后，你可以在控制器，指令，过滤器或其他服务中使用它。<br>在过滤器 myFormat 中使用服务 hexafy:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.filter(<span class=\"string\">'myFormat'</span>,[<span class=\"string\">'hexafy'</span>, function(hexafy) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> function(x) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> hexafy.myFunc(x);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure></p>\n<p>在对象数组中获取值时你可以使用过滤器：<br>创建服务 hexafy:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;ul&gt;</div><div class=\"line\">&lt;li ng-repeat=\"x in counts\"&gt;&#123;&#123;x | myFormat&#125;&#125;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>ng-app 指令位于应用的根元素下。<br>对于单页Web应用（single page web application，SPA），应用的根通常为 <html> 元素。<br>一个或多个 ng-controller 指令定义了应用的控制器。每个控制器有他自己的作用域：: 定义的 HTML 元素。<br>AngularJS 在 HTML DOMContentLoaded 事件中自动开始。如果找到 ng-app 指令 ， AngularJS 载入指令中的模块，并将 ng-app 作为应用的根进行编译。<br>应用的根可以是整个页面，或者页面的一小部分，如果是一小部分会更快编译和执行。</p>\n<h2 id=\"AngularJS中的依赖注入\"><a href=\"#AngularJS中的依赖注入\" class=\"headerlink\" title=\"AngularJS中的依赖注入\"></a>AngularJS中的依赖注入</h2><p>1、angular.module()创建、获取、注册angular中的模块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">/ 传递参数不止一个,代表新建模块;空数组代表该模块不依赖其他模块</div><div class=\"line\">var createModule = angular.module(<span class=\"string\">\"myModule\"</span>, []);</div><div class=\"line\"></div><div class=\"line\">// 只有一个参数(模块名),代表获取模块</div><div class=\"line\">// 如果模块不存在,angular框架会抛异常</div><div class=\"line\">var getModule = angular.module(<span class=\"string\">\"myModule\"</span>);</div><div class=\"line\"></div><div class=\"line\">// true,都是同一个模块</div><div class=\"line\">alert(createModule == getModule);</div></pre></td></tr></table></figure></p>\n<p>该函数既可以创建新的模块，也可以获取已有模块，是创建还是获取，通过参数的个数来区分。<br>angular.module(name, [requires], [configFn]);</p>\n<p>name：字符串类型，代表模块的名称；</p>\n<p>requires：字符串的数组，代表该模块依赖的其他模块列表，如果不依赖其他模块，用空数组即可；</p>\n<p>configFn：用来对该模块进行一些配置。</p>\n<p>4、angular中三种声明依赖的方式</p>\n<p>angular提供了3种获取依赖的方式：inference、annotation、inline方式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建myModule模块、注册服务</div><div class=\"line\">var myModule = angular.module(<span class=\"string\">'myModule'</span>, []);</div><div class=\"line\">myModule.service(<span class=\"string\">'myService'</span>, function() &#123;</div><div class=\"line\">\t\t\tthis.my = <span class=\"number\">0</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 获取injector</div><div class=\"line\">var injector = angular.injector([<span class=\"string\">\"myModule\"</span>]);</div><div class=\"line\"></div><div class=\"line\">// 第一种inference</div><div class=\"line\">injector.invoke(function(myService)&#123;alert(myService.my);&#125;);</div><div class=\"line\"></div><div class=\"line\">// 第二种annotation</div><div class=\"line\">function explicit(serviceA) &#123;alert(serviceA.my);&#125;;</div><div class=\"line\">explicit.$inject = [<span class=\"string\">'myService'</span>];</div><div class=\"line\">injector.invoke(explicit);</div><div class=\"line\"></div><div class=\"line\">// 第三种inline</div><div class=\"line\">injector.invoke([<span class=\"string\">'myService'</span>, function(serviceA)&#123;alert(serviceA.my);&#125;]);</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://blog.csdn.net/renfufei/article/details/<span class=\"number\">19038123</span></div></pre></td></tr></table></figure>\n<p>依赖注解 | Dependency Annotation<br>injector 怎么知道需要注入何种 service 呢?<br>为了解决依赖关系,应用程序开发者需要提供 injector 需要的 annotation 信息。在 Angular 中,某些API函数通过使用 injector 来调用,请按照API文档。injector 需要知道注入哪些服务给函数。下面是通过 service name 信息对代码进行注解的三种等价方式。他们都是等价的，你可以在适当的地方互换使用.</p>\n<p>推断依赖关系 | Inferring Dependencies<br>最简单的获取依赖的方式,就是让函数参数名和依赖的名字一致。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function MyController($scope, greeter) &#123;  </div><div class=\"line\">  ...  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>给定一个 function, injector 通过检查函数声明和提取参数名称可以推断出 service 的名称 。在上面的例子中, $scope 和 greeter 是需要注入 function 的两个 services。<br>虽然简单直接, 但这种方法在 JavaScript 压缩/混淆 时会失效,因为会重命名方法的参数名。这使得这种注解方式只适用于 pretotyping, 或者 demo 程序中。</p>\n<p>$inject 注解 | $inject Annotation<br>为了可以在压缩代码后依然可以注入正确的 services, 函数需要通过 $inject 属性来注解. $inject 属性是一个数组,包含 需要注入的 service 名字.</p>\n<p>var MyController = function(renamed$scope, renamedGreeter) {<br>}<br>MyController[‘$inject’] = [‘$scope’, ‘greeter’];  </p>\n<p>在这种情况下,$inject数组中的值的顺序必须和要注入的参数的顺序一致。使用上面的代码片段作为一个例子, ‘$scope’ 将注入到 “renamed$scope”, 而“greeter” 将注入到 “renamedGreeter”。再次提醒注意 $inject 注解必须和 函数声明时的实际参数保持同步(顺序,个数…)。<br>对于 controller 声明,这种注解方法是很有用的,因为它将注解信息赋给了 function。</p>\n<p>简介AngularJS中使用factory和service的方法<br>AngularJS支持使用服务的体系结构“关注点分离”的概念。服务是JavaScript函数，并负责只做一个特定的任务。这也使得他们即维护和测试的单独实体。控制器，过滤器可以调用它们作为需求的基础。服务使用AngularJS的依赖注入机制注入正常。<br>AngularJS提供例如许多内在的服务，如：$http, $route, $window, $location等。每个服务负责例如一个特定的任务，$http是用来创建AJAX调用，以获得服务器的数据。 $route用来定义路由信息等。内置的服务总是前缀$符号。<br>有两种方法来创建服务。<br>    工厂<br>    服务<br>使用工厂方法<br>使用工厂方法，我们先定义一个工厂，然后分配方法给它。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var mainApp = angular.module(<span class=\"string\">\"mainApp\"</span>, []);</div><div class=\"line\">mainApp.factory(<span class=\"string\">'MathService'</span>, function() &#123;   </div><div class=\"line\">  var factory = &#123;&#125;; </div><div class=\"line\">  factory.multiply = function(a, b) &#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> a * b </div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> factory;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>   使用服务方法<br>使用服务的方法，我们定义了一个服务，然后分配方法。还注入已经可用的服务。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mainApp.service(<span class=\"string\">'CalcService'</span>, function(MathService)&#123;</div><div class=\"line\">  this.square = function(a) &#123; </div><div class=\"line\"> <span class=\"keyword\">return</span> MathService.multiply(a,a); </div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>$rootScope</p>\n<p>一个网站中有很多页面都要判断登录状态 ， 我之前是直接在启动的时候查登录状态，并挂在$rootScope上，然后各个页面判断登录状态的操作逻辑直接与$rootScope对应属性双向绑定。 这样就不用事件传递了 ，如果涉及逻辑操作 ，还是建议放在服务里面。 services 相当于业务处理模块，而$rootScope 相当于全局变量。<br>scope是AngularJS中的作用域(其实就是存储数据的地方)，很类似JavaScript的原型链 。搜索的时候，优先找自己的scope，如果没有找到就沿着作用域链向上搜索，直至到达根作用域rootScope。<br>　　$rootScope是由angularJS加载模块的时候自动创建的，每个模块只会有1个rootScope。rootScope创建好会以服务的形式加入到 $injector中。也就是说通过 $injector.get(“$ rootScope “);能够获取到某个模块的根作用域。更准确的来说，$rootScope是由angularJS的核心模块ng创建的。</p>\n<p>　　scope是html和单个controller之间的桥梁，数据绑定就靠他了。rootscope是各个controller中scope的桥梁。用rootscope定义的值，可以在各个controller中使用</p>\n<p>事件：</p>\n<p>$stateChangeError</p>\n<p>路由状态变化发生错误时触发的事件。参数有：event，toState，toParams，fromState，fromParams，error。以上根据字面意思即可理解，哈哈。</p>\n<p>$stateChangeStart</p>\n<p>路由状态变化发生前触发的事件。参数有：event，toState，toParams，fromState，fromParams。</p>\n<p>$stateChangeSuccess</p>\n<p>路由状态变化正确时触发的事件。参数有：event，toState，toParams，fromState，fromParams。</p>\n<p>$stateNotFound</p>\n<p>路由状态没找到的时候触发的事件。参数有：event，unfoundState，fromState，fromParams。</p>\n<p>state(name,stateConfig);</p>\n<p>注册一个状态，并给定其配置。<br>参数：</p>\n<p>name：状态的名称。</p>\n<p>stateConfig：状态配置对象。配置具有以下各项属性：</p>\n<p>template： string/function，html模板字符串，或者一个返回html模板字符串的函数。</p>\n<p>templateUrl：string/function，模板路径的字符串，或者返回模板路径字符串的函数。</p>\n<p>templateProvider：function，返回html模板字符串或模板路径的服务。</p>\n<p>controller：string/function，新注册一个控制器函数或者一个已注册的控制器的名称字符串。</p>\n<p>controllerProvider：function，返回控制器或者控制器名称的服务</p>\n<p>controllerAs：string，控制器别名。</p>\n<p>parent：string/object，手动指定该状态的父级。</p>\n<p>resolve：object，将会被注入controller去执行的函数，<string,function>形式。</p>\n<p>url：string，当前状态的对应url。</p>\n<p>views：object，视图展示的配置。<string,object>形式。</p>\n<p>abstract：boolean，一个永远不会被激活的抽象的状态，但可以给其子级提供特性的继承。默认是true。</p>\n<p>onEnter：function，当进入一个状态后的回调函数。</p>\n<p>onExit：function，当退出一个状态后的回调函数。</p>\n<p>reloadOnSearch：boolean，如果为false，那么当一个search/query参数改变时不会触发相同的状态，用于当你修改$location.search()的时候不想重新加载页面。默认为true。</p>\n<p>data：object，任意对象数据，用于自定义配置。继承父级状态的data属性。换句话说，通过原型继承可以达到添加一个data数据从而整个树结构都能获取到。</p>\n<p>params：url里的参数值，通过它可以实现页面间的参数传递。</p>\n<p>AngularJS 中的 controllerAs</p>\n<p>Controller 在 AngularJS 应用中可以说是无处不在， 可以在 html 中通过 ngController 指令来指定 Controller ， 语法为：</p>\n<p><ANY\n    ng-controller=\"expression\"><br>    …<br></ANY><br>在 ngRoute 模块中使用， 语法为：</p>\n<p>$routeProvider<br>    .when(‘/my-url’, {<br>        controller: ‘MyController’<br>    });<br>在 ui.route 模块中使用， 语法为：</p>\n<p>$stateProvider<br>    .state(‘myState’, {<br>        controller: ‘MyController’<br>    })<br>上面用法在 AngularJS 的社区、示例程序中非常普遍。 但是， 有一个细节可能很多人没有注意到， 那就是 controllerAs ， 上面的三种用法还可以分别这样使用：</p>\n<p><ANY\n    ng-controller=\"expression as myExpr\"><br>    …<br></ANY><br>$routeProvider<br>    .when(‘/my-url’, {<br>        controller: ‘MyController’,<br>        controllerAs: ‘ctrl’<br>    });<br>$stateProvider<br>    .state(‘myState’, {<br>        controller: ‘MyController’,<br>        controllerAs: ‘ctrl’<br>    })<br>那么， 使用了 controllerAs 有什么区别呢？ 在 AngularJS 的文档中是这样说的：</p>\n<p>one binds methods and properties directly onto the controller using this: ng-controller=”SettingsController1 as settings”<br>one injects $scope into the controller: ng-controller=”SettingsController2”<br>上面的意思是说， 就是使用 controllerAs 将直接绑定 Controller 的属性和方法， 而不使用 controllerAs 将绑定到为 Controller 注入的 $scope 参数， 下面用一个具体的例子来说明一下：</p>\n<p>不使用 controllerAs 指令时， 通常我们这样做：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">angular</div><div class=\"line\">    .module('app', []).</div><div class=\"line\">    controller('TestController', TestController);</div><div class=\"line\"></div><div class=\"line\">TestController.$inject = ['$scope', '$window'];</div><div class=\"line\"></div><div class=\"line\">function TestController($scope, $window) &#123;</div><div class=\"line\">    $scope.name = 'beginor';</div><div class=\"line\">    </div><div class=\"line\">    $scope.greet = greet;</div><div class=\"line\">    </div><div class=\"line\">    function greet() &#123;</div><div class=\"line\">        $window.alert('Hello, ' + $scope.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;div ng-Controller=\"TestController\"&gt;</div><div class=\"line\">    &lt;label&gt;Name:</div><div class=\"line\">        &lt;input type=\"text\" ng-model=\"name\" /&gt;</div><div class=\"line\">    &lt;/label&gt;</div><div class=\"line\">    &lt;button type=\"button\" ng-click=\"greet()\"&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>在 HTML 视图中， 我们绑定的是 $scope 对象的属性和方法， 而不是 TestController 的实例。</p>\n<p>上面的例子在使用 controllerAs 时， 可以修改成这样：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">angular</div><div class=\"line\">    .module('app', []).</div><div class=\"line\">    controller('TestController', TestController);</div><div class=\"line\"></div><div class=\"line\">TestController.$inject = ['$window'];</div><div class=\"line\"></div><div class=\"line\">function TestController($window) &#123;</div><div class=\"line\">    this.name = 'beginor';</div><div class=\"line\">    this.$window = $window;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">TestController.prototype.greet = function () &#123;</div><div class=\"line\">    this.$window.alert('Hello, ' + this.name);</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;div ng-Controller=\"TestController as vm\"&gt;</div><div class=\"line\">    &lt;label&gt;Name:</div><div class=\"line\">        &lt;input type=\"text\" ng-model=\"vm.name\" /&gt;</div><div class=\"line\">    &lt;/label&gt;</div><div class=\"line\">    &lt;button type=\"button\" ng-click=\"vm.greet()\"&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>看到区别了吧， 使用 controllerAs 时， 可以将 Controller 定义成 Javascript 的原型类， 在 HTML 视图中直接绑定原型类的属性和方法。</p>\n<p>这样做的优点是：</p>\n<p>可以使用 Javascript 的原型类， 我们可以使用更加高级的 ES6 或者 TypeScript 来编写 Controller ；<br>避开了所谓的 child scope 原型继承带来的一些问题， 具体可以 参考这里 ；</p>\n<p>angular的uiRouter服务学习(5) — $state.includes()方法<br>$state.includes方法用于判断当前激活状态是否是指定的状态或者是指定状态的子状态.</p>\n<p>$state.includes(stateOrName,params,options)</p>\n<p>$state.includes方法接受三个参数,其中第二和第三个都不知道是干啥的…估计也不太用得到,就暂时不管了…</p>\n<p>stateOrName:字符串(必填). 是一个状态的名字.</p>\n<p>比如当前的激活状态是 “contacts.details.item” </p>\n<p>如下调用:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$state.includes(<span class=\"string\">\"contacts\"</span>);                              //返回true</div><div class=\"line\">$state.includes(<span class=\"string\">\"contacts.details\"</span>);                      //返回true</div><div class=\"line\">$state.includes(<span class=\"string\">\"contacts.details.item\"</span>);                 //返回true</div><div class=\"line\">$state.includes(<span class=\"string\">\"detail\"</span>);                                //返回undefined</div><div class=\"line\">$state.includes(<span class=\"string\">\"item\"</span>);                                  //返回undefined</div></pre></td></tr></table></figure>\n<p>也可以使用glob语法:</p>\n<p>复制代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$state.$current.name = <span class=\"string\">'contacts.details.item.url'</span>;</div><div class=\"line\"> </div><div class=\"line\">$state.includes(<span class=\"string\">\"*.details.*.*\"</span>); // returns true</div><div class=\"line\">$state.includes(<span class=\"string\">\"*.details.**\"</span>); // returns true</div><div class=\"line\">$state.includes(<span class=\"string\">\"**.item.**\"</span>); // returns true</div><div class=\"line\">$state.includes(<span class=\"string\">\"*.details.item.url\"</span>); // returns true</div><div class=\"line\">$state.includes(<span class=\"string\">\"*.details.*.url\"</span>); // returns true</div><div class=\"line\">$state.includes(<span class=\"string\">\"*.details.*\"</span>); // returns undefined</div><div class=\"line\">$state.includes(<span class=\"string\">\"item.**\"</span>); // returns undefined</div></pre></td></tr></table></figure></p>\n<p>复制代码<br>可以用于激活某个tab,让当前项高亮显示:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li ng-class=\"&#123;active:state.includes('dashboard.report')&#125;\"&gt;&lt;a ui-sref=\"dashboard.report\"&gt;Reports&lt;/a&gt;&lt;/li&gt;</div></pre></td></tr></table></figure></p>\n<p>需要注意的是,在表达式里直接用$state是不行的,需要在控制器中把$state赋值给$scope下的变量.这样在表达式里才能使用:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$stateProvider.state(<span class=\"string\">'dashboard'</span>,&#123;</div><div class=\"line\">    url:<span class=\"string\">'/dashboard'</span>,</div><div class=\"line\">    templateUrl:<span class=\"string\">'./tpls/dashboard.html'</span>,</div><div class=\"line\">    controller:function($scope,$state)&#123;</div><div class=\"line\">        $scope.state = $state;              </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>AngularJS ng - swi tch 指令<br>根据选中的值显示对应部分:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div ng-switch=\"myVar\"&gt;</div><div class=\"line\">  &lt;div ng-switch-when=\"runoob\"&gt;</div><div class=\"line\">     &lt;h1&gt;菜鸟教程&lt;/h1&gt;</div><div class=\"line\">     &lt;p&gt;欢迎访问菜鸟教程&lt;/p&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div ng-switch-when=\"google\"&gt;</div><div class=\"line\">     &lt;h1&gt;Google&lt;/h1&gt;</div><div class=\"line\">     &lt;p&gt;欢迎访问Google&lt;/p&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div ng-switch-when=\"taobao\"&gt;</div><div class=\"line\">     &lt;h1&gt;淘宝&lt;/h1&gt;</div><div class=\"line\">     &lt;p&gt;欢迎访问淘宝&lt;/p&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div ng-switch-default&gt;</div><div class=\"line\">     &lt;h1&gt;切换&lt;/h1&gt;</div><div class=\"line\">     &lt;p&gt;选择不同选项显示对应的值。&lt;/p&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>定义和用法<br>ng-sw itch 指令根据表达式显示或隐藏对应的部分。<br>对应的子元素使用 ng-sw itch-when 指令，如果匹配选中选择显示，其他为匹配的则移除。<br>你可以通过使用 ng-s witch-default 指令设置默认选项，如果都没有匹配的情况，默认选项会显示。<br>语法<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;element ng-switch=\"expression\"&gt;</div><div class=\"line\">  &lt;element ng-switch-when=\"value\"&gt;&lt;/element&gt;</div><div class=\"line\">  &lt;element ng-switch-when=\"value\"&gt;&lt;/element&gt;</div><div class=\"line\">  &lt;element ng-switch-when=\"value\"&gt;&lt;/element&gt;</div><div class=\"line\">  &lt;element ng-switch-default&gt;&lt;/element&gt;</div><div class=\"line\">&lt;/element&gt;</div><div class=\"line\">&lt;form&gt; 元素支持该属性。</div></pre></td></tr></table></figure></p>\n<p>在 Angularjs 中 ui-sref 和 $state.go 如何传递参数<br>ui-sref、$state.go 的区别</p>\n<p>ui-sref 一般使用在 &lt; a &gt;…&lt; / a &gt;；</p>\n<p><a ui-sref=\"message-list\">消息中心&lt; / a &gt;</p>\n<p>$state.go(‘someState’)一般使用在 controller里面；</p>\n<p>.controller(‘firstCtrl’, function($scope, $state) {<br>      $state.go(‘login’);<br> });<br>这两个本质上是一样的东西，我们看ui-sref的源码：</p>\n<p>复制代码<br>…<br>element.bind(“click”, function(e) {<br>    var button = e.which || e.button;<br>    if ( !(button &gt; 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr(‘target’)) ) {</p>\n<pre><code>var transition = $timeout(function() {\n  // HERE we call $state.go inside of ui-sref\n  $state.go(ref.state, params, options);\n});\n</code></pre><p>复制代码<br>ui-sref最后调用的还是$state.go()方法<br>首先，要在目标页面定义接受的参数：<br>http://images2015.cnblogs.com/blog/337212/201603/337212-20160318181804412-426985465.png<br>传参，</p>\n<p>ui-sref:<br>http://images2015.cnblogs.com/blog/337212/201603/337212-20160318182142693-1979913166.png<br>http://images2015.cnblogs.com/blog/337212/201603/337212-20160318182359646-1518874208.png</p>\n"},{"title":"Namespace","date":"2016-12-14T06:00:00.000Z","_content":"\n# Jquery插件的开发包括两种：\n\n一种是类级别的插件开发，即给jQuery添加新的全局函数，相当于给jQuery类本身添加方法。jQuery的全局函数就是属于jQuery命名空间的函数，另一种是对象级别的插件开发，即给jQuery对象添加方法。下面就两种函数的开发做详细的说明。\n\n## 1、类级别的插件开发\n\n类级别的插件开发最直接的理解就是给jQuery类添加类方法，可以理解为添加静态方法。典型的例子就是$.AJAX()这个函数，将函数定义于jQuery的命名空间中。关于类级别的插件开发可以采用如下几种形式进行扩展：\n\n### 1.1 添加一个新的全局函数\n\n添加一个全局函数，我们只需如下定义：\n\n\nJava代码\n```python\njQuery.foo = function() {    \nalert('This is a test. This is only a test.');   \n};    \n```\n### 1.2 增加多个全局函数\n\n添加多个全局函数，可采用如下定义：\n\nJava代码\n```python\njQuery.foo = function() {    \nalert('This is a test. This is only a test.');   \n};   \njQuery.bar = function(param) {    \nalert('This function takes a parameter, which is \"' + param + '\".');   \n};    \n```\n调用时和一个函数的一样的:jQuery.foo();jQuery.bar();或者$.foo();$.bar('bar');  \n### 1.3 使用jQuery.extend(object);　\n\nJava代码 \n```python\njQuery.extend({       \nfoo: function() {       \nalert('This is a test. This is only a test.');       \n},       \nbar: function(param) {       \nalert('This function takes a parameter, which is \"' + param +'\".');       \n}      \n});  \n```\n\n### 1.4 使用命名空间\n\n虽然在jQuery命名空间中，我们禁止使用了大量的javaScript函数名和变量名。但是仍然不可避免某些函数或变量名将于其他jQuery插件冲突，因此我们习惯将一些方法封装到另一个自定义的命名空间。\n\nJava代码\n```python\njQuery.myPlugin = {           \nfoo:function() {           \nalert('This is a test. This is only a test.');           \n},           \nbar:function(param) {           \nalert('This function takes a parameter, which is \"' + param + '\".');     \n}          \n};  \n```\n采用命名空间的函数仍然是全局函数，调用时采用的方法：   \n$.myPlugin.foo();          \n$.myPlugin.bar('baz');  \n \n\n通过这个技巧（使用独立的插件名），我们可以避免命名空间内函数的冲突。\n\n## 2、对象级别的插件开发\n\n对象级别的插件开发需要如下的两种形式：、\n\n形式1：  \n\nJava代码\n```python\n(function($){      \n$.fn.extend({      \npluginName:function(opt,callback){      \n /*Our plugin implementation code goes here.  */      \n}      \n})      \n})(jQuery);   \n```\n形式2：\n \n\nJava代码\n```python\n(function($) {        \n$.fn.pluginName = function() {      \n/* Our plugin implementation code goes here. \n};      \n})(jQuery);   \n```\n上面定义了一个jQuery函数,形参是$，函数定义完成之后,把jQuery这个实参传递进去.立即调用执行。这样的好处是,我们在写jQuery插件时,也可以使用$这个别名,而不会与prototype引起冲突.\n### 2.1 在JQuery名称空间下申明一个名字\n\n这是一个单一插件的脚本。如果你的脚本中包含多个插件，或者互逆的插件（例如： $.fn.doSomething() 和 $.fn.undoSomething()），那么你需要声明多个函数名字。但是，通常当我们编写一个插件时，力求仅使用一个名字来包含它的所有内容。我们的示例插件命名为“highlight“    \n\n \n\nJava代码\n```python\n$.fn.hilight = function() {     \n  // Our plugin implementation code goes here.     \n};     \n```\n我们的插件通过这样被调用：   \n$('#myDiv').hilight();     \n \n\n但是如果我们需要分解我们的实现代码为多个函数该怎么办？有很多原因：设计上的需要；这样做更容易或更易读的实现；而且这样更符合面向对象。 这真是一个麻烦事，把功能实现分解成多个函数而不增加多余的命名空间。出于认识到和利用函数是javascript中最基本的类对象，我们可以这样做。就像其他对象一样，函数可以被指定为属性。因此我们已经声明“hilight”为jQuery的属性对象，任何其他的属性或者函数我们需要暴露出来的，都可以在\"hilight\" 函数中被声明属性。稍后继续。\n### 2.2 接受options参数以控制插件的行为\n\n让我们为我们的插件添加功能指定前景色和背景色的功能。我们也许会让选项像一个options对象传递给插件函数。例如：   \n\nJava代码\n```python\n// plugin definition     \n$.fn.hilight = function(options) {     \n  var defaults = {     \n    foreground: 'red',     \n    background: 'yellow'     \n  };     \n  // Extend our default options with those provided.     \n  var opts = $.extend(defaults, options);     \n  // Our plugin implementation code goes here.     \n};    \n```\n我们的插件可以这样被调用：  \n```python\n$('#myDiv').hilight({     \n  foreground: 'blue'     \n});     \n```\n\n### 2.3 暴露插件的默认设置\n\n我们应该对上面代码的一种改进是暴露插件的默认设置。这对于让插件的使用者更容易用较少的代码覆盖和修改插件。接下来我们开始利用函数对象。     \n \n\nJava代码\n```python\n// plugin definition     \n$.fn.hilight = function(options) {     \n  // Extend our default options with those provided.     \n  // Note that the first arg to extend is an empty object -     \n  // this is to keep from overriding our \"defaults\" object.     \n  var opts = $.extend({}, $.fn.hilight.defaults, options);     \n  // Our plugin implementation code goes here.     \n};     \n// plugin defaults - added as a property on our plugin function     \n$.fn.hilight.defaults = {     \n  foreground: 'red',     \n  background: 'yellow'     \n};  \n```\n现在使用者可以包含像这样的一行在他们的脚本里：   \n//这个只需要调用一次，且不一定要在ready块中调用   \n$.fn.hilight.defaults.foreground = 'blue';     \n接下来我们可以像这样使用插件的方法，结果它设置蓝色的前景色：   \n$('#myDiv').hilight();   \n \n\n如你所见，我们允许使用者写一行代码在插件的默认前景色。而且使用者仍然在需要的时候可以有选择的覆盖这些新的默认值：\n```python\n// 覆盖插件缺省的背景颜色 \n\n$.fn.hilight.defaults.foreground = 'blue'; \n\n// ... \n\n// 使用一个新的缺省设置调用插件 \n\n$('.hilightDiv').hilight(); \n\n// ... \n\n// 通过传递配置参数给插件方法来覆盖缺省设置 \n\n$('#green').hilight({ \n\n foreground: 'green' \n\n});  \n```\n\n### 2.4 适当的暴露一些函数\n\n这段将会一步一步对前面那段代码通过有意思的方法扩展你的插件（同时让其他人扩展你的插件）。例如，我们插件的实现里面可以定义一个名叫\"format\"的函数来格式化高亮文本。我们的插件现在看起来像这样，默认的format方法的实现部分在hiligth函数下面。\n\nJava代码\n```python\n// plugin definition     \n$.fn.hilight = function(options) {     \n  // iterate and reformat each matched element     \n  return this.each(function() {     \n    var $this = $(this);     \n    // ...     \n    var markup = $this.html();     \n    // call our format function     \n    markup = $.fn.hilight.format(markup);     \n    $this.html(markup);     \n  });     \n};     \n// define our format function     \n$.fn.hilight.format = function(txt) {     \nreturn '<strong>' + txt + '</strong>';     \n};   \n```\n我们很容易的支持options对象中的其他的属性通过允许一个回调函数来覆盖默认的设置。这是另外一个出色的方法来修改你的插件。这里展示的技巧是进一步有效的暴露format函数进而让他能被重新定义。通过这技巧，是其他人能够传递他们自己设置来覆盖你的插件，换句话说，这样其他人也能够为你的插件写插件。 \n考虑到这个篇文章中我们建立的无用的插件，你也许想知道究竟什么时候这些会有用。一个真实的例子是Cycle插件.这个Cycle插件是一个滑动显示插件，他能支持许多内部变换作用到滚动，滑动，渐变消失等。但是实际上，没有办法定义也许会应用到滑动变化上每种类型的效果。那是这种扩展性有用的地方。 Cycle插件对使用者暴露\"transitions\"对象，使他们添加自己变换定义。插件中定义就像这样：\n$.fn.cycle.transitions = { \n\n// ... \n\n}; \n\n这个技巧使其他人能定义和传递变换设置到Cycle插件。\n\n### 2.5 保持私有函数的私有性\n\n这种技巧暴露你插件一部分来被覆盖是非常强大的。但是你需要仔细思考你实现中暴露的部分。一但被暴露，你需要在头脑中保持任何对于参数或者语义的改动也许会破坏向后的兼容性。一个通理是，如果你不能肯定是否暴露特定的函数，那么你也许不需要那样做。\n\n那么我们怎么定义更多的函数而不搅乱命名空间也不暴露实现呢？这就是闭包的功能。为了演示，我们将会添加另外一个“debug”函数到我们的插件中。这个 debug函数将为输出被选中的元素格式到firebug控制台。为了创建一个闭包，我们将包装整个插件定义在一个函数中。 \n\nJava代码\n```python\n (function($) {     \n  // plugin definition     \n  $.fn.hilight = function(options) {     \n    debug(this);     \n   // ...     \n  };     \n  // private function for debugging     \n  function debug($obj) {     \n    if (window.console && window.console.log)     \n    window.console.log('hilight selection count: ' + $obj.size());     \n  };     \n//  ...     \n})(jQuery);    \n```\n\n我们的“debug”方法不能从外部闭包进入,因此对于我们的实现是私有的。\n### 2.6 支持Metadata插件\n\n在你正在写的插件的基础上，添加对Metadata插件的支持能使他更强大。个人来说，我喜欢这个Metadata插件，因为它让你使用不多的\"markup”覆盖插件的选项（这非常有用当创建例子时）。而且支持它非常简单。更新：注释中有一点优化建议。\n\nJava代码\n```python\n$.fn.hilight = function(options) {     \n  // ...     \n  // build main options before element iteration     \n  var opts = $.extend({}, $.fn.hilight.defaults, options);     \n  return this.each(function() {     \n    var $this = $(this);     \n    // build element specific options     \n    var o = $.meta ? $.extend({}, opts, $this.data()) : opts;     \n    //...   \n```\n 这些变动行做了一些事情：它是测试Metadata插件是否被安装如果它被安装了，它能扩展我们的options对象通过抽取元数据这行作为最后一个参数添加到JQuery.extend，那么它将会覆盖任何其它选项设置。现在我们能从\"markup”处驱动行为,如果我们选择了“markup”：\n\n 调用的时候可以这样写： jQuery.foo(); 或 $.foo(); \n\n \n\nJava代码\n```python\n<!--  markup  -->     \n<div class=\"hilight { background: 'red', foreground: 'white' }\">     \n  Have a nice day!     \n</div>     \n<div class=\"hilight { foreground: 'orange' }\">     \n  Have a nice day!     \n</div>     \n<div class=\"hilight { background: 'green' }\">     \n  Have a nice day!     \n</div>     \n```\n现在我们能高亮哪些div仅使用一行脚本：   \n$('.hilight').hilight();     \n \n\n### 2.7 整合\n下面使我们的例子完成后的代码：\n\n    \n\nJava代码\n```python\n// 创建一个闭包     \n(function($) {     \n  // 插件的定义     \n  $.fn.hilight = function(options) {     \n    debug(this);     \n    // build main options before element iteration     \n    var opts = $.extend({}, $.fn.hilight.defaults, options);     \n    // iterate and reformat each matched element     \n    return this.each(function() {     \n    $this = $(this);     \n // build element specific options     \n var o = $.meta ? $.extend({}, opts, $this.data()) : opts;     \n // update element styles     \n$this.css({     \n   backgroundColor: o.background,     \n  color: o.foreground     \n  });     \n  var markup = $this.html();     \n   // call our format function     \n markup = $.fn.hilight.format(markup);     \n $this.html(markup);     \n    });     \n  };     \n  // 私有函数：debugging     \n  function debug($obj) {     \n    if (window.console && window.console.log)     \n      window.console.log('hilight selection count: ' + $obj.size());     \n  };     \n  // 定义暴露format函数     \n  $.fn.hilight.format = function(txt) {     \n    return '<strong>' + txt + '</strong>';     \n  };     \n  // 插件的defaults     \n  $.fn.hilight.defaults = {     \n    foreground: 'red',     \n    background: 'yellow'     \n  };     \n// 闭包结束     \n})(jQuery);     \n```\n\n这段设计已经让我创建了强大符合规范的插件。我希望它能让你也能做到。","source":"_posts/Namespace.md","raw":"---\ntitle: Namespace\ndate: 2016-12-14 14:00:00\ntags:\n---\n\n# Jquery插件的开发包括两种：\n\n一种是类级别的插件开发，即给jQuery添加新的全局函数，相当于给jQuery类本身添加方法。jQuery的全局函数就是属于jQuery命名空间的函数，另一种是对象级别的插件开发，即给jQuery对象添加方法。下面就两种函数的开发做详细的说明。\n\n## 1、类级别的插件开发\n\n类级别的插件开发最直接的理解就是给jQuery类添加类方法，可以理解为添加静态方法。典型的例子就是$.AJAX()这个函数，将函数定义于jQuery的命名空间中。关于类级别的插件开发可以采用如下几种形式进行扩展：\n\n### 1.1 添加一个新的全局函数\n\n添加一个全局函数，我们只需如下定义：\n\n\nJava代码\n```python\njQuery.foo = function() {    \nalert('This is a test. This is only a test.');   \n};    \n```\n### 1.2 增加多个全局函数\n\n添加多个全局函数，可采用如下定义：\n\nJava代码\n```python\njQuery.foo = function() {    \nalert('This is a test. This is only a test.');   \n};   \njQuery.bar = function(param) {    \nalert('This function takes a parameter, which is \"' + param + '\".');   \n};    \n```\n调用时和一个函数的一样的:jQuery.foo();jQuery.bar();或者$.foo();$.bar('bar');  \n### 1.3 使用jQuery.extend(object);　\n\nJava代码 \n```python\njQuery.extend({       \nfoo: function() {       \nalert('This is a test. This is only a test.');       \n},       \nbar: function(param) {       \nalert('This function takes a parameter, which is \"' + param +'\".');       \n}      \n});  \n```\n\n### 1.4 使用命名空间\n\n虽然在jQuery命名空间中，我们禁止使用了大量的javaScript函数名和变量名。但是仍然不可避免某些函数或变量名将于其他jQuery插件冲突，因此我们习惯将一些方法封装到另一个自定义的命名空间。\n\nJava代码\n```python\njQuery.myPlugin = {           \nfoo:function() {           \nalert('This is a test. This is only a test.');           \n},           \nbar:function(param) {           \nalert('This function takes a parameter, which is \"' + param + '\".');     \n}          \n};  \n```\n采用命名空间的函数仍然是全局函数，调用时采用的方法：   \n$.myPlugin.foo();          \n$.myPlugin.bar('baz');  \n \n\n通过这个技巧（使用独立的插件名），我们可以避免命名空间内函数的冲突。\n\n## 2、对象级别的插件开发\n\n对象级别的插件开发需要如下的两种形式：、\n\n形式1：  \n\nJava代码\n```python\n(function($){      \n$.fn.extend({      \npluginName:function(opt,callback){      \n /*Our plugin implementation code goes here.  */      \n}      \n})      \n})(jQuery);   \n```\n形式2：\n \n\nJava代码\n```python\n(function($) {        \n$.fn.pluginName = function() {      \n/* Our plugin implementation code goes here. \n};      \n})(jQuery);   \n```\n上面定义了一个jQuery函数,形参是$，函数定义完成之后,把jQuery这个实参传递进去.立即调用执行。这样的好处是,我们在写jQuery插件时,也可以使用$这个别名,而不会与prototype引起冲突.\n### 2.1 在JQuery名称空间下申明一个名字\n\n这是一个单一插件的脚本。如果你的脚本中包含多个插件，或者互逆的插件（例如： $.fn.doSomething() 和 $.fn.undoSomething()），那么你需要声明多个函数名字。但是，通常当我们编写一个插件时，力求仅使用一个名字来包含它的所有内容。我们的示例插件命名为“highlight“    \n\n \n\nJava代码\n```python\n$.fn.hilight = function() {     \n  // Our plugin implementation code goes here.     \n};     \n```\n我们的插件通过这样被调用：   \n$('#myDiv').hilight();     \n \n\n但是如果我们需要分解我们的实现代码为多个函数该怎么办？有很多原因：设计上的需要；这样做更容易或更易读的实现；而且这样更符合面向对象。 这真是一个麻烦事，把功能实现分解成多个函数而不增加多余的命名空间。出于认识到和利用函数是javascript中最基本的类对象，我们可以这样做。就像其他对象一样，函数可以被指定为属性。因此我们已经声明“hilight”为jQuery的属性对象，任何其他的属性或者函数我们需要暴露出来的，都可以在\"hilight\" 函数中被声明属性。稍后继续。\n### 2.2 接受options参数以控制插件的行为\n\n让我们为我们的插件添加功能指定前景色和背景色的功能。我们也许会让选项像一个options对象传递给插件函数。例如：   \n\nJava代码\n```python\n// plugin definition     \n$.fn.hilight = function(options) {     \n  var defaults = {     \n    foreground: 'red',     \n    background: 'yellow'     \n  };     \n  // Extend our default options with those provided.     \n  var opts = $.extend(defaults, options);     \n  // Our plugin implementation code goes here.     \n};    \n```\n我们的插件可以这样被调用：  \n```python\n$('#myDiv').hilight({     \n  foreground: 'blue'     \n});     \n```\n\n### 2.3 暴露插件的默认设置\n\n我们应该对上面代码的一种改进是暴露插件的默认设置。这对于让插件的使用者更容易用较少的代码覆盖和修改插件。接下来我们开始利用函数对象。     \n \n\nJava代码\n```python\n// plugin definition     \n$.fn.hilight = function(options) {     \n  // Extend our default options with those provided.     \n  // Note that the first arg to extend is an empty object -     \n  // this is to keep from overriding our \"defaults\" object.     \n  var opts = $.extend({}, $.fn.hilight.defaults, options);     \n  // Our plugin implementation code goes here.     \n};     \n// plugin defaults - added as a property on our plugin function     \n$.fn.hilight.defaults = {     \n  foreground: 'red',     \n  background: 'yellow'     \n};  \n```\n现在使用者可以包含像这样的一行在他们的脚本里：   \n//这个只需要调用一次，且不一定要在ready块中调用   \n$.fn.hilight.defaults.foreground = 'blue';     \n接下来我们可以像这样使用插件的方法，结果它设置蓝色的前景色：   \n$('#myDiv').hilight();   \n \n\n如你所见，我们允许使用者写一行代码在插件的默认前景色。而且使用者仍然在需要的时候可以有选择的覆盖这些新的默认值：\n```python\n// 覆盖插件缺省的背景颜色 \n\n$.fn.hilight.defaults.foreground = 'blue'; \n\n// ... \n\n// 使用一个新的缺省设置调用插件 \n\n$('.hilightDiv').hilight(); \n\n// ... \n\n// 通过传递配置参数给插件方法来覆盖缺省设置 \n\n$('#green').hilight({ \n\n foreground: 'green' \n\n});  \n```\n\n### 2.4 适当的暴露一些函数\n\n这段将会一步一步对前面那段代码通过有意思的方法扩展你的插件（同时让其他人扩展你的插件）。例如，我们插件的实现里面可以定义一个名叫\"format\"的函数来格式化高亮文本。我们的插件现在看起来像这样，默认的format方法的实现部分在hiligth函数下面。\n\nJava代码\n```python\n// plugin definition     \n$.fn.hilight = function(options) {     \n  // iterate and reformat each matched element     \n  return this.each(function() {     \n    var $this = $(this);     \n    // ...     \n    var markup = $this.html();     \n    // call our format function     \n    markup = $.fn.hilight.format(markup);     \n    $this.html(markup);     \n  });     \n};     \n// define our format function     \n$.fn.hilight.format = function(txt) {     \nreturn '<strong>' + txt + '</strong>';     \n};   \n```\n我们很容易的支持options对象中的其他的属性通过允许一个回调函数来覆盖默认的设置。这是另外一个出色的方法来修改你的插件。这里展示的技巧是进一步有效的暴露format函数进而让他能被重新定义。通过这技巧，是其他人能够传递他们自己设置来覆盖你的插件，换句话说，这样其他人也能够为你的插件写插件。 \n考虑到这个篇文章中我们建立的无用的插件，你也许想知道究竟什么时候这些会有用。一个真实的例子是Cycle插件.这个Cycle插件是一个滑动显示插件，他能支持许多内部变换作用到滚动，滑动，渐变消失等。但是实际上，没有办法定义也许会应用到滑动变化上每种类型的效果。那是这种扩展性有用的地方。 Cycle插件对使用者暴露\"transitions\"对象，使他们添加自己变换定义。插件中定义就像这样：\n$.fn.cycle.transitions = { \n\n// ... \n\n}; \n\n这个技巧使其他人能定义和传递变换设置到Cycle插件。\n\n### 2.5 保持私有函数的私有性\n\n这种技巧暴露你插件一部分来被覆盖是非常强大的。但是你需要仔细思考你实现中暴露的部分。一但被暴露，你需要在头脑中保持任何对于参数或者语义的改动也许会破坏向后的兼容性。一个通理是，如果你不能肯定是否暴露特定的函数，那么你也许不需要那样做。\n\n那么我们怎么定义更多的函数而不搅乱命名空间也不暴露实现呢？这就是闭包的功能。为了演示，我们将会添加另外一个“debug”函数到我们的插件中。这个 debug函数将为输出被选中的元素格式到firebug控制台。为了创建一个闭包，我们将包装整个插件定义在一个函数中。 \n\nJava代码\n```python\n (function($) {     \n  // plugin definition     \n  $.fn.hilight = function(options) {     \n    debug(this);     \n   // ...     \n  };     \n  // private function for debugging     \n  function debug($obj) {     \n    if (window.console && window.console.log)     \n    window.console.log('hilight selection count: ' + $obj.size());     \n  };     \n//  ...     \n})(jQuery);    \n```\n\n我们的“debug”方法不能从外部闭包进入,因此对于我们的实现是私有的。\n### 2.6 支持Metadata插件\n\n在你正在写的插件的基础上，添加对Metadata插件的支持能使他更强大。个人来说，我喜欢这个Metadata插件，因为它让你使用不多的\"markup”覆盖插件的选项（这非常有用当创建例子时）。而且支持它非常简单。更新：注释中有一点优化建议。\n\nJava代码\n```python\n$.fn.hilight = function(options) {     \n  // ...     \n  // build main options before element iteration     \n  var opts = $.extend({}, $.fn.hilight.defaults, options);     \n  return this.each(function() {     \n    var $this = $(this);     \n    // build element specific options     \n    var o = $.meta ? $.extend({}, opts, $this.data()) : opts;     \n    //...   \n```\n 这些变动行做了一些事情：它是测试Metadata插件是否被安装如果它被安装了，它能扩展我们的options对象通过抽取元数据这行作为最后一个参数添加到JQuery.extend，那么它将会覆盖任何其它选项设置。现在我们能从\"markup”处驱动行为,如果我们选择了“markup”：\n\n 调用的时候可以这样写： jQuery.foo(); 或 $.foo(); \n\n \n\nJava代码\n```python\n<!--  markup  -->     \n<div class=\"hilight { background: 'red', foreground: 'white' }\">     \n  Have a nice day!     \n</div>     \n<div class=\"hilight { foreground: 'orange' }\">     \n  Have a nice day!     \n</div>     \n<div class=\"hilight { background: 'green' }\">     \n  Have a nice day!     \n</div>     \n```\n现在我们能高亮哪些div仅使用一行脚本：   \n$('.hilight').hilight();     \n \n\n### 2.7 整合\n下面使我们的例子完成后的代码：\n\n    \n\nJava代码\n```python\n// 创建一个闭包     \n(function($) {     \n  // 插件的定义     \n  $.fn.hilight = function(options) {     \n    debug(this);     \n    // build main options before element iteration     \n    var opts = $.extend({}, $.fn.hilight.defaults, options);     \n    // iterate and reformat each matched element     \n    return this.each(function() {     \n    $this = $(this);     \n // build element specific options     \n var o = $.meta ? $.extend({}, opts, $this.data()) : opts;     \n // update element styles     \n$this.css({     \n   backgroundColor: o.background,     \n  color: o.foreground     \n  });     \n  var markup = $this.html();     \n   // call our format function     \n markup = $.fn.hilight.format(markup);     \n $this.html(markup);     \n    });     \n  };     \n  // 私有函数：debugging     \n  function debug($obj) {     \n    if (window.console && window.console.log)     \n      window.console.log('hilight selection count: ' + $obj.size());     \n  };     \n  // 定义暴露format函数     \n  $.fn.hilight.format = function(txt) {     \n    return '<strong>' + txt + '</strong>';     \n  };     \n  // 插件的defaults     \n  $.fn.hilight.defaults = {     \n    foreground: 'red',     \n    background: 'yellow'     \n  };     \n// 闭包结束     \n})(jQuery);     \n```\n\n这段设计已经让我创建了强大符合规范的插件。我希望它能让你也能做到。","slug":"Namespace","published":1,"updated":"2018-05-16T09:03:16.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2k0006oyffj738hgj7","content":"<h1 id=\"Jquery插件的开发包括两种：\"><a href=\"#Jquery插件的开发包括两种：\" class=\"headerlink\" title=\"Jquery插件的开发包括两种：\"></a>Jquery插件的开发包括两种：</h1><p>一种是类级别的插件开发，即给jQuery添加新的全局函数，相当于给jQuery类本身添加方法。jQuery的全局函数就是属于jQuery命名空间的函数，另一种是对象级别的插件开发，即给jQuery对象添加方法。下面就两种函数的开发做详细的说明。</p>\n<h2 id=\"1、类级别的插件开发\"><a href=\"#1、类级别的插件开发\" class=\"headerlink\" title=\"1、类级别的插件开发\"></a>1、类级别的插件开发</h2><p>类级别的插件开发最直接的理解就是给jQuery类添加类方法，可以理解为添加静态方法。典型的例子就是$.AJAX()这个函数，将函数定义于jQuery的命名空间中。关于类级别的插件开发可以采用如下几种形式进行扩展：</p>\n<h3 id=\"1-1-添加一个新的全局函数\"><a href=\"#1-1-添加一个新的全局函数\" class=\"headerlink\" title=\"1.1 添加一个新的全局函数\"></a>1.1 添加一个新的全局函数</h3><p>添加一个全局函数，我们只需如下定义：</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.foo = function() &#123;    </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);   </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-2-增加多个全局函数\"><a href=\"#1-2-增加多个全局函数\" class=\"headerlink\" title=\"1.2 增加多个全局函数\"></a>1.2 增加多个全局函数</h3><p>添加多个全局函数，可采用如下定义：</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.foo = function() &#123;    </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);   </div><div class=\"line\">&#125;;   </div><div class=\"line\">jQuery.bar = function(param) &#123;    </div><div class=\"line\">alert(<span class=\"string\">'This function takes a parameter, which is \"'</span> + param + <span class=\"string\">'\".'</span>);   </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>调用时和一个函数的一样的:jQuery.foo();jQuery.bar();或者$.foo();$.bar(‘bar’);  </p>\n<h3 id=\"1-3-使用jQuery-extend-object\"><a href=\"#1-3-使用jQuery-extend-object\" class=\"headerlink\" title=\"1.3 使用jQuery.extend(object);　\"></a>1.3 使用jQuery.extend(object);　</h3><p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.extend(&#123;       </div><div class=\"line\">foo: function() &#123;       </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);       </div><div class=\"line\">&#125;,       </div><div class=\"line\">bar: function(param) &#123;       </div><div class=\"line\">alert(<span class=\"string\">'This function takes a parameter, which is \"'</span> + param +<span class=\"string\">'\".'</span>);       </div><div class=\"line\">&#125;      </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-4-使用命名空间\"><a href=\"#1-4-使用命名空间\" class=\"headerlink\" title=\"1.4 使用命名空间\"></a>1.4 使用命名空间</h3><p>虽然在jQuery命名空间中，我们禁止使用了大量的javaScript函数名和变量名。但是仍然不可避免某些函数或变量名将于其他jQuery插件冲突，因此我们习惯将一些方法封装到另一个自定义的命名空间。</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.myPlugin = &#123;           </div><div class=\"line\">foo:function() &#123;           </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);           </div><div class=\"line\">&#125;,           </div><div class=\"line\">bar:function(param) &#123;           </div><div class=\"line\">alert(<span class=\"string\">'This function takes a parameter, which is \"'</span> + param + <span class=\"string\">'\".'</span>);     </div><div class=\"line\">&#125;          </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>采用命名空间的函数仍然是全局函数，调用时采用的方法：<br>$.myPlugin.foo();<br>$.myPlugin.bar(‘baz’);  </p>\n<p>通过这个技巧（使用独立的插件名），我们可以避免命名空间内函数的冲突。</p>\n<h2 id=\"2、对象级别的插件开发\"><a href=\"#2、对象级别的插件开发\" class=\"headerlink\" title=\"2、对象级别的插件开发\"></a>2、对象级别的插件开发</h2><p>对象级别的插件开发需要如下的两种形式：、</p>\n<p>形式1：  </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function($)&#123;      </div><div class=\"line\">$.fn.extend(&#123;      </div><div class=\"line\">pluginName:function(opt,callback)&#123;      </div><div class=\"line\"> /*Our plugin implementation code goes here.  */      </div><div class=\"line\">&#125;      </div><div class=\"line\">&#125;)      </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>形式2：</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function($) &#123;        </div><div class=\"line\">$.fn.pluginName = function() &#123;      </div><div class=\"line\">/* Our plugin implementation code goes here. </div><div class=\"line\">&#125;;      </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>上面定义了一个jQuery函数,形参是$，函数定义完成之后,把jQuery这个实参传递进去.立即调用执行。这样的好处是,我们在写jQuery插件时,也可以使用$这个别名,而不会与prototype引起冲突.</p>\n<h3 id=\"2-1-在JQuery名称空间下申明一个名字\"><a href=\"#2-1-在JQuery名称空间下申明一个名字\" class=\"headerlink\" title=\"2.1 在JQuery名称空间下申明一个名字\"></a>2.1 在JQuery名称空间下申明一个名字</h3><p>这是一个单一插件的脚本。如果你的脚本中包含多个插件，或者互逆的插件（例如： $.fn.doSomething() 和 $.fn.undoSomething()），那么你需要声明多个函数名字。但是，通常当我们编写一个插件时，力求仅使用一个名字来包含它的所有内容。我们的示例插件命名为“highlight“    </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.hilight = function() &#123;     </div><div class=\"line\">  // Our plugin implementation code goes here.     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们的插件通过这样被调用：<br>$(‘#myDiv’).hilight();     </p>\n<p>但是如果我们需要分解我们的实现代码为多个函数该怎么办？有很多原因：设计上的需要；这样做更容易或更易读的实现；而且这样更符合面向对象。 这真是一个麻烦事，把功能实现分解成多个函数而不增加多余的命名空间。出于认识到和利用函数是javascript中最基本的类对象，我们可以这样做。就像其他对象一样，函数可以被指定为属性。因此我们已经声明“hilight”为jQuery的属性对象，任何其他的属性或者函数我们需要暴露出来的，都可以在”hilight” 函数中被声明属性。稍后继续。</p>\n<h3 id=\"2-2-接受options参数以控制插件的行为\"><a href=\"#2-2-接受options参数以控制插件的行为\" class=\"headerlink\" title=\"2.2 接受options参数以控制插件的行为\"></a>2.2 接受options参数以控制插件的行为</h3><p>让我们为我们的插件添加功能指定前景色和背景色的功能。我们也许会让选项像一个options对象传递给插件函数。例如：   </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// plugin definition     </div><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  var defaults = &#123;     </div><div class=\"line\">    foreground: <span class=\"string\">'red'</span>,     </div><div class=\"line\">    background: <span class=\"string\">'yellow'</span>     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // Extend our default options <span class=\"keyword\">with</span> those provided.     </div><div class=\"line\">  var opts = $.extend(defaults, options);     </div><div class=\"line\">  // Our plugin implementation code goes here.     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们的插件可以这样被调用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#myDiv'</span>).hilight(&#123;     </div><div class=\"line\">  foreground: <span class=\"string\">'blue'</span>     </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-暴露插件的默认设置\"><a href=\"#2-3-暴露插件的默认设置\" class=\"headerlink\" title=\"2.3 暴露插件的默认设置\"></a>2.3 暴露插件的默认设置</h3><p>我们应该对上面代码的一种改进是暴露插件的默认设置。这对于让插件的使用者更容易用较少的代码覆盖和修改插件。接下来我们开始利用函数对象。     </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// plugin definition     </div><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  // Extend our default options <span class=\"keyword\">with</span> those provided.     </div><div class=\"line\">  // Note that the first arg to extend <span class=\"keyword\">is</span> an empty object -     </div><div class=\"line\">  // this <span class=\"keyword\">is</span> to keep <span class=\"keyword\">from</span> overriding our <span class=\"string\">\"defaults\"</span> object.     </div><div class=\"line\">  var opts = $.extend(&#123;&#125;, $.fn.hilight.defaults, options);     </div><div class=\"line\">  // Our plugin implementation code goes here.     </div><div class=\"line\">&#125;;     </div><div class=\"line\">// plugin defaults - added <span class=\"keyword\">as</span> a property on our plugin function     </div><div class=\"line\">$.fn.hilight.defaults = &#123;     </div><div class=\"line\">  foreground: <span class=\"string\">'red'</span>,     </div><div class=\"line\">  background: <span class=\"string\">'yellow'</span>     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>现在使用者可以包含像这样的一行在他们的脚本里：<br>//这个只需要调用一次，且不一定要在ready块中调用<br>$.fn.hilight.defaults.foreground = ‘blue’;<br>接下来我们可以像这样使用插件的方法，结果它设置蓝色的前景色：<br>$(‘#myDiv’).hilight();   </p>\n<p>如你所见，我们允许使用者写一行代码在插件的默认前景色。而且使用者仍然在需要的时候可以有选择的覆盖这些新的默认值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 覆盖插件缺省的背景颜色 </div><div class=\"line\"></div><div class=\"line\">$.fn.hilight.defaults.foreground = <span class=\"string\">'blue'</span>; </div><div class=\"line\"></div><div class=\"line\">// ... </div><div class=\"line\"></div><div class=\"line\">// 使用一个新的缺省设置调用插件 </div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.hilightDiv'</span>).hilight(); </div><div class=\"line\"></div><div class=\"line\">// ... </div><div class=\"line\"></div><div class=\"line\">// 通过传递配置参数给插件方法来覆盖缺省设置 </div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#green'</span>).hilight(&#123; </div><div class=\"line\"></div><div class=\"line\"> foreground: <span class=\"string\">'green'</span> </div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-4-适当的暴露一些函数\"><a href=\"#2-4-适当的暴露一些函数\" class=\"headerlink\" title=\"2.4 适当的暴露一些函数\"></a>2.4 适当的暴露一些函数</h3><p>这段将会一步一步对前面那段代码通过有意思的方法扩展你的插件（同时让其他人扩展你的插件）。例如，我们插件的实现里面可以定义一个名叫”format”的函数来格式化高亮文本。我们的插件现在看起来像这样，默认的format方法的实现部分在hiligth函数下面。</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// plugin definition     </div><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  // iterate <span class=\"keyword\">and</span> reformat each matched element     </div><div class=\"line\">  <span class=\"keyword\">return</span> this.each(function() &#123;     </div><div class=\"line\">    var $this = $(this);     </div><div class=\"line\">    // ...     </div><div class=\"line\">    var markup = $this.html();     </div><div class=\"line\">    // call our format function     </div><div class=\"line\">    markup = $.fn.hilight.format(markup);     </div><div class=\"line\">    $this.html(markup);     </div><div class=\"line\">  &#125;);     </div><div class=\"line\">&#125;;     </div><div class=\"line\">// define our format function     </div><div class=\"line\">$.fn.hilight.format = function(txt) &#123;     </div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">'&lt;strong&gt;'</span> + txt + <span class=\"string\">'&lt;/strong&gt;'</span>;     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们很容易的支持options对象中的其他的属性通过允许一个回调函数来覆盖默认的设置。这是另外一个出色的方法来修改你的插件。这里展示的技巧是进一步有效的暴露format函数进而让他能被重新定义。通过这技巧，是其他人能够传递他们自己设置来覆盖你的插件，换句话说，这样其他人也能够为你的插件写插件。<br>考虑到这个篇文章中我们建立的无用的插件，你也许想知道究竟什么时候这些会有用。一个真实的例子是Cycle插件.这个Cycle插件是一个滑动显示插件，他能支持许多内部变换作用到滚动，滑动，渐变消失等。但是实际上，没有办法定义也许会应用到滑动变化上每种类型的效果。那是这种扩展性有用的地方。 Cycle插件对使用者暴露”transitions”对象，使他们添加自己变换定义。插件中定义就像这样：<br>$.fn.cycle.transitions = { </p>\n<p>// … </p>\n<p>}; </p>\n<p>这个技巧使其他人能定义和传递变换设置到Cycle插件。</p>\n<h3 id=\"2-5-保持私有函数的私有性\"><a href=\"#2-5-保持私有函数的私有性\" class=\"headerlink\" title=\"2.5 保持私有函数的私有性\"></a>2.5 保持私有函数的私有性</h3><p>这种技巧暴露你插件一部分来被覆盖是非常强大的。但是你需要仔细思考你实现中暴露的部分。一但被暴露，你需要在头脑中保持任何对于参数或者语义的改动也许会破坏向后的兼容性。一个通理是，如果你不能肯定是否暴露特定的函数，那么你也许不需要那样做。</p>\n<p>那么我们怎么定义更多的函数而不搅乱命名空间也不暴露实现呢？这就是闭包的功能。为了演示，我们将会添加另外一个“debug”函数到我们的插件中。这个 debug函数将为输出被选中的元素格式到firebug控制台。为了创建一个闭包，我们将包装整个插件定义在一个函数中。 </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> (function($) &#123;     </div><div class=\"line\">  // plugin definition     </div><div class=\"line\">  $.fn.hilight = function(options) &#123;     </div><div class=\"line\">    debug(this);     </div><div class=\"line\">   // ...     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // private function <span class=\"keyword\">for</span> debugging     </div><div class=\"line\">  function debug($obj) &#123;     </div><div class=\"line\">    <span class=\"keyword\">if</span> (window.console &amp;&amp; window.console.log)     </div><div class=\"line\">    window.console.log(<span class=\"string\">'hilight selection count: '</span> + $obj.size());     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">//  ...     </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>我们的“debug”方法不能从外部闭包进入,因此对于我们的实现是私有的。</p>\n<h3 id=\"2-6-支持Metadata插件\"><a href=\"#2-6-支持Metadata插件\" class=\"headerlink\" title=\"2.6 支持Metadata插件\"></a>2.6 支持Metadata插件</h3><p>在你正在写的插件的基础上，添加对Metadata插件的支持能使他更强大。个人来说，我喜欢这个Metadata插件，因为它让你使用不多的”markup”覆盖插件的选项（这非常有用当创建例子时）。而且支持它非常简单。更新：注释中有一点优化建议。</p>\n<p>Java代码<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  // ...     </div><div class=\"line\">  // build main options before element iteration     </div><div class=\"line\">  var opts = $.extend(&#123;&#125;, $.fn.hilight.defaults, options);     </div><div class=\"line\">  return this.each(function() &#123;     </div><div class=\"line\">    var $this = $(this);     </div><div class=\"line\">    // build element specific options     </div><div class=\"line\">    var o = $.meta ? $.extend(&#123;&#125;, opts, $this.data()) : opts;     </div><div class=\"line\">    //...</div></pre></td></tr></table></figure></p>\n<p> 这些变动行做了一些事情：它是测试Metadata插件是否被安装如果它被安装了，它能扩展我们的options对象通过抽取元数据这行作为最后一个参数添加到JQuery.extend，那么它将会覆盖任何其它选项设置。现在我们能从”markup”处驱动行为,如果我们选择了“markup”：</p>\n<p> 调用的时候可以这样写： jQuery.foo(); 或 $.foo(); </p>\n<p>Java代码<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--  markup  --&gt;     </div><div class=\"line\">&lt;div class=\"hilight &#123; background: 'red', foreground: 'white' &#125;\"&gt;     </div><div class=\"line\">  Have a nice day!     </div><div class=\"line\">&lt;/div&gt;     </div><div class=\"line\">&lt;div class=\"hilight &#123; foreground: 'orange' &#125;\"&gt;     </div><div class=\"line\">  Have a nice day!     </div><div class=\"line\">&lt;/div&gt;     </div><div class=\"line\">&lt;div class=\"hilight &#123; background: 'green' &#125;\"&gt;     </div><div class=\"line\">  Have a nice day!     </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>现在我们能高亮哪些div仅使用一行脚本：<br>$(‘.hilight’).hilight();     </p>\n<h3 id=\"2-7-整合\"><a href=\"#2-7-整合\" class=\"headerlink\" title=\"2.7 整合\"></a>2.7 整合</h3><p>下面使我们的例子完成后的代码：</p>\n<p>Java代码<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建一个闭包     </div><div class=\"line\">(function($) &#123;     </div><div class=\"line\">  // 插件的定义     </div><div class=\"line\">  $.fn.hilight = function(options) &#123;     </div><div class=\"line\">    debug(this);     </div><div class=\"line\">    // build main options before element iteration     </div><div class=\"line\">    var opts = $.extend(&#123;&#125;, $.fn.hilight.defaults, options);     </div><div class=\"line\">    // iterate and reformat each matched element     </div><div class=\"line\">    return this.each(function() &#123;     </div><div class=\"line\">    $this = $(this);     </div><div class=\"line\"> // build element specific options     </div><div class=\"line\"> var o = $.meta ? $.extend(&#123;&#125;, opts, $this.data()) : opts;     </div><div class=\"line\"> // update element styles     </div><div class=\"line\">$this.css(&#123;     </div><div class=\"line\">   backgroundColor: o.background,     </div><div class=\"line\">  color: o.foreground     </div><div class=\"line\">  &#125;);     </div><div class=\"line\">  var markup = $this.html();     </div><div class=\"line\">   // call our format function     </div><div class=\"line\"> markup = $.fn.hilight.format(markup);     </div><div class=\"line\"> $this.html(markup);     </div><div class=\"line\">    &#125;);     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // 私有函数：debugging     </div><div class=\"line\">  function debug($obj) &#123;     </div><div class=\"line\">    if (window.console &amp;&amp; window.console.log)     </div><div class=\"line\">      window.console.log('hilight selection count: ' + $obj.size());     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // 定义暴露format函数     </div><div class=\"line\">  $.fn.hilight.format = function(txt) &#123;     </div><div class=\"line\">    return '&lt;strong&gt;' + txt + '&lt;/strong&gt;';     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // 插件的defaults     </div><div class=\"line\">  $.fn.hilight.defaults = &#123;     </div><div class=\"line\">    foreground: 'red',     </div><div class=\"line\">    background: 'yellow'     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">// 闭包结束     </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>这段设计已经让我创建了强大符合规范的插件。我希望它能让你也能做到。</p>\n","excerpt":"","more":"<h1 id=\"Jquery插件的开发包括两种：\"><a href=\"#Jquery插件的开发包括两种：\" class=\"headerlink\" title=\"Jquery插件的开发包括两种：\"></a>Jquery插件的开发包括两种：</h1><p>一种是类级别的插件开发，即给jQuery添加新的全局函数，相当于给jQuery类本身添加方法。jQuery的全局函数就是属于jQuery命名空间的函数，另一种是对象级别的插件开发，即给jQuery对象添加方法。下面就两种函数的开发做详细的说明。</p>\n<h2 id=\"1、类级别的插件开发\"><a href=\"#1、类级别的插件开发\" class=\"headerlink\" title=\"1、类级别的插件开发\"></a>1、类级别的插件开发</h2><p>类级别的插件开发最直接的理解就是给jQuery类添加类方法，可以理解为添加静态方法。典型的例子就是$.AJAX()这个函数，将函数定义于jQuery的命名空间中。关于类级别的插件开发可以采用如下几种形式进行扩展：</p>\n<h3 id=\"1-1-添加一个新的全局函数\"><a href=\"#1-1-添加一个新的全局函数\" class=\"headerlink\" title=\"1.1 添加一个新的全局函数\"></a>1.1 添加一个新的全局函数</h3><p>添加一个全局函数，我们只需如下定义：</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.foo = function() &#123;    </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);   </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-2-增加多个全局函数\"><a href=\"#1-2-增加多个全局函数\" class=\"headerlink\" title=\"1.2 增加多个全局函数\"></a>1.2 增加多个全局函数</h3><p>添加多个全局函数，可采用如下定义：</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.foo = function() &#123;    </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);   </div><div class=\"line\">&#125;;   </div><div class=\"line\">jQuery.bar = function(param) &#123;    </div><div class=\"line\">alert(<span class=\"string\">'This function takes a parameter, which is \"'</span> + param + <span class=\"string\">'\".'</span>);   </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>调用时和一个函数的一样的:jQuery.foo();jQuery.bar();或者$.foo();$.bar(‘bar’);  </p>\n<h3 id=\"1-3-使用jQuery-extend-object\"><a href=\"#1-3-使用jQuery-extend-object\" class=\"headerlink\" title=\"1.3 使用jQuery.extend(object);　\"></a>1.3 使用jQuery.extend(object);　</h3><p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.extend(&#123;       </div><div class=\"line\">foo: function() &#123;       </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);       </div><div class=\"line\">&#125;,       </div><div class=\"line\">bar: function(param) &#123;       </div><div class=\"line\">alert(<span class=\"string\">'This function takes a parameter, which is \"'</span> + param +<span class=\"string\">'\".'</span>);       </div><div class=\"line\">&#125;      </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-4-使用命名空间\"><a href=\"#1-4-使用命名空间\" class=\"headerlink\" title=\"1.4 使用命名空间\"></a>1.4 使用命名空间</h3><p>虽然在jQuery命名空间中，我们禁止使用了大量的javaScript函数名和变量名。但是仍然不可避免某些函数或变量名将于其他jQuery插件冲突，因此我们习惯将一些方法封装到另一个自定义的命名空间。</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.myPlugin = &#123;           </div><div class=\"line\">foo:function() &#123;           </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);           </div><div class=\"line\">&#125;,           </div><div class=\"line\">bar:function(param) &#123;           </div><div class=\"line\">alert(<span class=\"string\">'This function takes a parameter, which is \"'</span> + param + <span class=\"string\">'\".'</span>);     </div><div class=\"line\">&#125;          </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>采用命名空间的函数仍然是全局函数，调用时采用的方法：<br>$.myPlugin.foo();<br>$.myPlugin.bar(‘baz’);  </p>\n<p>通过这个技巧（使用独立的插件名），我们可以避免命名空间内函数的冲突。</p>\n<h2 id=\"2、对象级别的插件开发\"><a href=\"#2、对象级别的插件开发\" class=\"headerlink\" title=\"2、对象级别的插件开发\"></a>2、对象级别的插件开发</h2><p>对象级别的插件开发需要如下的两种形式：、</p>\n<p>形式1：  </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function($)&#123;      </div><div class=\"line\">$.fn.extend(&#123;      </div><div class=\"line\">pluginName:function(opt,callback)&#123;      </div><div class=\"line\"> /*Our plugin implementation code goes here.  */      </div><div class=\"line\">&#125;      </div><div class=\"line\">&#125;)      </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>形式2：</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function($) &#123;        </div><div class=\"line\">$.fn.pluginName = function() &#123;      </div><div class=\"line\">/* Our plugin implementation code goes here. </div><div class=\"line\">&#125;;      </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>上面定义了一个jQuery函数,形参是$，函数定义完成之后,把jQuery这个实参传递进去.立即调用执行。这样的好处是,我们在写jQuery插件时,也可以使用$这个别名,而不会与prototype引起冲突.</p>\n<h3 id=\"2-1-在JQuery名称空间下申明一个名字\"><a href=\"#2-1-在JQuery名称空间下申明一个名字\" class=\"headerlink\" title=\"2.1 在JQuery名称空间下申明一个名字\"></a>2.1 在JQuery名称空间下申明一个名字</h3><p>这是一个单一插件的脚本。如果你的脚本中包含多个插件，或者互逆的插件（例如： $.fn.doSomething() 和 $.fn.undoSomething()），那么你需要声明多个函数名字。但是，通常当我们编写一个插件时，力求仅使用一个名字来包含它的所有内容。我们的示例插件命名为“highlight“    </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.hilight = function() &#123;     </div><div class=\"line\">  // Our plugin implementation code goes here.     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们的插件通过这样被调用：<br>$(‘#myDiv’).hilight();     </p>\n<p>但是如果我们需要分解我们的实现代码为多个函数该怎么办？有很多原因：设计上的需要；这样做更容易或更易读的实现；而且这样更符合面向对象。 这真是一个麻烦事，把功能实现分解成多个函数而不增加多余的命名空间。出于认识到和利用函数是javascript中最基本的类对象，我们可以这样做。就像其他对象一样，函数可以被指定为属性。因此我们已经声明“hilight”为jQuery的属性对象，任何其他的属性或者函数我们需要暴露出来的，都可以在”hilight” 函数中被声明属性。稍后继续。</p>\n<h3 id=\"2-2-接受options参数以控制插件的行为\"><a href=\"#2-2-接受options参数以控制插件的行为\" class=\"headerlink\" title=\"2.2 接受options参数以控制插件的行为\"></a>2.2 接受options参数以控制插件的行为</h3><p>让我们为我们的插件添加功能指定前景色和背景色的功能。我们也许会让选项像一个options对象传递给插件函数。例如：   </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// plugin definition     </div><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  var defaults = &#123;     </div><div class=\"line\">    foreground: <span class=\"string\">'red'</span>,     </div><div class=\"line\">    background: <span class=\"string\">'yellow'</span>     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // Extend our default options <span class=\"keyword\">with</span> those provided.     </div><div class=\"line\">  var opts = $.extend(defaults, options);     </div><div class=\"line\">  // Our plugin implementation code goes here.     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们的插件可以这样被调用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#myDiv'</span>).hilight(&#123;     </div><div class=\"line\">  foreground: <span class=\"string\">'blue'</span>     </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-暴露插件的默认设置\"><a href=\"#2-3-暴露插件的默认设置\" class=\"headerlink\" title=\"2.3 暴露插件的默认设置\"></a>2.3 暴露插件的默认设置</h3><p>我们应该对上面代码的一种改进是暴露插件的默认设置。这对于让插件的使用者更容易用较少的代码覆盖和修改插件。接下来我们开始利用函数对象。     </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// plugin definition     </div><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  // Extend our default options <span class=\"keyword\">with</span> those provided.     </div><div class=\"line\">  // Note that the first arg to extend <span class=\"keyword\">is</span> an empty object -     </div><div class=\"line\">  // this <span class=\"keyword\">is</span> to keep <span class=\"keyword\">from</span> overriding our <span class=\"string\">\"defaults\"</span> object.     </div><div class=\"line\">  var opts = $.extend(&#123;&#125;, $.fn.hilight.defaults, options);     </div><div class=\"line\">  // Our plugin implementation code goes here.     </div><div class=\"line\">&#125;;     </div><div class=\"line\">// plugin defaults - added <span class=\"keyword\">as</span> a property on our plugin function     </div><div class=\"line\">$.fn.hilight.defaults = &#123;     </div><div class=\"line\">  foreground: <span class=\"string\">'red'</span>,     </div><div class=\"line\">  background: <span class=\"string\">'yellow'</span>     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>现在使用者可以包含像这样的一行在他们的脚本里：<br>//这个只需要调用一次，且不一定要在ready块中调用<br>$.fn.hilight.defaults.foreground = ‘blue’;<br>接下来我们可以像这样使用插件的方法，结果它设置蓝色的前景色：<br>$(‘#myDiv’).hilight();   </p>\n<p>如你所见，我们允许使用者写一行代码在插件的默认前景色。而且使用者仍然在需要的时候可以有选择的覆盖这些新的默认值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 覆盖插件缺省的背景颜色 </div><div class=\"line\"></div><div class=\"line\">$.fn.hilight.defaults.foreground = <span class=\"string\">'blue'</span>; </div><div class=\"line\"></div><div class=\"line\">// ... </div><div class=\"line\"></div><div class=\"line\">// 使用一个新的缺省设置调用插件 </div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.hilightDiv'</span>).hilight(); </div><div class=\"line\"></div><div class=\"line\">// ... </div><div class=\"line\"></div><div class=\"line\">// 通过传递配置参数给插件方法来覆盖缺省设置 </div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#green'</span>).hilight(&#123; </div><div class=\"line\"></div><div class=\"line\"> foreground: <span class=\"string\">'green'</span> </div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-4-适当的暴露一些函数\"><a href=\"#2-4-适当的暴露一些函数\" class=\"headerlink\" title=\"2.4 适当的暴露一些函数\"></a>2.4 适当的暴露一些函数</h3><p>这段将会一步一步对前面那段代码通过有意思的方法扩展你的插件（同时让其他人扩展你的插件）。例如，我们插件的实现里面可以定义一个名叫”format”的函数来格式化高亮文本。我们的插件现在看起来像这样，默认的format方法的实现部分在hiligth函数下面。</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// plugin definition     </div><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  // iterate <span class=\"keyword\">and</span> reformat each matched element     </div><div class=\"line\">  <span class=\"keyword\">return</span> this.each(function() &#123;     </div><div class=\"line\">    var $this = $(this);     </div><div class=\"line\">    // ...     </div><div class=\"line\">    var markup = $this.html();     </div><div class=\"line\">    // call our format function     </div><div class=\"line\">    markup = $.fn.hilight.format(markup);     </div><div class=\"line\">    $this.html(markup);     </div><div class=\"line\">  &#125;);     </div><div class=\"line\">&#125;;     </div><div class=\"line\">// define our format function     </div><div class=\"line\">$.fn.hilight.format = function(txt) &#123;     </div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">'&lt;strong&gt;'</span> + txt + <span class=\"string\">'&lt;/strong&gt;'</span>;     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们很容易的支持options对象中的其他的属性通过允许一个回调函数来覆盖默认的设置。这是另外一个出色的方法来修改你的插件。这里展示的技巧是进一步有效的暴露format函数进而让他能被重新定义。通过这技巧，是其他人能够传递他们自己设置来覆盖你的插件，换句话说，这样其他人也能够为你的插件写插件。<br>考虑到这个篇文章中我们建立的无用的插件，你也许想知道究竟什么时候这些会有用。一个真实的例子是Cycle插件.这个Cycle插件是一个滑动显示插件，他能支持许多内部变换作用到滚动，滑动，渐变消失等。但是实际上，没有办法定义也许会应用到滑动变化上每种类型的效果。那是这种扩展性有用的地方。 Cycle插件对使用者暴露”transitions”对象，使他们添加自己变换定义。插件中定义就像这样：<br>$.fn.cycle.transitions = { </p>\n<p>// … </p>\n<p>}; </p>\n<p>这个技巧使其他人能定义和传递变换设置到Cycle插件。</p>\n<h3 id=\"2-5-保持私有函数的私有性\"><a href=\"#2-5-保持私有函数的私有性\" class=\"headerlink\" title=\"2.5 保持私有函数的私有性\"></a>2.5 保持私有函数的私有性</h3><p>这种技巧暴露你插件一部分来被覆盖是非常强大的。但是你需要仔细思考你实现中暴露的部分。一但被暴露，你需要在头脑中保持任何对于参数或者语义的改动也许会破坏向后的兼容性。一个通理是，如果你不能肯定是否暴露特定的函数，那么你也许不需要那样做。</p>\n<p>那么我们怎么定义更多的函数而不搅乱命名空间也不暴露实现呢？这就是闭包的功能。为了演示，我们将会添加另外一个“debug”函数到我们的插件中。这个 debug函数将为输出被选中的元素格式到firebug控制台。为了创建一个闭包，我们将包装整个插件定义在一个函数中。 </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> (function($) &#123;     </div><div class=\"line\">  // plugin definition     </div><div class=\"line\">  $.fn.hilight = function(options) &#123;     </div><div class=\"line\">    debug(this);     </div><div class=\"line\">   // ...     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // private function <span class=\"keyword\">for</span> debugging     </div><div class=\"line\">  function debug($obj) &#123;     </div><div class=\"line\">    <span class=\"keyword\">if</span> (window.console &amp;&amp; window.console.log)     </div><div class=\"line\">    window.console.log(<span class=\"string\">'hilight selection count: '</span> + $obj.size());     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">//  ...     </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>我们的“debug”方法不能从外部闭包进入,因此对于我们的实现是私有的。</p>\n<h3 id=\"2-6-支持Metadata插件\"><a href=\"#2-6-支持Metadata插件\" class=\"headerlink\" title=\"2.6 支持Metadata插件\"></a>2.6 支持Metadata插件</h3><p>在你正在写的插件的基础上，添加对Metadata插件的支持能使他更强大。个人来说，我喜欢这个Metadata插件，因为它让你使用不多的”markup”覆盖插件的选项（这非常有用当创建例子时）。而且支持它非常简单。更新：注释中有一点优化建议。</p>\n<p>Java代码<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  // ...     </div><div class=\"line\">  // build main options before element iteration     </div><div class=\"line\">  var opts = $.extend(&#123;&#125;, $.fn.hilight.defaults, options);     </div><div class=\"line\">  return this.each(function() &#123;     </div><div class=\"line\">    var $this = $(this);     </div><div class=\"line\">    // build element specific options     </div><div class=\"line\">    var o = $.meta ? $.extend(&#123;&#125;, opts, $this.data()) : opts;     </div><div class=\"line\">    //...</div></pre></td></tr></table></figure></p>\n<p> 这些变动行做了一些事情：它是测试Metadata插件是否被安装如果它被安装了，它能扩展我们的options对象通过抽取元数据这行作为最后一个参数添加到JQuery.extend，那么它将会覆盖任何其它选项设置。现在我们能从”markup”处驱动行为,如果我们选择了“markup”：</p>\n<p> 调用的时候可以这样写： jQuery.foo(); 或 $.foo(); </p>\n<p>Java代码<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--  markup  --&gt;     </div><div class=\"line\">&lt;div class=\"hilight &#123; background: 'red', foreground: 'white' &#125;\"&gt;     </div><div class=\"line\">  Have a nice day!     </div><div class=\"line\">&lt;/div&gt;     </div><div class=\"line\">&lt;div class=\"hilight &#123; foreground: 'orange' &#125;\"&gt;     </div><div class=\"line\">  Have a nice day!     </div><div class=\"line\">&lt;/div&gt;     </div><div class=\"line\">&lt;div class=\"hilight &#123; background: 'green' &#125;\"&gt;     </div><div class=\"line\">  Have a nice day!     </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>现在我们能高亮哪些div仅使用一行脚本：<br>$(‘.hilight’).hilight();     </p>\n<h3 id=\"2-7-整合\"><a href=\"#2-7-整合\" class=\"headerlink\" title=\"2.7 整合\"></a>2.7 整合</h3><p>下面使我们的例子完成后的代码：</p>\n<p>Java代码<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建一个闭包     </div><div class=\"line\">(function($) &#123;     </div><div class=\"line\">  // 插件的定义     </div><div class=\"line\">  $.fn.hilight = function(options) &#123;     </div><div class=\"line\">    debug(this);     </div><div class=\"line\">    // build main options before element iteration     </div><div class=\"line\">    var opts = $.extend(&#123;&#125;, $.fn.hilight.defaults, options);     </div><div class=\"line\">    // iterate and reformat each matched element     </div><div class=\"line\">    return this.each(function() &#123;     </div><div class=\"line\">    $this = $(this);     </div><div class=\"line\"> // build element specific options     </div><div class=\"line\"> var o = $.meta ? $.extend(&#123;&#125;, opts, $this.data()) : opts;     </div><div class=\"line\"> // update element styles     </div><div class=\"line\">$this.css(&#123;     </div><div class=\"line\">   backgroundColor: o.background,     </div><div class=\"line\">  color: o.foreground     </div><div class=\"line\">  &#125;);     </div><div class=\"line\">  var markup = $this.html();     </div><div class=\"line\">   // call our format function     </div><div class=\"line\"> markup = $.fn.hilight.format(markup);     </div><div class=\"line\"> $this.html(markup);     </div><div class=\"line\">    &#125;);     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // 私有函数：debugging     </div><div class=\"line\">  function debug($obj) &#123;     </div><div class=\"line\">    if (window.console &amp;&amp; window.console.log)     </div><div class=\"line\">      window.console.log('hilight selection count: ' + $obj.size());     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // 定义暴露format函数     </div><div class=\"line\">  $.fn.hilight.format = function(txt) &#123;     </div><div class=\"line\">    return '&lt;strong&gt;' + txt + '&lt;/strong&gt;';     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // 插件的defaults     </div><div class=\"line\">  $.fn.hilight.defaults = &#123;     </div><div class=\"line\">    foreground: 'red',     </div><div class=\"line\">    background: 'yellow'     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">// 闭包结束     </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>这段设计已经让我创建了强大符合规范的插件。我希望它能让你也能做到。</p>\n"},{"title":"Microservice","date":"2017-01-13T02:14:24.000Z","_content":"## Microservice \n什么是微服务\nMartin Fowler是国际著名的OO专家，敏捷开发方法的创始人之一，现为ThoughtWorks公司的首席科学家.福勒（Martin Fowler），在面向对象分析设计、UML、模式、软件开发方法学、XP、重构等方面，都是世界顶级的专家，现为Thought Works公司的首席科学家。Thought Works是一家从事企业应用开发和集成的公司。早在20世纪80年代，Fowler就是使用对象技术构建多层企业应用的倡导者，他著有几本经典书籍： 《企业应用架构模式》、《UML精粹》和《重构》等。—— 百度百科\n\n先来看看传统的web开发方式，通过对比比较容易理解什么是Microservice Architecture。和Microservice相对应的，这种方式一般被称为Monolithic（比较难传神的翻译）。所有的功能打包在一个 WAR包里，基本没有外部依赖（除了容器），部署在一个JEE容器（Tomcat，JBoss，WebLogic）里，包含了 DO/DAO，Service，UI等所有逻辑。\n![image](http://img3.tbcdn.cn/L1/461/1/cb87aabb9b184df0edd6769ef877b4b16b200855.png)\nMonolithic比较适合小项目，优点是：\n\n开发简单直接，集中式管理\n\n基本不会重复开发\n\n功能都在本地，没有分布式的管理开销和调用开销\n\n它的缺点也非常明显，特别对于互联网公司来说（不一一列举了）：\n\n开发效率低：所有的开发在一个项目改代码，递交代码相互等待，代码冲突不断\n\n代码维护难：代码功能耦合在一起，新人不知道何从下手\n\n部署不灵活：构建时间长，任何小修改必须重新构建整个项目，这个过程往往很长\n\n稳定性不高：一个微不足道的小问题，可以导致整个应用挂掉\n\n扩展性不够：无法满足高并发情况下的业务需求\n\n所以，现在主流的设计一般会采用Microservice Architecture，就是基于微服务的架构。简单来说， 微服务的目的是有效的拆分应用，实现敏捷开发和部署 。\n ![image](http://img3.tbcdn.cn/L1/461/1/6a2474878e4c1000335770fe64269269f9211d17.png)\n 用《The art of scalability》一书里提到的scale cube比较容易理解如何拆分。你看，我们叫分库分表，别人总结成了scale cube，这就是抽象的能力啊，把复杂的东西用最简单的概念解释和总结。X轴代表运行多个负载均衡器之后运行的实例，Y轴代表将应用进一步分解为微服务 （分库），数据量大时，还可以用Z轴将服务按数据分区（分表）\n ![image](http://img4.tbcdn.cn/L1/461/1/238adf07b6afdc6ae246e2da83f83ce2e144cbeb.png)\n\n 先看看最官方的定义吧\n\nThe microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are **built around business capabilities** and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services , which may be written in different programming languages and use different data storage technologies.\n-- James Lewis and Martin Fowler\n\n把Martin老头的定义大概的翻译一下就是下面几条，这个定义还是太抽象是不是，那就对了，就是要务虚，都说明白了谁还找他付费咨询啊，这么贵。\n1. 一些列的独立的服务共同组成系统\n2. 单独部署，跑在自己的进程里\n3. 每个服务为独立的业务开发\n4. 分布式的管理\n\nMartin自己也说了，每个人对微服务都可以有自己的理解，不过大概的标准还是有一些的。\n\n分布式服务组成的系统\n\n按照业务而不是技术来划分组织\n\n做有生命的产品而不是项目\n\nSmart endpoints and dumb pipes（我的理解是强服务个体和弱通信）\n\n自动化运维（DevOps）\n\n容错\n\n快速演化\n\nSOA vs Microservice\n\n除了Smart endpoints and dumb pipes都很容易理解对吗？相信很多人都会问一个问题，这是不是就是SOA换了个概念，挂羊头卖狗肉啊，有说法把Microservice叫成 Lightway SOA。也有很多传统砖家跳出来说Microservice就是SOA。其实Martin也没否认SOA和Microservice的关系。\n\n我个人理解，Microservice是SOA的传承，但一个最本质的区别就在于Smart endpoints and dumb pipes，或者说是真正的分布式的、去中心化的。Smart endpoints and dumb pipes本质就是去ESB，把所有的“思考”逻辑包括路由、消息解析等放在服务内部（Smart endpoints），去掉一个大一统的ESB，服务间轻（dumb pipes）通信，是比SOA更彻底的拆分。\n\n客户端如何访问这些服务？\n\n原来的Monolithic方式开发，所有的服务都是本地的，UI可以直接调用，现在按功能拆分成独立的服务，跑在独立的一般都在独立的虚拟机上的 Java进程了。客户端UI如何访问他的？后台有N个服务，前台就需要记住管理N个服务，一个服务下线/更新/升级，前台就要重新部署，这明显不服务我们 拆分的理念，特别当前台是移动应用的时候，通常业务变化的节奏更快。另外，N个小服务的调用也是一个不小的网络开销。还有一般微服务在系统内部，通常是无 状态的，用户登录信息和权限管理最好有一个统一的地方维护管理（OAuth）。\n\n所以，一般在后台N个服务和UI之间一般会一个代理或者叫API Gateway，他的作用包括\n\n提供统一服务入口，让微服务对前台透明\n\n聚合后台的服务，节省流量，提升性能\n\n提供安全，过滤，流控等API管理功能\n\n我的理解其实这个API Gateway可以有很多广义的实现办法，可以是一个软硬一体的盒子，也可以是一个简单的MVC框架，甚至是一个Node.js的服务端。他们最重要的作 用是为前台（通常是移动应用）提供后台服务的聚合，提供一个统一的服务出口，解除他们之间的耦合，不过API Gateway也有可能成为单点故障点或者性能的瓶颈。\n\n一般用过Taobao Open Platform的就能很容易的体会，TAO就是这个API Gateway。\n![image](http://img2.tbcdn.cn/L1/461/1/4da28f2382d64d39ee4942c51636af31e9cc1d0b.png)\n\n服务之间如何通信？\n\n因为所有的微服务都是独立的Java进程跑在独立的虚拟机上，所以服务间的通行就是IPC（inter process communication），已经有很多成熟的方案。现在基本最通用的有两种方式。这几种方式，展开来讲都可以写本书，而且大家一般都比较熟悉细节了， 就不展开讲了。\n\n同步调用\n\nREST（JAX-RS，Spring Boot）\n\nRPC（Thrift, Dubbo）\n\n异步消息调用(Kafka, Notify, MetaQ)\n![image](http://img2.tbcdn.cn/L1/461/1/d7e9a881c8940c216e6c1d8cb3bbbe7407e1e63b.png)\n\nhttps://www.oschina.net/news/70121/microservice","source":"_posts/Microservice.md","raw":"---\ntitle: Microservice\ndate: 2017-01-13 10:14:24\ntags:\n---\n## Microservice \n什么是微服务\nMartin Fowler是国际著名的OO专家，敏捷开发方法的创始人之一，现为ThoughtWorks公司的首席科学家.福勒（Martin Fowler），在面向对象分析设计、UML、模式、软件开发方法学、XP、重构等方面，都是世界顶级的专家，现为Thought Works公司的首席科学家。Thought Works是一家从事企业应用开发和集成的公司。早在20世纪80年代，Fowler就是使用对象技术构建多层企业应用的倡导者，他著有几本经典书籍： 《企业应用架构模式》、《UML精粹》和《重构》等。—— 百度百科\n\n先来看看传统的web开发方式，通过对比比较容易理解什么是Microservice Architecture。和Microservice相对应的，这种方式一般被称为Monolithic（比较难传神的翻译）。所有的功能打包在一个 WAR包里，基本没有外部依赖（除了容器），部署在一个JEE容器（Tomcat，JBoss，WebLogic）里，包含了 DO/DAO，Service，UI等所有逻辑。\n![image](http://img3.tbcdn.cn/L1/461/1/cb87aabb9b184df0edd6769ef877b4b16b200855.png)\nMonolithic比较适合小项目，优点是：\n\n开发简单直接，集中式管理\n\n基本不会重复开发\n\n功能都在本地，没有分布式的管理开销和调用开销\n\n它的缺点也非常明显，特别对于互联网公司来说（不一一列举了）：\n\n开发效率低：所有的开发在一个项目改代码，递交代码相互等待，代码冲突不断\n\n代码维护难：代码功能耦合在一起，新人不知道何从下手\n\n部署不灵活：构建时间长，任何小修改必须重新构建整个项目，这个过程往往很长\n\n稳定性不高：一个微不足道的小问题，可以导致整个应用挂掉\n\n扩展性不够：无法满足高并发情况下的业务需求\n\n所以，现在主流的设计一般会采用Microservice Architecture，就是基于微服务的架构。简单来说， 微服务的目的是有效的拆分应用，实现敏捷开发和部署 。\n ![image](http://img3.tbcdn.cn/L1/461/1/6a2474878e4c1000335770fe64269269f9211d17.png)\n 用《The art of scalability》一书里提到的scale cube比较容易理解如何拆分。你看，我们叫分库分表，别人总结成了scale cube，这就是抽象的能力啊，把复杂的东西用最简单的概念解释和总结。X轴代表运行多个负载均衡器之后运行的实例，Y轴代表将应用进一步分解为微服务 （分库），数据量大时，还可以用Z轴将服务按数据分区（分表）\n ![image](http://img4.tbcdn.cn/L1/461/1/238adf07b6afdc6ae246e2da83f83ce2e144cbeb.png)\n\n 先看看最官方的定义吧\n\nThe microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are **built around business capabilities** and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services , which may be written in different programming languages and use different data storage technologies.\n-- James Lewis and Martin Fowler\n\n把Martin老头的定义大概的翻译一下就是下面几条，这个定义还是太抽象是不是，那就对了，就是要务虚，都说明白了谁还找他付费咨询啊，这么贵。\n1. 一些列的独立的服务共同组成系统\n2. 单独部署，跑在自己的进程里\n3. 每个服务为独立的业务开发\n4. 分布式的管理\n\nMartin自己也说了，每个人对微服务都可以有自己的理解，不过大概的标准还是有一些的。\n\n分布式服务组成的系统\n\n按照业务而不是技术来划分组织\n\n做有生命的产品而不是项目\n\nSmart endpoints and dumb pipes（我的理解是强服务个体和弱通信）\n\n自动化运维（DevOps）\n\n容错\n\n快速演化\n\nSOA vs Microservice\n\n除了Smart endpoints and dumb pipes都很容易理解对吗？相信很多人都会问一个问题，这是不是就是SOA换了个概念，挂羊头卖狗肉啊，有说法把Microservice叫成 Lightway SOA。也有很多传统砖家跳出来说Microservice就是SOA。其实Martin也没否认SOA和Microservice的关系。\n\n我个人理解，Microservice是SOA的传承，但一个最本质的区别就在于Smart endpoints and dumb pipes，或者说是真正的分布式的、去中心化的。Smart endpoints and dumb pipes本质就是去ESB，把所有的“思考”逻辑包括路由、消息解析等放在服务内部（Smart endpoints），去掉一个大一统的ESB，服务间轻（dumb pipes）通信，是比SOA更彻底的拆分。\n\n客户端如何访问这些服务？\n\n原来的Monolithic方式开发，所有的服务都是本地的，UI可以直接调用，现在按功能拆分成独立的服务，跑在独立的一般都在独立的虚拟机上的 Java进程了。客户端UI如何访问他的？后台有N个服务，前台就需要记住管理N个服务，一个服务下线/更新/升级，前台就要重新部署，这明显不服务我们 拆分的理念，特别当前台是移动应用的时候，通常业务变化的节奏更快。另外，N个小服务的调用也是一个不小的网络开销。还有一般微服务在系统内部，通常是无 状态的，用户登录信息和权限管理最好有一个统一的地方维护管理（OAuth）。\n\n所以，一般在后台N个服务和UI之间一般会一个代理或者叫API Gateway，他的作用包括\n\n提供统一服务入口，让微服务对前台透明\n\n聚合后台的服务，节省流量，提升性能\n\n提供安全，过滤，流控等API管理功能\n\n我的理解其实这个API Gateway可以有很多广义的实现办法，可以是一个软硬一体的盒子，也可以是一个简单的MVC框架，甚至是一个Node.js的服务端。他们最重要的作 用是为前台（通常是移动应用）提供后台服务的聚合，提供一个统一的服务出口，解除他们之间的耦合，不过API Gateway也有可能成为单点故障点或者性能的瓶颈。\n\n一般用过Taobao Open Platform的就能很容易的体会，TAO就是这个API Gateway。\n![image](http://img2.tbcdn.cn/L1/461/1/4da28f2382d64d39ee4942c51636af31e9cc1d0b.png)\n\n服务之间如何通信？\n\n因为所有的微服务都是独立的Java进程跑在独立的虚拟机上，所以服务间的通行就是IPC（inter process communication），已经有很多成熟的方案。现在基本最通用的有两种方式。这几种方式，展开来讲都可以写本书，而且大家一般都比较熟悉细节了， 就不展开讲了。\n\n同步调用\n\nREST（JAX-RS，Spring Boot）\n\nRPC（Thrift, Dubbo）\n\n异步消息调用(Kafka, Notify, MetaQ)\n![image](http://img2.tbcdn.cn/L1/461/1/d7e9a881c8940c216e6c1d8cb3bbbe7407e1e63b.png)\n\nhttps://www.oschina.net/news/70121/microservice","slug":"Microservice","published":1,"updated":"2018-05-16T09:03:16.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2m0007oyffz3vg5m8e","content":"<h2 id=\"Microservice\"><a href=\"#Microservice\" class=\"headerlink\" title=\"Microservice\"></a>Microservice</h2><p>什么是微服务<br>Martin Fowler是国际著名的OO专家，敏捷开发方法的创始人之一，现为ThoughtWorks公司的首席科学家.福勒（Martin Fowler），在面向对象分析设计、UML、模式、软件开发方法学、XP、重构等方面，都是世界顶级的专家，现为Thought Works公司的首席科学家。Thought Works是一家从事企业应用开发和集成的公司。早在20世纪80年代，Fowler就是使用对象技术构建多层企业应用的倡导者，他著有几本经典书籍： 《企业应用架构模式》、《UML精粹》和《重构》等。—— 百度百科</p>\n<p>先来看看传统的web开发方式，通过对比比较容易理解什么是Microservice Architecture。和Microservice相对应的，这种方式一般被称为Monolithic（比较难传神的翻译）。所有的功能打包在一个 WAR包里，基本没有外部依赖（除了容器），部署在一个JEE容器（Tomcat，JBoss，WebLogic）里，包含了 DO/DAO，Service，UI等所有逻辑。<br><img src=\"http://img3.tbcdn.cn/L1/461/1/cb87aabb9b184df0edd6769ef877b4b16b200855.png\" alt=\"image\"><br>Monolithic比较适合小项目，优点是：</p>\n<p>开发简单直接，集中式管理</p>\n<p>基本不会重复开发</p>\n<p>功能都在本地，没有分布式的管理开销和调用开销</p>\n<p>它的缺点也非常明显，特别对于互联网公司来说（不一一列举了）：</p>\n<p>开发效率低：所有的开发在一个项目改代码，递交代码相互等待，代码冲突不断</p>\n<p>代码维护难：代码功能耦合在一起，新人不知道何从下手</p>\n<p>部署不灵活：构建时间长，任何小修改必须重新构建整个项目，这个过程往往很长</p>\n<p>稳定性不高：一个微不足道的小问题，可以导致整个应用挂掉</p>\n<p>扩展性不够：无法满足高并发情况下的业务需求</p>\n<p>所以，现在主流的设计一般会采用Microservice Architecture，就是基于微服务的架构。简单来说， 微服务的目的是有效的拆分应用，实现敏捷开发和部署 。<br> <img src=\"http://img3.tbcdn.cn/L1/461/1/6a2474878e4c1000335770fe64269269f9211d17.png\" alt=\"image\"><br> 用《The art of scalability》一书里提到的scale cube比较容易理解如何拆分。你看，我们叫分库分表，别人总结成了scale cube，这就是抽象的能力啊，把复杂的东西用最简单的概念解释和总结。X轴代表运行多个负载均衡器之后运行的实例，Y轴代表将应用进一步分解为微服务 （分库），数据量大时，还可以用Z轴将服务按数据分区（分表）<br> <img src=\"http://img4.tbcdn.cn/L1/461/1/238adf07b6afdc6ae246e2da83f83ce2e144cbeb.png\" alt=\"image\"></p>\n<p> 先看看最官方的定义吧</p>\n<p>The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are <strong>built around business capabilities</strong> and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services , which may be written in different programming languages and use different data storage technologies.<br>– James Lewis and Martin Fowler</p>\n<p>把Martin老头的定义大概的翻译一下就是下面几条，这个定义还是太抽象是不是，那就对了，就是要务虚，都说明白了谁还找他付费咨询啊，这么贵。</p>\n<ol>\n<li>一些列的独立的服务共同组成系统</li>\n<li>单独部署，跑在自己的进程里</li>\n<li>每个服务为独立的业务开发</li>\n<li>分布式的管理</li>\n</ol>\n<p>Martin自己也说了，每个人对微服务都可以有自己的理解，不过大概的标准还是有一些的。</p>\n<p>分布式服务组成的系统</p>\n<p>按照业务而不是技术来划分组织</p>\n<p>做有生命的产品而不是项目</p>\n<p>Smart endpoints and dumb pipes（我的理解是强服务个体和弱通信）</p>\n<p>自动化运维（DevOps）</p>\n<p>容错</p>\n<p>快速演化</p>\n<p>SOA vs Microservice</p>\n<p>除了Smart endpoints and dumb pipes都很容易理解对吗？相信很多人都会问一个问题，这是不是就是SOA换了个概念，挂羊头卖狗肉啊，有说法把Microservice叫成 Lightway SOA。也有很多传统砖家跳出来说Microservice就是SOA。其实Martin也没否认SOA和Microservice的关系。</p>\n<p>我个人理解，Microservice是SOA的传承，但一个最本质的区别就在于Smart endpoints and dumb pipes，或者说是真正的分布式的、去中心化的。Smart endpoints and dumb pipes本质就是去ESB，把所有的“思考”逻辑包括路由、消息解析等放在服务内部（Smart endpoints），去掉一个大一统的ESB，服务间轻（dumb pipes）通信，是比SOA更彻底的拆分。</p>\n<p>客户端如何访问这些服务？</p>\n<p>原来的Monolithic方式开发，所有的服务都是本地的，UI可以直接调用，现在按功能拆分成独立的服务，跑在独立的一般都在独立的虚拟机上的 Java进程了。客户端UI如何访问他的？后台有N个服务，前台就需要记住管理N个服务，一个服务下线/更新/升级，前台就要重新部署，这明显不服务我们 拆分的理念，特别当前台是移动应用的时候，通常业务变化的节奏更快。另外，N个小服务的调用也是一个不小的网络开销。还有一般微服务在系统内部，通常是无 状态的，用户登录信息和权限管理最好有一个统一的地方维护管理（OAuth）。</p>\n<p>所以，一般在后台N个服务和UI之间一般会一个代理或者叫API Gateway，他的作用包括</p>\n<p>提供统一服务入口，让微服务对前台透明</p>\n<p>聚合后台的服务，节省流量，提升性能</p>\n<p>提供安全，过滤，流控等API管理功能</p>\n<p>我的理解其实这个API Gateway可以有很多广义的实现办法，可以是一个软硬一体的盒子，也可以是一个简单的MVC框架，甚至是一个Node.js的服务端。他们最重要的作 用是为前台（通常是移动应用）提供后台服务的聚合，提供一个统一的服务出口，解除他们之间的耦合，不过API Gateway也有可能成为单点故障点或者性能的瓶颈。</p>\n<p>一般用过Taobao Open Platform的就能很容易的体会，TAO就是这个API Gateway。<br><img src=\"http://img2.tbcdn.cn/L1/461/1/4da28f2382d64d39ee4942c51636af31e9cc1d0b.png\" alt=\"image\"></p>\n<p>服务之间如何通信？</p>\n<p>因为所有的微服务都是独立的Java进程跑在独立的虚拟机上，所以服务间的通行就是IPC（inter process communication），已经有很多成熟的方案。现在基本最通用的有两种方式。这几种方式，展开来讲都可以写本书，而且大家一般都比较熟悉细节了， 就不展开讲了。</p>\n<p>同步调用</p>\n<p>REST（JAX-RS，Spring Boot）</p>\n<p>RPC（Thrift, Dubbo）</p>\n<p>异步消息调用(Kafka, Notify, MetaQ)<br><img src=\"http://img2.tbcdn.cn/L1/461/1/d7e9a881c8940c216e6c1d8cb3bbbe7407e1e63b.png\" alt=\"image\"></p>\n<p><a href=\"https://www.oschina.net/news/70121/microservice\" target=\"_blank\" rel=\"external\">https://www.oschina.net/news/70121/microservice</a></p>\n","excerpt":"","more":"<h2 id=\"Microservice\"><a href=\"#Microservice\" class=\"headerlink\" title=\"Microservice\"></a>Microservice</h2><p>什么是微服务<br>Martin Fowler是国际著名的OO专家，敏捷开发方法的创始人之一，现为ThoughtWorks公司的首席科学家.福勒（Martin Fowler），在面向对象分析设计、UML、模式、软件开发方法学、XP、重构等方面，都是世界顶级的专家，现为Thought Works公司的首席科学家。Thought Works是一家从事企业应用开发和集成的公司。早在20世纪80年代，Fowler就是使用对象技术构建多层企业应用的倡导者，他著有几本经典书籍： 《企业应用架构模式》、《UML精粹》和《重构》等。—— 百度百科</p>\n<p>先来看看传统的web开发方式，通过对比比较容易理解什么是Microservice Architecture。和Microservice相对应的，这种方式一般被称为Monolithic（比较难传神的翻译）。所有的功能打包在一个 WAR包里，基本没有外部依赖（除了容器），部署在一个JEE容器（Tomcat，JBoss，WebLogic）里，包含了 DO/DAO，Service，UI等所有逻辑。<br><img src=\"http://img3.tbcdn.cn/L1/461/1/cb87aabb9b184df0edd6769ef877b4b16b200855.png\" alt=\"image\"><br>Monolithic比较适合小项目，优点是：</p>\n<p>开发简单直接，集中式管理</p>\n<p>基本不会重复开发</p>\n<p>功能都在本地，没有分布式的管理开销和调用开销</p>\n<p>它的缺点也非常明显，特别对于互联网公司来说（不一一列举了）：</p>\n<p>开发效率低：所有的开发在一个项目改代码，递交代码相互等待，代码冲突不断</p>\n<p>代码维护难：代码功能耦合在一起，新人不知道何从下手</p>\n<p>部署不灵活：构建时间长，任何小修改必须重新构建整个项目，这个过程往往很长</p>\n<p>稳定性不高：一个微不足道的小问题，可以导致整个应用挂掉</p>\n<p>扩展性不够：无法满足高并发情况下的业务需求</p>\n<p>所以，现在主流的设计一般会采用Microservice Architecture，就是基于微服务的架构。简单来说， 微服务的目的是有效的拆分应用，实现敏捷开发和部署 。<br> <img src=\"http://img3.tbcdn.cn/L1/461/1/6a2474878e4c1000335770fe64269269f9211d17.png\" alt=\"image\"><br> 用《The art of scalability》一书里提到的scale cube比较容易理解如何拆分。你看，我们叫分库分表，别人总结成了scale cube，这就是抽象的能力啊，把复杂的东西用最简单的概念解释和总结。X轴代表运行多个负载均衡器之后运行的实例，Y轴代表将应用进一步分解为微服务 （分库），数据量大时，还可以用Z轴将服务按数据分区（分表）<br> <img src=\"http://img4.tbcdn.cn/L1/461/1/238adf07b6afdc6ae246e2da83f83ce2e144cbeb.png\" alt=\"image\"></p>\n<p> 先看看最官方的定义吧</p>\n<p>The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are <strong>built around business capabilities</strong> and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services , which may be written in different programming languages and use different data storage technologies.<br>– James Lewis and Martin Fowler</p>\n<p>把Martin老头的定义大概的翻译一下就是下面几条，这个定义还是太抽象是不是，那就对了，就是要务虚，都说明白了谁还找他付费咨询啊，这么贵。</p>\n<ol>\n<li>一些列的独立的服务共同组成系统</li>\n<li>单独部署，跑在自己的进程里</li>\n<li>每个服务为独立的业务开发</li>\n<li>分布式的管理</li>\n</ol>\n<p>Martin自己也说了，每个人对微服务都可以有自己的理解，不过大概的标准还是有一些的。</p>\n<p>分布式服务组成的系统</p>\n<p>按照业务而不是技术来划分组织</p>\n<p>做有生命的产品而不是项目</p>\n<p>Smart endpoints and dumb pipes（我的理解是强服务个体和弱通信）</p>\n<p>自动化运维（DevOps）</p>\n<p>容错</p>\n<p>快速演化</p>\n<p>SOA vs Microservice</p>\n<p>除了Smart endpoints and dumb pipes都很容易理解对吗？相信很多人都会问一个问题，这是不是就是SOA换了个概念，挂羊头卖狗肉啊，有说法把Microservice叫成 Lightway SOA。也有很多传统砖家跳出来说Microservice就是SOA。其实Martin也没否认SOA和Microservice的关系。</p>\n<p>我个人理解，Microservice是SOA的传承，但一个最本质的区别就在于Smart endpoints and dumb pipes，或者说是真正的分布式的、去中心化的。Smart endpoints and dumb pipes本质就是去ESB，把所有的“思考”逻辑包括路由、消息解析等放在服务内部（Smart endpoints），去掉一个大一统的ESB，服务间轻（dumb pipes）通信，是比SOA更彻底的拆分。</p>\n<p>客户端如何访问这些服务？</p>\n<p>原来的Monolithic方式开发，所有的服务都是本地的，UI可以直接调用，现在按功能拆分成独立的服务，跑在独立的一般都在独立的虚拟机上的 Java进程了。客户端UI如何访问他的？后台有N个服务，前台就需要记住管理N个服务，一个服务下线/更新/升级，前台就要重新部署，这明显不服务我们 拆分的理念，特别当前台是移动应用的时候，通常业务变化的节奏更快。另外，N个小服务的调用也是一个不小的网络开销。还有一般微服务在系统内部，通常是无 状态的，用户登录信息和权限管理最好有一个统一的地方维护管理（OAuth）。</p>\n<p>所以，一般在后台N个服务和UI之间一般会一个代理或者叫API Gateway，他的作用包括</p>\n<p>提供统一服务入口，让微服务对前台透明</p>\n<p>聚合后台的服务，节省流量，提升性能</p>\n<p>提供安全，过滤，流控等API管理功能</p>\n<p>我的理解其实这个API Gateway可以有很多广义的实现办法，可以是一个软硬一体的盒子，也可以是一个简单的MVC框架，甚至是一个Node.js的服务端。他们最重要的作 用是为前台（通常是移动应用）提供后台服务的聚合，提供一个统一的服务出口，解除他们之间的耦合，不过API Gateway也有可能成为单点故障点或者性能的瓶颈。</p>\n<p>一般用过Taobao Open Platform的就能很容易的体会，TAO就是这个API Gateway。<br><img src=\"http://img2.tbcdn.cn/L1/461/1/4da28f2382d64d39ee4942c51636af31e9cc1d0b.png\" alt=\"image\"></p>\n<p>服务之间如何通信？</p>\n<p>因为所有的微服务都是独立的Java进程跑在独立的虚拟机上，所以服务间的通行就是IPC（inter process communication），已经有很多成熟的方案。现在基本最通用的有两种方式。这几种方式，展开来讲都可以写本书，而且大家一般都比较熟悉细节了， 就不展开讲了。</p>\n<p>同步调用</p>\n<p>REST（JAX-RS，Spring Boot）</p>\n<p>RPC（Thrift, Dubbo）</p>\n<p>异步消息调用(Kafka, Notify, MetaQ)<br><img src=\"http://img2.tbcdn.cn/L1/461/1/d7e9a881c8940c216e6c1d8cb3bbbe7407e1e63b.png\" alt=\"image\"></p>\n<p><a href=\"https://www.oschina.net/news/70121/microservice\">https://www.oschina.net/news/70121/microservice</a></p>\n"},{"title":"UI-Bootstrap","date":"2017-01-16T05:45:19.000Z","_content":"在ui-Bootstrap中，Buttons控件和Dropdown控件与form表单中的按钮和下拉框名字很像，但实际上这两个控件有新的含义。\n\n先说Buttons，它是一组按钮，用来实现form表单中的单选框和复选框的功能，样式上可以自定义，功能也可以扩展，可以替代单选框和复选框。\nbuttons控件使用uib-btn-checkbox和uib-btn-radio指令，这两个指令可以加在<input >上，也可以加在<button>上，甚至可以加在<lable>上。\n\n对于复选框，可以设置btn-checkbox-false和btn-checkbox-true表示复选框未选中和选中时的值（默认是false和true）。\n\n对于单选框，一组单选框需要绑定同一个ng-model，并且使用uib-btn-radio指定单选框选中时的值。\n\n单选框还有两个可选的属性：\n\n属性名\n\n默认值\n\n备注\n\nuncheckable\n\n \n\n增加这个属性表示单选框选中状态下再次点击时,单选框变为未选中(单选框变成复选框了)\n\nuib-uncheckable\n\nnull\n\n为true时效果等于增加uncheckable属性\n\n再说Dropdown，从外观上看似乎是表单控件< select>\n\nhttp://images2015.cnblogs.com/blog/234349/201607/234349-20160702224158234-1791642801.png\n\n但是实际上这个控件的主要功能是做导航菜单，因此在模板中使用button和ul元素的组合来表现菜单项。\n具体来说，dropdown包括三部分：\n\n1. uib-dropdown 表示当前元素是一个菜单\n\n2. uib-dropdown-toggle 一个展开/收起菜单的按钮。这是可选的部分。\n\n3. uib-dropdown-menu 表示具体的菜单项\n\nuib-dropdown的属性有：\n","source":"_posts/UI-Bootstrap.md","raw":"---\ntitle: UI-Bootstrap\ndate: 2017-01-16 13:45:19\ntags:\n---\n在ui-Bootstrap中，Buttons控件和Dropdown控件与form表单中的按钮和下拉框名字很像，但实际上这两个控件有新的含义。\n\n先说Buttons，它是一组按钮，用来实现form表单中的单选框和复选框的功能，样式上可以自定义，功能也可以扩展，可以替代单选框和复选框。\nbuttons控件使用uib-btn-checkbox和uib-btn-radio指令，这两个指令可以加在<input >上，也可以加在<button>上，甚至可以加在<lable>上。\n\n对于复选框，可以设置btn-checkbox-false和btn-checkbox-true表示复选框未选中和选中时的值（默认是false和true）。\n\n对于单选框，一组单选框需要绑定同一个ng-model，并且使用uib-btn-radio指定单选框选中时的值。\n\n单选框还有两个可选的属性：\n\n属性名\n\n默认值\n\n备注\n\nuncheckable\n\n \n\n增加这个属性表示单选框选中状态下再次点击时,单选框变为未选中(单选框变成复选框了)\n\nuib-uncheckable\n\nnull\n\n为true时效果等于增加uncheckable属性\n\n再说Dropdown，从外观上看似乎是表单控件< select>\n\nhttp://images2015.cnblogs.com/blog/234349/201607/234349-20160702224158234-1791642801.png\n\n但是实际上这个控件的主要功能是做导航菜单，因此在模板中使用button和ul元素的组合来表现菜单项。\n具体来说，dropdown包括三部分：\n\n1. uib-dropdown 表示当前元素是一个菜单\n\n2. uib-dropdown-toggle 一个展开/收起菜单的按钮。这是可选的部分。\n\n3. uib-dropdown-menu 表示具体的菜单项\n\nuib-dropdown的属性有：\n","slug":"UI-Bootstrap","published":1,"updated":"2018-05-16T09:03:16.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2n0008oyff7vbvd8ls","content":"<p>在ui-Bootstrap中，Buttons控件和Dropdown控件与form表单中的按钮和下拉框名字很像，但实际上这两个控件有新的含义。</p>\n<p>先说Buttons，它是一组按钮，用来实现form表单中的单选框和复选框的功能，样式上可以自定义，功能也可以扩展，可以替代单选框和复选框。<br>buttons控件使用uib-btn-checkbox和uib-btn-radio指令，这两个指令可以加在<input>上，也可以加在<button>上，甚至可以加在<lable>上。</lable></button></p>\n<p>对于复选框，可以设置btn-checkbox-false和btn-checkbox-true表示复选框未选中和选中时的值（默认是false和true）。</p>\n<p>对于单选框，一组单选框需要绑定同一个ng-model，并且使用uib-btn-radio指定单选框选中时的值。</p>\n<p>单选框还有两个可选的属性：</p>\n<p>属性名</p>\n<p>默认值</p>\n<p>备注</p>\n<p>uncheckable</p>\n<p>增加这个属性表示单选框选中状态下再次点击时,单选框变为未选中(单选框变成复选框了)</p>\n<p>uib-uncheckable</p>\n<p>null</p>\n<p>为true时效果等于增加uncheckable属性</p>\n<p>再说Dropdown，从外观上看似乎是表单控件&lt; select&gt;</p>\n<p><a href=\"http://images2015.cnblogs.com/blog/234349/201607/234349-20160702224158234-1791642801.png\" target=\"_blank\" rel=\"external\">http://images2015.cnblogs.com/blog/234349/201607/234349-20160702224158234-1791642801.png</a></p>\n<p>但是实际上这个控件的主要功能是做导航菜单，因此在模板中使用button和ul元素的组合来表现菜单项。<br>具体来说，dropdown包括三部分：</p>\n<ol>\n<li><p>uib-dropdown 表示当前元素是一个菜单</p>\n</li>\n<li><p>uib-dropdown-toggle 一个展开/收起菜单的按钮。这是可选的部分。</p>\n</li>\n<li><p>uib-dropdown-menu 表示具体的菜单项</p>\n</li>\n</ol>\n<p>uib-dropdown的属性有：</p>\n","excerpt":"","more":"<p>在ui-Bootstrap中，Buttons控件和Dropdown控件与form表单中的按钮和下拉框名字很像，但实际上这两个控件有新的含义。</p>\n<p>先说Buttons，它是一组按钮，用来实现form表单中的单选框和复选框的功能，样式上可以自定义，功能也可以扩展，可以替代单选框和复选框。<br>buttons控件使用uib-btn-checkbox和uib-btn-radio指令，这两个指令可以加在<input >上，也可以加在<button>上，甚至可以加在<lable>上。</p>\n<p>对于复选框，可以设置btn-checkbox-false和btn-checkbox-true表示复选框未选中和选中时的值（默认是false和true）。</p>\n<p>对于单选框，一组单选框需要绑定同一个ng-model，并且使用uib-btn-radio指定单选框选中时的值。</p>\n<p>单选框还有两个可选的属性：</p>\n<p>属性名</p>\n<p>默认值</p>\n<p>备注</p>\n<p>uncheckable</p>\n<p>增加这个属性表示单选框选中状态下再次点击时,单选框变为未选中(单选框变成复选框了)</p>\n<p>uib-uncheckable</p>\n<p>null</p>\n<p>为true时效果等于增加uncheckable属性</p>\n<p>再说Dropdown，从外观上看似乎是表单控件&lt; select&gt;</p>\n<p><a href=\"http://images2015.cnblogs.com/blog/234349/201607/234349-20160702224158234-1791642801.png\">http://images2015.cnblogs.com/blog/234349/201607/234349-20160702224158234-1791642801.png</a></p>\n<p>但是实际上这个控件的主要功能是做导航菜单，因此在模板中使用button和ul元素的组合来表现菜单项。<br>具体来说，dropdown包括三部分：</p>\n<ol>\n<li><p>uib-dropdown 表示当前元素是一个菜单</p>\n</li>\n<li><p>uib-dropdown-toggle 一个展开/收起菜单的按钮。这是可选的部分。</p>\n</li>\n<li><p>uib-dropdown-menu 表示具体的菜单项</p>\n</li>\n</ol>\n<p>uib-dropdown的属性有：</p>\n"},{"title":"Technical Term","date":"2016-12-14T01:10:25.000Z","_content":"\n\n###模块规范\n\n* CommonJS - 规范了js在任何地方运行，不限于浏览器中，定义的模块为模块引用（require）、模块定义（exports）、模块标识（module）,NodeJs就是基于CommonJs做了一些取舍和补充的重要应用。\n* AMD - 异步模块加载，接口为define(id?,dependencies?,factory),需要声明模块的时候制定所有以来dep，并且作为形参传入factory中，例如definr(['dep1','dep2'],function(dep1,dep2){...});RequireJS实现了AMD规范\n* CMD\n\n###专业术语\n* module bundler - 模块打包\n* flexible - 灵活\n* unbiased - 无偏\n* extensible - 可扩展的\n* framework - 框架\n* Monolithic - [ˌmɒnə'lɪθɪk]整体的,独块巨石的\n \n###概念\n","source":"_posts/Technical-Term.md","raw":"---\ntitle: Technical Term\ndate: 2016-12-14 09:10:25\ntags:\n---\n\n\n###模块规范\n\n* CommonJS - 规范了js在任何地方运行，不限于浏览器中，定义的模块为模块引用（require）、模块定义（exports）、模块标识（module）,NodeJs就是基于CommonJs做了一些取舍和补充的重要应用。\n* AMD - 异步模块加载，接口为define(id?,dependencies?,factory),需要声明模块的时候制定所有以来dep，并且作为形参传入factory中，例如definr(['dep1','dep2'],function(dep1,dep2){...});RequireJS实现了AMD规范\n* CMD\n\n###专业术语\n* module bundler - 模块打包\n* flexible - 灵活\n* unbiased - 无偏\n* extensible - 可扩展的\n* framework - 框架\n* Monolithic - [ˌmɒnə'lɪθɪk]整体的,独块巨石的\n \n###概念\n","slug":"Technical-Term","published":1,"updated":"2018-05-16T09:03:16.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2n0009oyffo2vcieqn","content":"<p>###模块规范</p>\n<ul>\n<li>CommonJS - 规范了js在任何地方运行，不限于浏览器中，定义的模块为模块引用（require）、模块定义（exports）、模块标识（module）,NodeJs就是基于CommonJs做了一些取舍和补充的重要应用。</li>\n<li>AMD - 异步模块加载，接口为define(id?,dependencies?,factory),需要声明模块的时候制定所有以来dep，并且作为形参传入factory中，例如definr([‘dep1’,’dep2’],function(dep1,dep2){…});RequireJS实现了AMD规范</li>\n<li>CMD</li>\n</ul>\n<p>###专业术语</p>\n<ul>\n<li>module bundler - 模块打包</li>\n<li>flexible - 灵活</li>\n<li>unbiased - 无偏</li>\n<li>extensible - 可扩展的</li>\n<li>framework - 框架</li>\n<li>Monolithic - [ˌmɒnə’lɪθɪk]整体的,独块巨石的</li>\n</ul>\n<p>###概念</p>\n","excerpt":"","more":"<p>###模块规范</p>\n<ul>\n<li>CommonJS - 规范了js在任何地方运行，不限于浏览器中，定义的模块为模块引用（require）、模块定义（exports）、模块标识（module）,NodeJs就是基于CommonJs做了一些取舍和补充的重要应用。</li>\n<li>AMD - 异步模块加载，接口为define(id?,dependencies?,factory),需要声明模块的时候制定所有以来dep，并且作为形参传入factory中，例如definr([‘dep1’,’dep2’],function(dep1,dep2){…});RequireJS实现了AMD规范</li>\n<li>CMD</li>\n</ul>\n<p>###专业术语</p>\n<ul>\n<li>module bundler - 模块打包</li>\n<li>flexible - 灵活</li>\n<li>unbiased - 无偏</li>\n<li>extensible - 可扩展的</li>\n<li>framework - 框架</li>\n<li>Monolithic - [ˌmɒnə’lɪθɪk]整体的,独块巨石的</li>\n</ul>\n<p>###概念</p>\n"},{"title":"SpringBoot Help","date":"2017-01-10T06:39:17.000Z","_content":"# Spring Boot MVC\n## 使用Spring Boot\n你可以像使用标准的Java库文件一样使用Spring Boot。简单的将需要的 spring-boot-*.jar 添加到classpath即可。\n Spring Boot不要求任何特殊的工具集成，所以可以使用任何IDE，甚至文本编辑器。\n \n只是，仍然建议使用build工具：Maven 或 Gradle。\n \n    Spring Boot依赖 使用 org.springframework.boot groupId 。\n    通常，让你的Maven POM文件继承 spring-boot-starter-parent，并声明一个或多个 Starter POMs依赖即可。Spring Boot也提供了一个可选的 Maven Plugin来创建可执行的jars。 \n```python\n    <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.4.3.RELEASE</version>\n</parent>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n## 环境准备\n\n一个称手的文本编辑器（例如Vim、Emacs、Sublime Text）或者IDE（Eclipse、Idea Intellij）\nJava环境（JDK 1.7或以上版本）\nMaven 3.0+（Eclipse和Idea IntelliJ内置，如果使用IDE并且不使用命令行工具可以不安装）\n一个最简单的Web应用\n\n## pom配置依赖\n使用Spring Boot框架可以大大加速Web应用的开发过程，首先在Maven项目依赖中引入spring-boot-starter-web：\n\npom.xml\n\n```python\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>org.springframework</groupId>\n    <artifactId>gs-maven</artifactId>\n    <packaging>jar</packaging>\n    <version>0.1.0</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.4.3.RELEASE</version>\n    </parent>\n    <dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-devtools</artifactId>\n        <optional>true</optional>\n    </dependency>\n\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>2.7.0</version>\n        </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-annotations</artifactId>\n        <version>2.7.0</version>\n    </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <fork>true</fork>\n                </configuration>\n            </plugin>\n        </plugins>\n \n    </build>\n\n\n</project>\n```\n\n\n## Controller 含main方法\nSampleController.java\n```python\npackage hello;\n\nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.ui.Model;\nimport org.springframework.context.annotation.ComponentScan;\n\n@RestController\n@Controller\n@ComponentScan\n@EnableAutoConfiguration\n\n\n// @Configuration  \n// @ComponentScan  \npublic class SampleController {\n\n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        return \"Hello World222!\";\n    }\n\n    @RequestMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n\n    @RequestMapping(\"/index\")\n    public String index(Model model){\n \n        model.addAttribute(\"name\",\"Ryan\");\n \n        return \"index\";\n    }\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(SampleController.class, args);\n    }\n\n}\n```\n\n## Controller 不含main 的rest风格\nHelloController.java\n\n```python\npackage hello;\n \nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.ui.Model; \nimport java.util.HashMap;\nimport java.util.Map;\n \n/**\n * Created by miaorf on 2016/6/19.\n */\n@Controller\n@RestController\n@RequestMapping(\"/hello\")\npublic class HelloController {\n \n    @RequestMapping(\"/index\")\n    public String index(Model model){\n \n        model.addAttribute(\"name\",\"Ryan\");\n \n        return \"index\";\n    }\n \n \n    @RequestMapping(\"/json\")\n    @ResponseBody\n    public Map<String,Object> json(){\n        Map<String,Object> map = new HashMap<String,Object>();\n        map.put(\"name\",\"Ryan\");\n        map.put(\"age\",\"18\");\n        map.put(\"sex\",\"man\");\n        return map;\n    }\n}\n```\n\n\n## 运行应用：mvn spring-boot:run或在IDE中运行main()方法，在浏览器中访问http://localhost:8080\n\n## 简单分析\n我们从程序的入口SpringApplication.run(Application.class, args);开始分析：\n\n* SpringApplication是Spring Boot框架中描述Spring应用的类，它的run()方法会创建一个Spring应用上下文（Application Context）。另一方面它会扫描当前应用类路径上的依赖，例如本例中发现spring-webmvc（由 spring-boot-starter-web传递引入）在类路径中，那么Spring Boot会判断这是一个Web应用，并启动一个内嵌的Servlet容器（默认是Tomcat）用于处理HTTP请求。\n\n* Spring WebMvc框架会将Servlet容器里收到的HTTP请求根据路径分发给对应的@Controller类进行处理，@RestController是一类特殊的@Controller，它的返回值直接作为HTTP Response的Body部分返回给浏览器。\n\n* @RequestMapping注解表明该方法处理那些URL对应的HTTP请求，也就是我们常说的URL路由（routing)，请求的分发工作是有Spring完成的。例如上面的代码中http://localhost:8080/ 根路径就被路由至greeting()方法进行处理。如果访问http://localhost:8080/hello ，则会出现404 Not Found错误，因为我们并没有编写任何方法来处理/hello请求。\n\n* 例如HelloController中，method方法匹配的URL是/classPath/methodPath\"。\n\n 提示\n\n可以定义多个@Controller将不同URL的处理方法分散在不同的类中\n\n\n## URL中的变量——PathVariable\n\n在Web应用中URL通常不是一成不变的，例如微博两个不同用户的个人主页对应两个不同的URL:http://weibo.com/user1，http://weibo.com/user2。 我们不可能对于每一个用户都编写一个被@RequestMapping注解的方法来处理其请求，Spring MVC提供了一套机制来处理这种情况：\n```python\n @RequestMapping(\"/users/{username}\")\npublic String userProfile(@PathVariable(\"username\") String username) {\n    return String.format(\"user %s\", username);\n}\n\n@RequestMapping(\"/posts/{id}\")\npublic String post(@PathVariable(\"id\") int id) {\n    return String.format(\"post %d\", id);\n}\n```\n在上述例子中，URL中的变量可以用{variableName}来表示，同时在方法的参数中加上@PathVariable(\"variableName\")，那么当请求被转发给该方法处理时，对应的URL中的变量会被自动赋值给被@PathVariable注解的参数（能够自动根据参数类型赋值，例如上例中的int）。\n\n支持HTTP方法\n\n对于HTTP请求除了其URL，还需要注意它的方法（Method）。例如我们在浏览器中访问一个页面通常是GET方法，而表单的提交一般是POST方法。@Controller中的方法同样需要对其进行区分：\n```python\n @RequestMapping(value = \"/login\", method = RequestMethod.GET)\npublic String loginGet() {\n    return \"Login Page\";\n}\n\n@RequestMapping(value = \"/login\", method = RequestMethod.POST)\npublic String loginPost() {\n    return \"Login Post Request\";\n}\n```\n\n## 模板渲染\n\n在之前所有的@RequestMapping注解的方法中，返回值字符串都被直接传送到浏览器端并显示给用户。但是为了能够呈现更加丰富、美观的页面，我们需要将HTML代码返回给浏览器，浏览器再进行页面的渲染、显示。\n\n一种很直观的方法是在处理请求的方法中，直接返回HTML代码，但是这样做的问题在于——一个复杂的页面HTML代码往往也非常复杂，并且嵌入在Java代码中十分不利于维护。更好的做法是将页面的HTML代码写在模板文件中，渲染后再返回给用户。为了能够进行模板渲染，需要将@RestController改成@Controller：\n```python\n import org.springframework.ui.Model;\n\n@Controller\npublic class HelloController {\n\n    @RequestMapping(\"/hello/{name}\")\n    public String hello(@PathVariable(\"name\") String name, Model model) {\n        model.addAttribute(\"name\", name);\n        return \"hello\"\n    }\n}\n```\n在上述例子中，返回值\"hello\"并非直接将字符串返回给浏览器，而是寻找名字为hello的模板进行渲染，我们使用Thymeleaf模板引擎进行模板渲染，需要引入依赖：\n```python\n <dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n接下来需要在默认的模板文件夹src/main/resources/templates/目录下添加一个模板文件hello.html：\n```python\n <!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title>Getting Started: Serving Web Content</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n</head>\n<body>\n    <p th:text=\"'Hello, ' + ${name} + '!'\" />\n</body>\n</html>\n```\nth:text=\"'Hello, ' + ${name} + '!'\"也就是将我们之前在@Controller方法里添加至Model的属性name进行渲染，并放入<p>标签中（因为th:text是<p>标签的属性）。模板渲染还有更多的用法，请参考Thymeleaf官方文档。\n\n## 处理静态文件\n\n浏览器页面使用HTML作为描述语言，那么必然也脱离不了CSS以及JavaScript。为了能够浏览器能够正确加载类似/css/style.css, /js/main.js等资源，默认情况下我们只需要在src/main/resources/static目录下添加css/style.css和js/main.js文件后，Spring MVC能够自动将他们发布，通过访问/css/style.css, /js/main.js也就可以正确加载这些资源。","source":"_posts/SpringBoot-Help.md","raw":"---\ntitle: SpringBoot Help\ndate: 2017-01-10 14:39:17\ntags:\n---\n# Spring Boot MVC\n## 使用Spring Boot\n你可以像使用标准的Java库文件一样使用Spring Boot。简单的将需要的 spring-boot-*.jar 添加到classpath即可。\n Spring Boot不要求任何特殊的工具集成，所以可以使用任何IDE，甚至文本编辑器。\n \n只是，仍然建议使用build工具：Maven 或 Gradle。\n \n    Spring Boot依赖 使用 org.springframework.boot groupId 。\n    通常，让你的Maven POM文件继承 spring-boot-starter-parent，并声明一个或多个 Starter POMs依赖即可。Spring Boot也提供了一个可选的 Maven Plugin来创建可执行的jars。 \n```python\n    <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.4.3.RELEASE</version>\n</parent>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n## 环境准备\n\n一个称手的文本编辑器（例如Vim、Emacs、Sublime Text）或者IDE（Eclipse、Idea Intellij）\nJava环境（JDK 1.7或以上版本）\nMaven 3.0+（Eclipse和Idea IntelliJ内置，如果使用IDE并且不使用命令行工具可以不安装）\n一个最简单的Web应用\n\n## pom配置依赖\n使用Spring Boot框架可以大大加速Web应用的开发过程，首先在Maven项目依赖中引入spring-boot-starter-web：\n\npom.xml\n\n```python\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>org.springframework</groupId>\n    <artifactId>gs-maven</artifactId>\n    <packaging>jar</packaging>\n    <version>0.1.0</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.4.3.RELEASE</version>\n    </parent>\n    <dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-devtools</artifactId>\n        <optional>true</optional>\n    </dependency>\n\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>2.7.0</version>\n        </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-annotations</artifactId>\n        <version>2.7.0</version>\n    </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <fork>true</fork>\n                </configuration>\n            </plugin>\n        </plugins>\n \n    </build>\n\n\n</project>\n```\n\n\n## Controller 含main方法\nSampleController.java\n```python\npackage hello;\n\nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.ui.Model;\nimport org.springframework.context.annotation.ComponentScan;\n\n@RestController\n@Controller\n@ComponentScan\n@EnableAutoConfiguration\n\n\n// @Configuration  \n// @ComponentScan  \npublic class SampleController {\n\n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        return \"Hello World222!\";\n    }\n\n    @RequestMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n\n    @RequestMapping(\"/index\")\n    public String index(Model model){\n \n        model.addAttribute(\"name\",\"Ryan\");\n \n        return \"index\";\n    }\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(SampleController.class, args);\n    }\n\n}\n```\n\n## Controller 不含main 的rest风格\nHelloController.java\n\n```python\npackage hello;\n \nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.ui.Model; \nimport java.util.HashMap;\nimport java.util.Map;\n \n/**\n * Created by miaorf on 2016/6/19.\n */\n@Controller\n@RestController\n@RequestMapping(\"/hello\")\npublic class HelloController {\n \n    @RequestMapping(\"/index\")\n    public String index(Model model){\n \n        model.addAttribute(\"name\",\"Ryan\");\n \n        return \"index\";\n    }\n \n \n    @RequestMapping(\"/json\")\n    @ResponseBody\n    public Map<String,Object> json(){\n        Map<String,Object> map = new HashMap<String,Object>();\n        map.put(\"name\",\"Ryan\");\n        map.put(\"age\",\"18\");\n        map.put(\"sex\",\"man\");\n        return map;\n    }\n}\n```\n\n\n## 运行应用：mvn spring-boot:run或在IDE中运行main()方法，在浏览器中访问http://localhost:8080\n\n## 简单分析\n我们从程序的入口SpringApplication.run(Application.class, args);开始分析：\n\n* SpringApplication是Spring Boot框架中描述Spring应用的类，它的run()方法会创建一个Spring应用上下文（Application Context）。另一方面它会扫描当前应用类路径上的依赖，例如本例中发现spring-webmvc（由 spring-boot-starter-web传递引入）在类路径中，那么Spring Boot会判断这是一个Web应用，并启动一个内嵌的Servlet容器（默认是Tomcat）用于处理HTTP请求。\n\n* Spring WebMvc框架会将Servlet容器里收到的HTTP请求根据路径分发给对应的@Controller类进行处理，@RestController是一类特殊的@Controller，它的返回值直接作为HTTP Response的Body部分返回给浏览器。\n\n* @RequestMapping注解表明该方法处理那些URL对应的HTTP请求，也就是我们常说的URL路由（routing)，请求的分发工作是有Spring完成的。例如上面的代码中http://localhost:8080/ 根路径就被路由至greeting()方法进行处理。如果访问http://localhost:8080/hello ，则会出现404 Not Found错误，因为我们并没有编写任何方法来处理/hello请求。\n\n* 例如HelloController中，method方法匹配的URL是/classPath/methodPath\"。\n\n 提示\n\n可以定义多个@Controller将不同URL的处理方法分散在不同的类中\n\n\n## URL中的变量——PathVariable\n\n在Web应用中URL通常不是一成不变的，例如微博两个不同用户的个人主页对应两个不同的URL:http://weibo.com/user1，http://weibo.com/user2。 我们不可能对于每一个用户都编写一个被@RequestMapping注解的方法来处理其请求，Spring MVC提供了一套机制来处理这种情况：\n```python\n @RequestMapping(\"/users/{username}\")\npublic String userProfile(@PathVariable(\"username\") String username) {\n    return String.format(\"user %s\", username);\n}\n\n@RequestMapping(\"/posts/{id}\")\npublic String post(@PathVariable(\"id\") int id) {\n    return String.format(\"post %d\", id);\n}\n```\n在上述例子中，URL中的变量可以用{variableName}来表示，同时在方法的参数中加上@PathVariable(\"variableName\")，那么当请求被转发给该方法处理时，对应的URL中的变量会被自动赋值给被@PathVariable注解的参数（能够自动根据参数类型赋值，例如上例中的int）。\n\n支持HTTP方法\n\n对于HTTP请求除了其URL，还需要注意它的方法（Method）。例如我们在浏览器中访问一个页面通常是GET方法，而表单的提交一般是POST方法。@Controller中的方法同样需要对其进行区分：\n```python\n @RequestMapping(value = \"/login\", method = RequestMethod.GET)\npublic String loginGet() {\n    return \"Login Page\";\n}\n\n@RequestMapping(value = \"/login\", method = RequestMethod.POST)\npublic String loginPost() {\n    return \"Login Post Request\";\n}\n```\n\n## 模板渲染\n\n在之前所有的@RequestMapping注解的方法中，返回值字符串都被直接传送到浏览器端并显示给用户。但是为了能够呈现更加丰富、美观的页面，我们需要将HTML代码返回给浏览器，浏览器再进行页面的渲染、显示。\n\n一种很直观的方法是在处理请求的方法中，直接返回HTML代码，但是这样做的问题在于——一个复杂的页面HTML代码往往也非常复杂，并且嵌入在Java代码中十分不利于维护。更好的做法是将页面的HTML代码写在模板文件中，渲染后再返回给用户。为了能够进行模板渲染，需要将@RestController改成@Controller：\n```python\n import org.springframework.ui.Model;\n\n@Controller\npublic class HelloController {\n\n    @RequestMapping(\"/hello/{name}\")\n    public String hello(@PathVariable(\"name\") String name, Model model) {\n        model.addAttribute(\"name\", name);\n        return \"hello\"\n    }\n}\n```\n在上述例子中，返回值\"hello\"并非直接将字符串返回给浏览器，而是寻找名字为hello的模板进行渲染，我们使用Thymeleaf模板引擎进行模板渲染，需要引入依赖：\n```python\n <dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n接下来需要在默认的模板文件夹src/main/resources/templates/目录下添加一个模板文件hello.html：\n```python\n <!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <title>Getting Started: Serving Web Content</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n</head>\n<body>\n    <p th:text=\"'Hello, ' + ${name} + '!'\" />\n</body>\n</html>\n```\nth:text=\"'Hello, ' + ${name} + '!'\"也就是将我们之前在@Controller方法里添加至Model的属性name进行渲染，并放入<p>标签中（因为th:text是<p>标签的属性）。模板渲染还有更多的用法，请参考Thymeleaf官方文档。\n\n## 处理静态文件\n\n浏览器页面使用HTML作为描述语言，那么必然也脱离不了CSS以及JavaScript。为了能够浏览器能够正确加载类似/css/style.css, /js/main.js等资源，默认情况下我们只需要在src/main/resources/static目录下添加css/style.css和js/main.js文件后，Spring MVC能够自动将他们发布，通过访问/css/style.css, /js/main.js也就可以正确加载这些资源。","slug":"SpringBoot-Help","published":1,"updated":"2018-05-16T09:03:16.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2o000aoyffojdc8jjp","content":"<h1 id=\"Spring-Boot-MVC\"><a href=\"#Spring-Boot-MVC\" class=\"headerlink\" title=\"Spring Boot MVC\"></a>Spring Boot MVC</h1><h2 id=\"使用Spring-Boot\"><a href=\"#使用Spring-Boot\" class=\"headerlink\" title=\"使用Spring Boot\"></a>使用Spring Boot</h2><p>你可以像使用标准的Java库文件一样使用Spring Boot。简单的将需要的 spring-boot-*.jar 添加到classpath即可。<br> Spring Boot不要求任何特殊的工具集成，所以可以使用任何IDE，甚至文本编辑器。</p>\n<p>只是，仍然建议使用build工具：Maven 或 Gradle。</p>\n<pre><code>Spring Boot依赖 使用 org.springframework.boot groupId 。\n通常，让你的Maven POM文件继承 spring-boot-starter-parent，并声明一个或多个 Starter POMs依赖即可。Spring Boot也提供了一个可选的 Maven Plugin来创建可执行的jars。 \n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;parent&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.4.3.RELEASE&lt;/version&gt;</div><div class=\"line\">&lt;/parent&gt;</div><div class=\"line\">&lt;dependencies&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>一个称手的文本编辑器（例如Vim、Emacs、Sublime Text）或者IDE（Eclipse、Idea Intellij）<br>Java环境（JDK 1.7或以上版本）<br>Maven 3.0+（Eclipse和Idea IntelliJ内置，如果使用IDE并且不使用命令行工具可以不安装）<br>一个最简单的Web应用</p>\n<h2 id=\"pom配置依赖\"><a href=\"#pom配置依赖\" class=\"headerlink\" title=\"pom配置依赖\"></a>pom配置依赖</h2><p>使用Spring Boot框架可以大大加速Web应用的开发过程，首先在Maven项目依赖中引入spring-boot-starter-web：</p>\n<p>pom.xml</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\">    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;gs-maven&lt;/artifactId&gt;</div><div class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class=\"line\">    &lt;version&gt;0.1.0&lt;/version&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;parent&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;1.4.3.RELEASE&lt;/version&gt;</div><div class=\"line\">    &lt;/parent&gt;</div><div class=\"line\">    &lt;dependencies&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</div><div class=\"line\">        &lt;optional&gt;true&lt;/optional&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;2.7.0&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;2.7.0&lt;/version&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">    &lt;/dependencies&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;build&gt;</div><div class=\"line\">        &lt;plugins&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;fork&gt;true&lt;/fork&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;/build&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Controller-含main方法\"><a href=\"#Controller-含main方法\" class=\"headerlink\" title=\"Controller 含main方法\"></a>Controller 含main方法</h2><p>SampleController.java<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">package hello;</div><div class=\"line\"></div><div class=\"line\">import org.springframework.boot.*;</div><div class=\"line\">import org.springframework.boot.autoconfigure.*;</div><div class=\"line\">import org.springframework.stereotype.*;</div><div class=\"line\">import org.springframework.web.bind.annotation.*;</div><div class=\"line\">import org.springframework.ui.Model;</div><div class=\"line\">import org.springframework.context.annotation.ComponentScan;</div><div class=\"line\"></div><div class=\"line\">@RestController</div><div class=\"line\">@Controller</div><div class=\"line\">@ComponentScan</div><div class=\"line\">@EnableAutoConfiguration</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// @Configuration  </div><div class=\"line\">// @ComponentScan  </div><div class=\"line\">public class SampleController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/\")</div><div class=\"line\">    @ResponseBody</div><div class=\"line\">    String home() &#123;</div><div class=\"line\">        return \"Hello World222!\";</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/hello\")</div><div class=\"line\">    public String hello() &#123;</div><div class=\"line\">        return \"Hello World!\";</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/index\")</div><div class=\"line\">    public String index(Model model)&#123;</div><div class=\"line\"> </div><div class=\"line\">        model.addAttribute(\"name\",\"Ryan\");</div><div class=\"line\"> </div><div class=\"line\">        return \"index\";</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        SpringApplication.run(SampleController.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Controller-不含main-的rest风格\"><a href=\"#Controller-不含main-的rest风格\" class=\"headerlink\" title=\"Controller 不含main 的rest风格\"></a>Controller 不含main 的rest风格</h2><p>HelloController.java</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">package hello;</div><div class=\"line\"> </div><div class=\"line\">import org.springframework.boot.*;</div><div class=\"line\">import org.springframework.boot.autoconfigure.*;</div><div class=\"line\">import org.springframework.stereotype.*;</div><div class=\"line\">import org.springframework.web.bind.annotation.*;</div><div class=\"line\">import org.springframework.ui.Model; </div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\">import java.util.Map;</div><div class=\"line\"> </div><div class=\"line\">/**</div><div class=\"line\"> * Created by miaorf on 2016/6/19.</div><div class=\"line\"> */</div><div class=\"line\">@Controller</div><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(\"/hello\")</div><div class=\"line\">public class HelloController &#123;</div><div class=\"line\"> </div><div class=\"line\">    @RequestMapping(\"/index\")</div><div class=\"line\">    public String index(Model model)&#123;</div><div class=\"line\"> </div><div class=\"line\">        model.addAttribute(\"name\",\"Ryan\");</div><div class=\"line\"> </div><div class=\"line\">        return \"index\";</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    @RequestMapping(\"/json\")</div><div class=\"line\">    @ResponseBody</div><div class=\"line\">    public Map&lt;String,Object&gt; json()&#123;</div><div class=\"line\">        Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;();</div><div class=\"line\">        map.put(\"name\",\"Ryan\");</div><div class=\"line\">        map.put(\"age\",\"18\");</div><div class=\"line\">        map.put(\"sex\",\"man\");</div><div class=\"line\">        return map;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"运行应用：mvn-spring-boot-run或在IDE中运行main-方法，在浏览器中访问http-localhost-8080\"><a href=\"#运行应用：mvn-spring-boot-run或在IDE中运行main-方法，在浏览器中访问http-localhost-8080\" class=\"headerlink\" title=\"运行应用：mvn spring-boot:run或在IDE中运行main()方法，在浏览器中访问http://localhost:8080\"></a>运行应用：mvn spring-boot:run或在IDE中运行main()方法，在浏览器中访问<a href=\"http://localhost:8080\" target=\"_blank\" rel=\"external\">http://localhost:8080</a></h2><h2 id=\"简单分析\"><a href=\"#简单分析\" class=\"headerlink\" title=\"简单分析\"></a>简单分析</h2><p>我们从程序的入口SpringApplication.run(Application.class, args);开始分析：</p>\n<ul>\n<li><p>SpringApplication是Spring Boot框架中描述Spring应用的类，它的run()方法会创建一个Spring应用上下文（Application Context）。另一方面它会扫描当前应用类路径上的依赖，例如本例中发现spring-webmvc（由 spring-boot-starter-web传递引入）在类路径中，那么Spring Boot会判断这是一个Web应用，并启动一个内嵌的Servlet容器（默认是Tomcat）用于处理HTTP请求。</p>\n</li>\n<li><p>Spring WebMvc框架会将Servlet容器里收到的HTTP请求根据路径分发给对应的@Controller类进行处理，@RestController是一类特殊的@Controller，它的返回值直接作为HTTP Response的Body部分返回给浏览器。</p>\n</li>\n<li><p>@RequestMapping注解表明该方法处理那些URL对应的HTTP请求，也就是我们常说的URL路由（routing)，请求的分发工作是有Spring完成的。例如上面的代码中<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"external\">http://localhost:8080/</a> 根路径就被路由至greeting()方法进行处理。如果访问<a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"external\">http://localhost:8080/hello</a> ，则会出现404 Not Found错误，因为我们并没有编写任何方法来处理/hello请求。</p>\n</li>\n<li><p>例如HelloController中，method方法匹配的URL是/classPath/methodPath”。</p>\n<p>提示</p>\n</li>\n</ul>\n<p>可以定义多个@Controller将不同URL的处理方法分散在不同的类中</p>\n<h2 id=\"URL中的变量——PathVariable\"><a href=\"#URL中的变量——PathVariable\" class=\"headerlink\" title=\"URL中的变量——PathVariable\"></a>URL中的变量——PathVariable</h2><p>在Web应用中URL通常不是一成不变的，例如微博两个不同用户的个人主页对应两个不同的URL:<a href=\"http://weibo.com/user1，http://weibo.com/user2。\" target=\"_blank\" rel=\"external\">http://weibo.com/user1，http://weibo.com/user2。</a> 我们不可能对于每一个用户都编写一个被@RequestMapping注解的方法来处理其请求，Spring MVC提供了一套机制来处理这种情况：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"> @RequestMapping(\"/users/&#123;username&#125;\")</span></div><div class=\"line\">public String userProfile(@PathVariable(<span class=\"string\">\"username\"</span>) String username) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"user %s\"</span>, username);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RequestMapping(\"/posts/&#123;id&#125;\")</span></div><div class=\"line\">public String post(@PathVariable(<span class=\"string\">\"id\"</span>) int id) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"post %d\"</span>, id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上述例子中，URL中的变量可以用{variableName}来表示，同时在方法的参数中加上@PathVariable(“variableName”)，那么当请求被转发给该方法处理时，对应的URL中的变量会被自动赋值给被@PathVariable注解的参数（能够自动根据参数类型赋值，例如上例中的int）。</p>\n<p>支持HTTP方法</p>\n<p>对于HTTP请求除了其URL，还需要注意它的方法（Method）。例如我们在浏览器中访问一个页面通常是GET方法，而表单的提交一般是POST方法。@Controller中的方法同样需要对其进行区分：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"> @RequestMapping(value = \"/login\", method = RequestMethod.GET)</span></div><div class=\"line\">public String loginGet() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Login Page\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RequestMapping(value = \"/login\", method = RequestMethod.POST)</span></div><div class=\"line\">public String loginPost() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Login Post Request\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"模板渲染\"><a href=\"#模板渲染\" class=\"headerlink\" title=\"模板渲染\"></a>模板渲染</h2><p>在之前所有的@RequestMapping注解的方法中，返回值字符串都被直接传送到浏览器端并显示给用户。但是为了能够呈现更加丰富、美观的页面，我们需要将HTML代码返回给浏览器，浏览器再进行页面的渲染、显示。</p>\n<p>一种很直观的方法是在处理请求的方法中，直接返回HTML代码，但是这样做的问题在于——一个复杂的页面HTML代码往往也非常复杂，并且嵌入在Java代码中十分不利于维护。更好的做法是将页面的HTML代码写在模板文件中，渲染后再返回给用户。为了能够进行模板渲染，需要将@RestController改成@Controller：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> import org.springframework.ui.Model;</div><div class=\"line\"></div><div class=\"line\">@Controller</div><div class=\"line\">public class HelloController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/hello/&#123;name&#125;\")</div><div class=\"line\">    public String hello(@PathVariable(\"name\") String name, Model model) &#123;</div><div class=\"line\">        model.addAttribute(\"name\", name);</div><div class=\"line\">        return \"hello\"</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上述例子中，返回值”hello”并非直接将字符串返回给浏览器，而是寻找名字为hello的模板进行渲染，我们使用Thymeleaf模板引擎进行模板渲染，需要引入依赖：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;dependency&gt;</div><div class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">  &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>\n<p>接下来需要在默认的模板文件夹src/main/resources/templates/目录下添加一个模板文件hello.html：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;!DOCTYPE HTML&gt;</div><div class=\"line\">&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;title&gt;Getting Started: Serving Web Content&lt;/title&gt;</div><div class=\"line\">    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;p th:text=\"'Hello, ' + $&#123;name&#125; + '!'\" /&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>th:text=”‘Hello, ‘ + ${name} + ‘!’”也就是将我们之前在@Controller方法里添加至Model的属性name进行渲染，并放入</p><p>标签中（因为th:text是</p><p>标签的属性）。模板渲染还有更多的用法，请参考Thymeleaf官方文档。</p>\n<h2 id=\"处理静态文件\"><a href=\"#处理静态文件\" class=\"headerlink\" title=\"处理静态文件\"></a>处理静态文件</h2><p>浏览器页面使用HTML作为描述语言，那么必然也脱离不了CSS以及JavaScript。为了能够浏览器能够正确加载类似/css/style.css, /js/main.js等资源，默认情况下我们只需要在src/main/resources/static目录下添加css/style.css和js/main.js文件后，Spring MVC能够自动将他们发布，通过访问/css/style.css, /js/main.js也就可以正确加载这些资源。</p>\n","excerpt":"","more":"<h1 id=\"Spring-Boot-MVC\"><a href=\"#Spring-Boot-MVC\" class=\"headerlink\" title=\"Spring Boot MVC\"></a>Spring Boot MVC</h1><h2 id=\"使用Spring-Boot\"><a href=\"#使用Spring-Boot\" class=\"headerlink\" title=\"使用Spring Boot\"></a>使用Spring Boot</h2><p>你可以像使用标准的Java库文件一样使用Spring Boot。简单的将需要的 spring-boot-*.jar 添加到classpath即可。<br> Spring Boot不要求任何特殊的工具集成，所以可以使用任何IDE，甚至文本编辑器。</p>\n<p>只是，仍然建议使用build工具：Maven 或 Gradle。</p>\n<pre><code>Spring Boot依赖 使用 org.springframework.boot groupId 。\n通常，让你的Maven POM文件继承 spring-boot-starter-parent，并声明一个或多个 Starter POMs依赖即可。Spring Boot也提供了一个可选的 Maven Plugin来创建可执行的jars。 \n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;parent&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.4.3.RELEASE&lt;/version&gt;</div><div class=\"line\">&lt;/parent&gt;</div><div class=\"line\">&lt;dependencies&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>一个称手的文本编辑器（例如Vim、Emacs、Sublime Text）或者IDE（Eclipse、Idea Intellij）<br>Java环境（JDK 1.7或以上版本）<br>Maven 3.0+（Eclipse和Idea IntelliJ内置，如果使用IDE并且不使用命令行工具可以不安装）<br>一个最简单的Web应用</p>\n<h2 id=\"pom配置依赖\"><a href=\"#pom配置依赖\" class=\"headerlink\" title=\"pom配置依赖\"></a>pom配置依赖</h2><p>使用Spring Boot框架可以大大加速Web应用的开发过程，首先在Maven项目依赖中引入spring-boot-starter-web：</p>\n<p>pom.xml</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\">    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;gs-maven&lt;/artifactId&gt;</div><div class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class=\"line\">    &lt;version&gt;0.1.0&lt;/version&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;parent&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;1.4.3.RELEASE&lt;/version&gt;</div><div class=\"line\">    &lt;/parent&gt;</div><div class=\"line\">    &lt;dependencies&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</div><div class=\"line\">        &lt;optional&gt;true&lt;/optional&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;2.7.0&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;2.7.0&lt;/version&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">    &lt;/dependencies&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;build&gt;</div><div class=\"line\">        &lt;plugins&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;fork&gt;true&lt;/fork&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;/build&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Controller-含main方法\"><a href=\"#Controller-含main方法\" class=\"headerlink\" title=\"Controller 含main方法\"></a>Controller 含main方法</h2><p>SampleController.java<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">package hello;</div><div class=\"line\"></div><div class=\"line\">import org.springframework.boot.*;</div><div class=\"line\">import org.springframework.boot.autoconfigure.*;</div><div class=\"line\">import org.springframework.stereotype.*;</div><div class=\"line\">import org.springframework.web.bind.annotation.*;</div><div class=\"line\">import org.springframework.ui.Model;</div><div class=\"line\">import org.springframework.context.annotation.ComponentScan;</div><div class=\"line\"></div><div class=\"line\">@RestController</div><div class=\"line\">@Controller</div><div class=\"line\">@ComponentScan</div><div class=\"line\">@EnableAutoConfiguration</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// @Configuration  </div><div class=\"line\">// @ComponentScan  </div><div class=\"line\">public class SampleController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/\")</div><div class=\"line\">    @ResponseBody</div><div class=\"line\">    String home() &#123;</div><div class=\"line\">        return \"Hello World222!\";</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/hello\")</div><div class=\"line\">    public String hello() &#123;</div><div class=\"line\">        return \"Hello World!\";</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/index\")</div><div class=\"line\">    public String index(Model model)&#123;</div><div class=\"line\"> </div><div class=\"line\">        model.addAttribute(\"name\",\"Ryan\");</div><div class=\"line\"> </div><div class=\"line\">        return \"index\";</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        SpringApplication.run(SampleController.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Controller-不含main-的rest风格\"><a href=\"#Controller-不含main-的rest风格\" class=\"headerlink\" title=\"Controller 不含main 的rest风格\"></a>Controller 不含main 的rest风格</h2><p>HelloController.java</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">package hello;</div><div class=\"line\"> </div><div class=\"line\">import org.springframework.boot.*;</div><div class=\"line\">import org.springframework.boot.autoconfigure.*;</div><div class=\"line\">import org.springframework.stereotype.*;</div><div class=\"line\">import org.springframework.web.bind.annotation.*;</div><div class=\"line\">import org.springframework.ui.Model; </div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\">import java.util.Map;</div><div class=\"line\"> </div><div class=\"line\">/**</div><div class=\"line\"> * Created by miaorf on 2016/6/19.</div><div class=\"line\"> */</div><div class=\"line\">@Controller</div><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(\"/hello\")</div><div class=\"line\">public class HelloController &#123;</div><div class=\"line\"> </div><div class=\"line\">    @RequestMapping(\"/index\")</div><div class=\"line\">    public String index(Model model)&#123;</div><div class=\"line\"> </div><div class=\"line\">        model.addAttribute(\"name\",\"Ryan\");</div><div class=\"line\"> </div><div class=\"line\">        return \"index\";</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    @RequestMapping(\"/json\")</div><div class=\"line\">    @ResponseBody</div><div class=\"line\">    public Map&lt;String,Object&gt; json()&#123;</div><div class=\"line\">        Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;();</div><div class=\"line\">        map.put(\"name\",\"Ryan\");</div><div class=\"line\">        map.put(\"age\",\"18\");</div><div class=\"line\">        map.put(\"sex\",\"man\");</div><div class=\"line\">        return map;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"运行应用：mvn-spring-boot-run或在IDE中运行main-方法，在浏览器中访问http-localhost-8080\"><a href=\"#运行应用：mvn-spring-boot-run或在IDE中运行main-方法，在浏览器中访问http-localhost-8080\" class=\"headerlink\" title=\"运行应用：mvn spring-boot:run或在IDE中运行main()方法，在浏览器中访问http://localhost:8080\"></a>运行应用：mvn spring-boot:run或在IDE中运行main()方法，在浏览器中访问<a href=\"http://localhost:8080\">http://localhost:8080</a></h2><h2 id=\"简单分析\"><a href=\"#简单分析\" class=\"headerlink\" title=\"简单分析\"></a>简单分析</h2><p>我们从程序的入口SpringApplication.run(Application.class, args);开始分析：</p>\n<ul>\n<li><p>SpringApplication是Spring Boot框架中描述Spring应用的类，它的run()方法会创建一个Spring应用上下文（Application Context）。另一方面它会扫描当前应用类路径上的依赖，例如本例中发现spring-webmvc（由 spring-boot-starter-web传递引入）在类路径中，那么Spring Boot会判断这是一个Web应用，并启动一个内嵌的Servlet容器（默认是Tomcat）用于处理HTTP请求。</p>\n</li>\n<li><p>Spring WebMvc框架会将Servlet容器里收到的HTTP请求根据路径分发给对应的@Controller类进行处理，@RestController是一类特殊的@Controller，它的返回值直接作为HTTP Response的Body部分返回给浏览器。</p>\n</li>\n<li><p>@RequestMapping注解表明该方法处理那些URL对应的HTTP请求，也就是我们常说的URL路由（routing)，请求的分发工作是有Spring完成的。例如上面的代码中<a href=\"http://localhost:8080/\">http://localhost:8080/</a> 根路径就被路由至greeting()方法进行处理。如果访问<a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a> ，则会出现404 Not Found错误，因为我们并没有编写任何方法来处理/hello请求。</p>\n</li>\n<li><p>例如HelloController中，method方法匹配的URL是/classPath/methodPath”。</p>\n<p>提示</p>\n</li>\n</ul>\n<p>可以定义多个@Controller将不同URL的处理方法分散在不同的类中</p>\n<h2 id=\"URL中的变量——PathVariable\"><a href=\"#URL中的变量——PathVariable\" class=\"headerlink\" title=\"URL中的变量——PathVariable\"></a>URL中的变量——PathVariable</h2><p>在Web应用中URL通常不是一成不变的，例如微博两个不同用户的个人主页对应两个不同的URL:<a href=\"http://weibo.com/user1，http://weibo.com/user2。\">http://weibo.com/user1，http://weibo.com/user2。</a> 我们不可能对于每一个用户都编写一个被@RequestMapping注解的方法来处理其请求，Spring MVC提供了一套机制来处理这种情况：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"> @RequestMapping(\"/users/&#123;username&#125;\")</span></div><div class=\"line\">public String userProfile(@PathVariable(<span class=\"string\">\"username\"</span>) String username) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"user %s\"</span>, username);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RequestMapping(\"/posts/&#123;id&#125;\")</span></div><div class=\"line\">public String post(@PathVariable(<span class=\"string\">\"id\"</span>) int id) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> String.format(<span class=\"string\">\"post %d\"</span>, id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上述例子中，URL中的变量可以用{variableName}来表示，同时在方法的参数中加上@PathVariable(“variableName”)，那么当请求被转发给该方法处理时，对应的URL中的变量会被自动赋值给被@PathVariable注解的参数（能够自动根据参数类型赋值，例如上例中的int）。</p>\n<p>支持HTTP方法</p>\n<p>对于HTTP请求除了其URL，还需要注意它的方法（Method）。例如我们在浏览器中访问一个页面通常是GET方法，而表单的提交一般是POST方法。@Controller中的方法同样需要对其进行区分：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"> @RequestMapping(value = \"/login\", method = RequestMethod.GET)</span></div><div class=\"line\">public String loginGet() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Login Page\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@RequestMapping(value = \"/login\", method = RequestMethod.POST)</span></div><div class=\"line\">public String loginPost() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Login Post Request\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"模板渲染\"><a href=\"#模板渲染\" class=\"headerlink\" title=\"模板渲染\"></a>模板渲染</h2><p>在之前所有的@RequestMapping注解的方法中，返回值字符串都被直接传送到浏览器端并显示给用户。但是为了能够呈现更加丰富、美观的页面，我们需要将HTML代码返回给浏览器，浏览器再进行页面的渲染、显示。</p>\n<p>一种很直观的方法是在处理请求的方法中，直接返回HTML代码，但是这样做的问题在于——一个复杂的页面HTML代码往往也非常复杂，并且嵌入在Java代码中十分不利于维护。更好的做法是将页面的HTML代码写在模板文件中，渲染后再返回给用户。为了能够进行模板渲染，需要将@RestController改成@Controller：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> import org.springframework.ui.Model;</div><div class=\"line\"></div><div class=\"line\">@Controller</div><div class=\"line\">public class HelloController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/hello/&#123;name&#125;\")</div><div class=\"line\">    public String hello(@PathVariable(\"name\") String name, Model model) &#123;</div><div class=\"line\">        model.addAttribute(\"name\", name);</div><div class=\"line\">        return \"hello\"</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在上述例子中，返回值”hello”并非直接将字符串返回给浏览器，而是寻找名字为hello的模板进行渲染，我们使用Thymeleaf模板引擎进行模板渲染，需要引入依赖：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;dependency&gt;</div><div class=\"line\">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">  &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>\n<p>接下来需要在默认的模板文件夹src/main/resources/templates/目录下添加一个模板文件hello.html：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;!DOCTYPE HTML&gt;</div><div class=\"line\">&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;title&gt;Getting Started: Serving Web Content&lt;/title&gt;</div><div class=\"line\">    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">    &lt;p th:text=\"'Hello, ' + $&#123;name&#125; + '!'\" /&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>th:text=”‘Hello, ‘ + ${name} + ‘!’”也就是将我们之前在@Controller方法里添加至Model的属性name进行渲染，并放入<p>标签中（因为th:text是<p>标签的属性）。模板渲染还有更多的用法，请参考Thymeleaf官方文档。</p>\n<h2 id=\"处理静态文件\"><a href=\"#处理静态文件\" class=\"headerlink\" title=\"处理静态文件\"></a>处理静态文件</h2><p>浏览器页面使用HTML作为描述语言，那么必然也脱离不了CSS以及JavaScript。为了能够浏览器能够正确加载类似/css/style.css, /js/main.js等资源，默认情况下我们只需要在src/main/resources/static目录下添加css/style.css和js/main.js文件后，Spring MVC能够自动将他们发布，通过访问/css/style.css, /js/main.js也就可以正确加载这些资源。</p>\n"},{"title":"angular-translate","date":"2017-01-17T04:37:05.000Z","_content":"\nangular.js 国际化模块 angular-translate 简单方便快捷翻译中英文等多语言环境\n\n很多web服务面对的不仅仅是当地用户,多语言环境不仅能提升逼格,更重要是一种用户体验.\n\n\n\nangular.js 作为前后端拆分的解决方案之一,当然离不开前端框架处理国际化的问题,angular.js 官方出了一个模块 angular-translate 来解决多语言国际化问题.\n\n\n\n我们前端采用 bower 包管理工具来管理依赖,点击链接查看bower 使用方法,这里不再详细说明.\n\n上面列出的3个模块我们都要用到,一会详细说明:\n\n\n\n今天和大家分享的内容目录:\n\n使用angular-translate 模块的前期准备工作\n\n创建过滤器做html页面内容的国际化\n\n创建服务做javascript 脚本里的内容国际化\n\n\n\n\n\n使用 angular-translate 模块的前期准备工作\n\n使用 bower 管理工具下载 angular 及 angular-translate 模块\n```python\nbower install angular\nbower install angular-translate\nbower install angular-translate-loader-static-files\n//然后在页面引用进去\n< s cript src=\"/vender/angular-1.3.8.js\"></ scrip t>\n< script src=\"/vender/bower-angular-translate-2.4.2/angular-translate.min.js\"></ scrip t>\n< script src=\"/bower_components/angular-translate-loader-static-files/angular-translate-loader-static-files.min.js\"></ scrip t>\n第一个文件 angular-1.3.8.js 就不用多说了.你懂的.\n\n第二个文件 angular-translate.min.js 是angular官方提供的国际化模块\n\n第三个文件 angular-translate-loader-static-files.min.js 模块是用来读取本地文件的模块,因为我们的翻译内容都是独立的 json 文件.\n\n\n\n我们找一个独立的文件夹 i18n 用来放json 文件,目录及文件如下层级关系:\n\n/i18n/\n\n        en.json\n\n        cn.json\n\n\n\nen.json 文件内容如下:\n\n{\"100001\":\"Login\",\"100002\":\"Register\"}\ncn.json 文件内容如下:\n\n{\"100001\":\"登录\",\"100002\":\"注册\"}\n上面2个json文件对应相同的键 ,我们称之为 翻译键.  不同的语言文件中,相同的翻译键对应相应的翻译值即可.如 \"Login\" 对应 \"登录\"\n\n\n\n\n\n接下来我们需要在注入依赖:\n```python\nvar app = angular.module('myApp', ['pascalprecht.translate'])\n.config(['$translateProvider',function($translateProvider){\n        var lang = window.localStorage.lang||'cn';\n    $translateProvider.preferredLanguage(lang);\n    $translateProvider.useStaticFilesLoader({\n        prefix: '/i18n/',\n        suffix: '.json'\n    });\n}]);\n```\n分解的看下上面的代码:\n\nvar app = angular.module('myApp', ['pascalprecht.translate']);\n这一句就是告诉我们已经把 angular-translate 模块以一个依赖项加载进来.\n\n\n\n.config(['$translateProvider',function($translateProvider)\nconfig 函数用 $translateProvider 服务配置 $translate 服务实现.\n\n\n\n我们上面使用了 localStorage.lang  来存储用户上一次选择的语言,如果用户是第一次范围,默认显示中文(及 加载 cn.json 文件来翻译)\n\n\n\n$translateProvider.preferredLanguage(lang)\n这一句告诉 angular.js 哪种语言是默认已注册的语言.\n\n\n\n$translateProvider.useStaticFilesLoader({\n        prefix: '/i18n/',\n        suffix: '.json'\n    });\n上面的语句告诉我们 angular.js 应该加载本地那些国际化语言配置文件.\n\nprefix : 指定文件前缀.\n\nsuffix: 指定文件后缀.\n\n\n\n这时你可能会想,只有前缀和后缀那 它到底该加载那个文件呢.如果 i18n 里面有几十种语言翻译文件,是不是要全部加载?\n\n不是这样的.它会按照默认注册的语言去加载.默认注册的语言就是下面这一句得到的.\n\nvar lang = window.localStorage.lang||'cn';\n如果用户上次访问了英文站, window.localStorage.lang=en; 那么对于会加载 /i18n/en.json  文件\n\n如果用户第一次访问, window.localStorage.lang=undefined ,那么默认我们会加载 /i18n/cn.json 文件\n\n\n\n然后我们决定在页脚的位置放一个选择语言的下拉列表框\n\n\n    <select class=\"language-switching\" ng-controller=\"LanguageSwitchingCtrl\" ng-model=\"cur_lang\"        ng-change=\"switching(cur_lang)\">\n    <option value=\"en\">English</option>\n    <option value=\"cn\">简体中文</option>\n    </select>\n上面的语言选择器提供了2种语言 ,en ,cn \n\n当我们选择项变化时会触发 ng-change 函数\n\n空间还绑定了模型 ng-model=\"cur_lang\"\n\n\n\n然后我们看下 controller 里面的内容:\n\nangular.module('myApp').controller('LanguageSwitchingCtrl', ['$scope', '$translate', function (scope, $translate) {\n    scope.switching = function(lang){\n        $translate.use(lang);\n        window.localStorage.lang = lang;\n        window.location.reload();\n    };\n    scope.cur_lang = $translate.use();\n}]);\nng-change 事件触发时会执行 控制器的 switching 方法. 此方法会接受下拉列表 option 传过来的参数值 (en 或者 cn )\n\n然后执行 $translate.use(lang) 方法.此方法实现了在运行时切换语言的功能.\n\n\n\n那 ng-model 到底实现了什么功能呢?这里的作用就是页面加载时下拉列表显示出当前默认使用的是哪种语言,就是定位select 默认项.\n\n\n\n我们所有的准备环境都配置好了,下面开始介绍应用:\n\n\n\n2.创建过滤器做Html 页面内容的国际化\n\n现在我们先准备在html页面里做国际化,首先想到做一个过滤器,在html页面使用起来是最方便的. /filters/ 目录下创建 T.js 过滤器\n\nangular.module(\"myApp\").filter(\"T\", ['$translate', function($translate) {\n    return function(key) {\n        if(key){\n            return $translate.instant(key);\n        }\n    };\n}]);\n\n\n过滤器使用起来非常简单方便,加入我们要在一个登录页面里,登录和注册链接需要我们做国际化.\n\n‍\n\n<div ng-controller=\"LoginCtrl\" >\n    \n\n         \n\n         <a ui-sref=\"app.login({})\">{{'100001'|T}}\n         <a ui-sref=\"app.register({})\">{{'100002'|T}}\n         \n\n\n    \n\n这样在不同的语言环境, angular.js 会加载不同的语言配置文件,根据翻译ID展示出来翻译值.\n\n\n\n3.我们在javascript 脚本中使用国际化\n\n当然有人说直接用过滤器来做,也是可以的,但是个人更喜欢创建一个服务,感觉使用起来简单方法\n\n我们在 /services/ 目录里创建 T.js 服务,内容如下:\n```python\n\nangular.module('myApp').factory('T', ['$translate', function($translate) {\n    var T = {\n        T:function(key) {\n            if(key){\n                return $translate.instant(key);\n            }\n            return key;\n        }\n    }\n    return T;\n}]);\n```\n 服务T 返回了一个方法 T.下面我们样式一下如何在controller 里使用国际化.\n\n\n\n假如登录的控制器 LoginCtrl.js 有一个登录标签需要做国际化:\n\nangular.module('myApp').controller('LgoinCtrl', ['$scope','T',\n    function($scope,T) {\n        \n        $scope.login_title=T.T(100001);\n    \n    }\n]);\n首先需要把 T 服务依赖注入到控制器,然后在需要国际化的地方直接调用 T 服务的 T 方法,传入翻译ID 返回 翻译值.\n\n走进AngularJs(七) 过滤器（filter）\n\nAngularJS模块:可以在被加载和执行之前对自身进行配置 我们可以在应用加载阶段配置不同的逻辑  \n    ##配置快:  \n        通过config方法实现对模块的配置,AngularJS中的服务多数都对应一个provider,  \n        用来执行与对应服务相同的功能或对其配置,比如$log、$http、$location都是内置服务，  \n        相对应的“provider”分别是$logProvider、$httpProvider、$locationPorvider。  \n    ##运行块:  \n        服务也是模块形式存在的对且对外提供特定功能，前面学习中都是将服务做为依赖注入进去的，  \n            然后再进行调用，除了这种方式外我们也可以直接运行相应的服务模块，  \n            AngularJS提供了run方法来实现。  \n        run方法还是最先执行的，利用这个特点我们可以将一些需要优先执行的功能通过run方法来运行，  \n            比如验证用户是否登录，未登录则不允许进行任何其它操作。  \n\n配置块会按照$provide, $compileProvider, $filterProvider，注册的顺序，依次被应用。唯一的例外是对常量的定义，它们应该始终放在配置块的开始处。\n运行块是AngularJS中最像主方法的东西。一个运行块就是一段用来启动应用的代码。它在所有服务都被配置和所有的注入器都被创建后执行。运行块通常包含了一些难以测试的代码，所以它们应该写在单独的模块里，这样在单元测试时就可以忽略它们了。\n模块可以把其他模块列为它的依赖。“依赖某个模块”意味着需要把这个被依赖的模块在本块模块之前被加载。换句话说被依赖模块的配置块会在本模块配置块前被执行。运行块也是一样。任何一个模块都只能被加载一次，即使它被多个模块依赖。\n模块是一种用来管理$injector配置的方法，和脚本的加载没有关系。现在网上已有很多控制模块加载的库，它们可以和AngularJS配合使用。因为在加载期间模块不做任何事情，所以它们可以以任意顺序或者并行方式加载\n\n\n\nhttp://harttle.com/2015/06/07/angular-module.html\n","source":"_posts/angular-translate.md","raw":"---\ntitle: angular-translate\ndate: 2017-01-17 12:37:05\ntags:\n---\n\nangular.js 国际化模块 angular-translate 简单方便快捷翻译中英文等多语言环境\n\n很多web服务面对的不仅仅是当地用户,多语言环境不仅能提升逼格,更重要是一种用户体验.\n\n\n\nangular.js 作为前后端拆分的解决方案之一,当然离不开前端框架处理国际化的问题,angular.js 官方出了一个模块 angular-translate 来解决多语言国际化问题.\n\n\n\n我们前端采用 bower 包管理工具来管理依赖,点击链接查看bower 使用方法,这里不再详细说明.\n\n上面列出的3个模块我们都要用到,一会详细说明:\n\n\n\n今天和大家分享的内容目录:\n\n使用angular-translate 模块的前期准备工作\n\n创建过滤器做html页面内容的国际化\n\n创建服务做javascript 脚本里的内容国际化\n\n\n\n\n\n使用 angular-translate 模块的前期准备工作\n\n使用 bower 管理工具下载 angular 及 angular-translate 模块\n```python\nbower install angular\nbower install angular-translate\nbower install angular-translate-loader-static-files\n//然后在页面引用进去\n< s cript src=\"/vender/angular-1.3.8.js\"></ scrip t>\n< script src=\"/vender/bower-angular-translate-2.4.2/angular-translate.min.js\"></ scrip t>\n< script src=\"/bower_components/angular-translate-loader-static-files/angular-translate-loader-static-files.min.js\"></ scrip t>\n第一个文件 angular-1.3.8.js 就不用多说了.你懂的.\n\n第二个文件 angular-translate.min.js 是angular官方提供的国际化模块\n\n第三个文件 angular-translate-loader-static-files.min.js 模块是用来读取本地文件的模块,因为我们的翻译内容都是独立的 json 文件.\n\n\n\n我们找一个独立的文件夹 i18n 用来放json 文件,目录及文件如下层级关系:\n\n/i18n/\n\n        en.json\n\n        cn.json\n\n\n\nen.json 文件内容如下:\n\n{\"100001\":\"Login\",\"100002\":\"Register\"}\ncn.json 文件内容如下:\n\n{\"100001\":\"登录\",\"100002\":\"注册\"}\n上面2个json文件对应相同的键 ,我们称之为 翻译键.  不同的语言文件中,相同的翻译键对应相应的翻译值即可.如 \"Login\" 对应 \"登录\"\n\n\n\n\n\n接下来我们需要在注入依赖:\n```python\nvar app = angular.module('myApp', ['pascalprecht.translate'])\n.config(['$translateProvider',function($translateProvider){\n        var lang = window.localStorage.lang||'cn';\n    $translateProvider.preferredLanguage(lang);\n    $translateProvider.useStaticFilesLoader({\n        prefix: '/i18n/',\n        suffix: '.json'\n    });\n}]);\n```\n分解的看下上面的代码:\n\nvar app = angular.module('myApp', ['pascalprecht.translate']);\n这一句就是告诉我们已经把 angular-translate 模块以一个依赖项加载进来.\n\n\n\n.config(['$translateProvider',function($translateProvider)\nconfig 函数用 $translateProvider 服务配置 $translate 服务实现.\n\n\n\n我们上面使用了 localStorage.lang  来存储用户上一次选择的语言,如果用户是第一次范围,默认显示中文(及 加载 cn.json 文件来翻译)\n\n\n\n$translateProvider.preferredLanguage(lang)\n这一句告诉 angular.js 哪种语言是默认已注册的语言.\n\n\n\n$translateProvider.useStaticFilesLoader({\n        prefix: '/i18n/',\n        suffix: '.json'\n    });\n上面的语句告诉我们 angular.js 应该加载本地那些国际化语言配置文件.\n\nprefix : 指定文件前缀.\n\nsuffix: 指定文件后缀.\n\n\n\n这时你可能会想,只有前缀和后缀那 它到底该加载那个文件呢.如果 i18n 里面有几十种语言翻译文件,是不是要全部加载?\n\n不是这样的.它会按照默认注册的语言去加载.默认注册的语言就是下面这一句得到的.\n\nvar lang = window.localStorage.lang||'cn';\n如果用户上次访问了英文站, window.localStorage.lang=en; 那么对于会加载 /i18n/en.json  文件\n\n如果用户第一次访问, window.localStorage.lang=undefined ,那么默认我们会加载 /i18n/cn.json 文件\n\n\n\n然后我们决定在页脚的位置放一个选择语言的下拉列表框\n\n\n    <select class=\"language-switching\" ng-controller=\"LanguageSwitchingCtrl\" ng-model=\"cur_lang\"        ng-change=\"switching(cur_lang)\">\n    <option value=\"en\">English</option>\n    <option value=\"cn\">简体中文</option>\n    </select>\n上面的语言选择器提供了2种语言 ,en ,cn \n\n当我们选择项变化时会触发 ng-change 函数\n\n空间还绑定了模型 ng-model=\"cur_lang\"\n\n\n\n然后我们看下 controller 里面的内容:\n\nangular.module('myApp').controller('LanguageSwitchingCtrl', ['$scope', '$translate', function (scope, $translate) {\n    scope.switching = function(lang){\n        $translate.use(lang);\n        window.localStorage.lang = lang;\n        window.location.reload();\n    };\n    scope.cur_lang = $translate.use();\n}]);\nng-change 事件触发时会执行 控制器的 switching 方法. 此方法会接受下拉列表 option 传过来的参数值 (en 或者 cn )\n\n然后执行 $translate.use(lang) 方法.此方法实现了在运行时切换语言的功能.\n\n\n\n那 ng-model 到底实现了什么功能呢?这里的作用就是页面加载时下拉列表显示出当前默认使用的是哪种语言,就是定位select 默认项.\n\n\n\n我们所有的准备环境都配置好了,下面开始介绍应用:\n\n\n\n2.创建过滤器做Html 页面内容的国际化\n\n现在我们先准备在html页面里做国际化,首先想到做一个过滤器,在html页面使用起来是最方便的. /filters/ 目录下创建 T.js 过滤器\n\nangular.module(\"myApp\").filter(\"T\", ['$translate', function($translate) {\n    return function(key) {\n        if(key){\n            return $translate.instant(key);\n        }\n    };\n}]);\n\n\n过滤器使用起来非常简单方便,加入我们要在一个登录页面里,登录和注册链接需要我们做国际化.\n\n‍\n\n<div ng-controller=\"LoginCtrl\" >\n    \n\n         \n\n         <a ui-sref=\"app.login({})\">{{'100001'|T}}\n         <a ui-sref=\"app.register({})\">{{'100002'|T}}\n         \n\n\n    \n\n这样在不同的语言环境, angular.js 会加载不同的语言配置文件,根据翻译ID展示出来翻译值.\n\n\n\n3.我们在javascript 脚本中使用国际化\n\n当然有人说直接用过滤器来做,也是可以的,但是个人更喜欢创建一个服务,感觉使用起来简单方法\n\n我们在 /services/ 目录里创建 T.js 服务,内容如下:\n```python\n\nangular.module('myApp').factory('T', ['$translate', function($translate) {\n    var T = {\n        T:function(key) {\n            if(key){\n                return $translate.instant(key);\n            }\n            return key;\n        }\n    }\n    return T;\n}]);\n```\n 服务T 返回了一个方法 T.下面我们样式一下如何在controller 里使用国际化.\n\n\n\n假如登录的控制器 LoginCtrl.js 有一个登录标签需要做国际化:\n\nangular.module('myApp').controller('LgoinCtrl', ['$scope','T',\n    function($scope,T) {\n        \n        $scope.login_title=T.T(100001);\n    \n    }\n]);\n首先需要把 T 服务依赖注入到控制器,然后在需要国际化的地方直接调用 T 服务的 T 方法,传入翻译ID 返回 翻译值.\n\n走进AngularJs(七) 过滤器（filter）\n\nAngularJS模块:可以在被加载和执行之前对自身进行配置 我们可以在应用加载阶段配置不同的逻辑  \n    ##配置快:  \n        通过config方法实现对模块的配置,AngularJS中的服务多数都对应一个provider,  \n        用来执行与对应服务相同的功能或对其配置,比如$log、$http、$location都是内置服务，  \n        相对应的“provider”分别是$logProvider、$httpProvider、$locationPorvider。  \n    ##运行块:  \n        服务也是模块形式存在的对且对外提供特定功能，前面学习中都是将服务做为依赖注入进去的，  \n            然后再进行调用，除了这种方式外我们也可以直接运行相应的服务模块，  \n            AngularJS提供了run方法来实现。  \n        run方法还是最先执行的，利用这个特点我们可以将一些需要优先执行的功能通过run方法来运行，  \n            比如验证用户是否登录，未登录则不允许进行任何其它操作。  \n\n配置块会按照$provide, $compileProvider, $filterProvider，注册的顺序，依次被应用。唯一的例外是对常量的定义，它们应该始终放在配置块的开始处。\n运行块是AngularJS中最像主方法的东西。一个运行块就是一段用来启动应用的代码。它在所有服务都被配置和所有的注入器都被创建后执行。运行块通常包含了一些难以测试的代码，所以它们应该写在单独的模块里，这样在单元测试时就可以忽略它们了。\n模块可以把其他模块列为它的依赖。“依赖某个模块”意味着需要把这个被依赖的模块在本块模块之前被加载。换句话说被依赖模块的配置块会在本模块配置块前被执行。运行块也是一样。任何一个模块都只能被加载一次，即使它被多个模块依赖。\n模块是一种用来管理$injector配置的方法，和脚本的加载没有关系。现在网上已有很多控制模块加载的库，它们可以和AngularJS配合使用。因为在加载期间模块不做任何事情，所以它们可以以任意顺序或者并行方式加载\n\n\n\nhttp://harttle.com/2015/06/07/angular-module.html\n","slug":"angular-translate","published":1,"updated":"2018-05-16T09:03:16.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2p000boyff1atjqpeo","content":"<p>angular.js 国际化模块 angular-translate 简单方便快捷翻译中英文等多语言环境</p>\n<p>很多web服务面对的不仅仅是当地用户,多语言环境不仅能提升逼格,更重要是一种用户体验.</p>\n<p>angular.js 作为前后端拆分的解决方案之一,当然离不开前端框架处理国际化的问题,angular.js 官方出了一个模块 angular-translate 来解决多语言国际化问题.</p>\n<p>我们前端采用 bower 包管理工具来管理依赖,点击链接查看bower 使用方法,这里不再详细说明.</p>\n<p>上面列出的3个模块我们都要用到,一会详细说明:</p>\n<p>今天和大家分享的内容目录:</p>\n<p>使用angular-translate 模块的前期准备工作</p>\n<p>创建过滤器做html页面内容的国际化</p>\n<p>创建服务做javascript 脚本里的内容国际化</p>\n<p>使用 angular-translate 模块的前期准备工作</p>\n<p>使用 bower 管理工具下载 angular 及 angular-translate 模块<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install angular</div><div class=\"line\">bower install angular-translate</div><div class=\"line\">bower install angular-translate-loader-static-files</div><div class=\"line\">//然后在页面引用进去</div><div class=\"line\">&lt; s cript src=\"/vender/angular-1.3.8.js\"&gt;&lt;/ scrip t&gt;</div><div class=\"line\">&lt; script src=\"/vender/bower-angular-translate-2.4.2/angular-translate.min.js\"&gt;&lt;/ scrip t&gt;</div><div class=\"line\">&lt; script src=\"/bower_components/angular-translate-loader-static-files/angular-translate-loader-static-files.min.js\"&gt;&lt;/ scrip t&gt;</div><div class=\"line\">第一个文件 angular-1.3.8.js 就不用多说了.你懂的.</div><div class=\"line\"></div><div class=\"line\">第二个文件 angular-translate.min.js 是angular官方提供的国际化模块</div><div class=\"line\"></div><div class=\"line\">第三个文件 angular-translate-loader-static-files.min.js 模块是用来读取本地文件的模块,因为我们的翻译内容都是独立的 json 文件.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">我们找一个独立的文件夹 i18n 用来放json 文件,目录及文件如下层级关系:</div><div class=\"line\"></div><div class=\"line\">/i18n/</div><div class=\"line\"></div><div class=\"line\">        en.json</div><div class=\"line\"></div><div class=\"line\">        cn.json</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">en.json 文件内容如下:</div><div class=\"line\"></div><div class=\"line\">&#123;\"100001\":\"Login\",\"100002\":\"Register\"&#125;</div><div class=\"line\">cn.json 文件内容如下:</div><div class=\"line\"></div><div class=\"line\">&#123;\"100001\":\"登录\",\"100002\":\"注册\"&#125;</div><div class=\"line\">上面2个json文件对应相同的键 ,我们称之为 翻译键.  不同的语言文件中,相同的翻译键对应相应的翻译值即可.如 \"Login\" 对应 \"登录\"</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">接下来我们需要在注入依赖:</div><div class=\"line\">```python</div><div class=\"line\">var app = angular.module('myApp', ['pascalprecht.translate'])</div><div class=\"line\">.config(['$translateProvider',function($translateProvider)&#123;</div><div class=\"line\">        var lang = window.localStorage.lang||'cn';</div><div class=\"line\">    $translateProvider.preferredLanguage(lang);</div><div class=\"line\">    $translateProvider.useStaticFilesLoader(&#123;</div><div class=\"line\">        prefix: '/i18n/',</div><div class=\"line\">        suffix: '.json'</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure></p>\n<p>分解的看下上面的代码:</p>\n<p>var app = angular.module(‘myApp’, [‘pascalprecht.translate’]);<br>这一句就是告诉我们已经把 angular-translate 模块以一个依赖项加载进来.</p>\n<p>.config([‘$translateProvider’,function($translateProvider)<br>config 函数用 $translateProvider 服务配置 $translate 服务实现.</p>\n<p>我们上面使用了 localStorage.lang  来存储用户上一次选择的语言,如果用户是第一次范围,默认显示中文(及 加载 cn.json 文件来翻译)</p>\n<p>$translateProvider.preferredLanguage(lang)<br>这一句告诉 angular.js 哪种语言是默认已注册的语言.</p>\n<p>$translateProvider.useStaticFilesLoader({<br>        prefix: ‘/i18n/‘,<br>        suffix: ‘.json’<br>    });<br>上面的语句告诉我们 angular.js 应该加载本地那些国际化语言配置文件.</p>\n<p>prefix : 指定文件前缀.</p>\n<p>suffix: 指定文件后缀.</p>\n<p>这时你可能会想,只有前缀和后缀那 它到底该加载那个文件呢.如果 i18n 里面有几十种语言翻译文件,是不是要全部加载?</p>\n<p>不是这样的.它会按照默认注册的语言去加载.默认注册的语言就是下面这一句得到的.</p>\n<p>var lang = window.localStorage.lang||’cn’;<br>如果用户上次访问了英文站, window.localStorage.lang=en; 那么对于会加载 /i18n/en.json  文件</p>\n<p>如果用户第一次访问, window.localStorage.lang=undefined ,那么默认我们会加载 /i18n/cn.json 文件</p>\n<p>然后我们决定在页脚的位置放一个选择语言的下拉列表框</p>\n<pre><code>&lt;select class=&quot;language-switching&quot; ng-controller=&quot;LanguageSwitchingCtrl&quot; ng-model=&quot;cur_lang&quot;        ng-change=&quot;switching(cur_lang)&quot;&gt;\n&lt;option value=&quot;en&quot;&gt;English&lt;/option&gt;\n&lt;option value=&quot;cn&quot;&gt;简体中文&lt;/option&gt;\n&lt;/select&gt;\n</code></pre><p>上面的语言选择器提供了2种语言 ,en ,cn </p>\n<p>当我们选择项变化时会触发 ng-change 函数</p>\n<p>空间还绑定了模型 ng-model=”cur_lang”</p>\n<p>然后我们看下 controller 里面的内容:</p>\n<p>angular.module(‘myApp’).controller(‘LanguageSwitchingCtrl’, [‘$scope’, ‘$translate’, function (scope, $translate) {<br>    scope.switching = function(lang){<br>        $translate.use(lang);<br>        window.localStorage.lang = lang;<br>        window.location.reload();<br>    };<br>    scope.cur_lang = $translate.use();<br>}]);<br>ng-change 事件触发时会执行 控制器的 switching 方法. 此方法会接受下拉列表 option 传过来的参数值 (en 或者 cn )</p>\n<p>然后执行 $translate.use(lang) 方法.此方法实现了在运行时切换语言的功能.</p>\n<p>那 ng-model 到底实现了什么功能呢?这里的作用就是页面加载时下拉列表显示出当前默认使用的是哪种语言,就是定位select 默认项.</p>\n<p>我们所有的准备环境都配置好了,下面开始介绍应用:</p>\n<p>2.创建过滤器做Html 页面内容的国际化</p>\n<p>现在我们先准备在html页面里做国际化,首先想到做一个过滤器,在html页面使用起来是最方便的. /filters/ 目录下创建 T.js 过滤器</p>\n<p>angular.module(“myApp”).filter(“T”, [‘$translate’, function($translate) {<br>    return function(key) {<br>        if(key){<br>            return $translate.instant(key);<br>        }<br>    };<br>}]);</p>\n<p>过滤器使用起来非常简单方便,加入我们要在一个登录页面里,登录和注册链接需要我们做国际化.</p>\n<p>‍</p>\n<div ng-controller=\"LoginCtrl\">\n\n\n\n\n<pre><code>&lt;a ui-sref=&quot;app.login({})&quot;&gt;{{'100001'|T}}\n&lt;a ui-sref=&quot;app.register({})&quot;&gt;{{'100002'|T}}\n</code></pre><p>这样在不同的语言环境, angular.js 会加载不同的语言配置文件,根据翻译ID展示出来翻译值.</p>\n<p>3.我们在javascript 脚本中使用国际化</p>\n<p>当然有人说直接用过滤器来做,也是可以的,但是个人更喜欢创建一个服务,感觉使用起来简单方法</p>\n<p>我们在 /services/ 目录里创建 T.js 服务,内容如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>).factory(<span class=\"string\">'T'</span>, [<span class=\"string\">'$translate'</span>, function($translate) &#123;</div><div class=\"line\">    var T = &#123;</div><div class=\"line\">        T:function(key) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(key)&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $translate.instant(key);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> key;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> T;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure></p>\n<p> 服务T 返回了一个方法 T.下面我们样式一下如何在controller 里使用国际化.</p>\n<p>假如登录的控制器 LoginCtrl.js 有一个登录标签需要做国际化:</p>\n<p>angular.module(‘myApp’).controller(‘LgoinCtrl’, [‘$scope’,’T’,<br>    function($scope,T) {</p>\n<pre><code>    $scope.login_title=T.T(100001);\n\n}\n</code></pre><p>]);<br>首先需要把 T 服务依赖注入到控制器,然后在需要国际化的地方直接调用 T 服务的 T 方法,传入翻译ID 返回 翻译值.</p>\n<p>走进AngularJs(七) 过滤器（filter）</p>\n<p>AngularJS模块:可以在被加载和执行之前对自身进行配置 我们可以在应用加载阶段配置不同的逻辑  </p>\n<pre><code>##配置快:  \n    通过config方法实现对模块的配置,AngularJS中的服务多数都对应一个provider,  \n    用来执行与对应服务相同的功能或对其配置,比如$log、$http、$location都是内置服务，  \n    相对应的“provider”分别是$logProvider、$httpProvider、$locationPorvider。  \n##运行块:  \n    服务也是模块形式存在的对且对外提供特定功能，前面学习中都是将服务做为依赖注入进去的，  \n        然后再进行调用，除了这种方式外我们也可以直接运行相应的服务模块，  \n        AngularJS提供了run方法来实现。  \n    run方法还是最先执行的，利用这个特点我们可以将一些需要优先执行的功能通过run方法来运行，  \n        比如验证用户是否登录，未登录则不允许进行任何其它操作。  \n</code></pre><p>配置块会按照$provide, $compileProvider, $filterProvider，注册的顺序，依次被应用。唯一的例外是对常量的定义，它们应该始终放在配置块的开始处。<br>运行块是AngularJS中最像主方法的东西。一个运行块就是一段用来启动应用的代码。它在所有服务都被配置和所有的注入器都被创建后执行。运行块通常包含了一些难以测试的代码，所以它们应该写在单独的模块里，这样在单元测试时就可以忽略它们了。<br>模块可以把其他模块列为它的依赖。“依赖某个模块”意味着需要把这个被依赖的模块在本块模块之前被加载。换句话说被依赖模块的配置块会在本模块配置块前被执行。运行块也是一样。任何一个模块都只能被加载一次，即使它被多个模块依赖。<br>模块是一种用来管理$injector配置的方法，和脚本的加载没有关系。现在网上已有很多控制模块加载的库，它们可以和AngularJS配合使用。因为在加载期间模块不做任何事情，所以它们可以以任意顺序或者并行方式加载</p>\n<p><a href=\"http://harttle.com/2015/06/07/angular-module.html\" target=\"_blank\" rel=\"external\">http://harttle.com/2015/06/07/angular-module.html</a></p>\n</div>","excerpt":"","more":"<p>angular.js 国际化模块 angular-translate 简单方便快捷翻译中英文等多语言环境</p>\n<p>很多web服务面对的不仅仅是当地用户,多语言环境不仅能提升逼格,更重要是一种用户体验.</p>\n<p>angular.js 作为前后端拆分的解决方案之一,当然离不开前端框架处理国际化的问题,angular.js 官方出了一个模块 angular-translate 来解决多语言国际化问题.</p>\n<p>我们前端采用 bower 包管理工具来管理依赖,点击链接查看bower 使用方法,这里不再详细说明.</p>\n<p>上面列出的3个模块我们都要用到,一会详细说明:</p>\n<p>今天和大家分享的内容目录:</p>\n<p>使用angular-translate 模块的前期准备工作</p>\n<p>创建过滤器做html页面内容的国际化</p>\n<p>创建服务做javascript 脚本里的内容国际化</p>\n<p>使用 angular-translate 模块的前期准备工作</p>\n<p>使用 bower 管理工具下载 angular 及 angular-translate 模块<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">bower install angular</div><div class=\"line\">bower install angular-translate</div><div class=\"line\">bower install angular-translate-loader-static-files</div><div class=\"line\">//然后在页面引用进去</div><div class=\"line\">&lt; s cript src=\"/vender/angular-1.3.8.js\"&gt;&lt;/ scrip t&gt;</div><div class=\"line\">&lt; script src=\"/vender/bower-angular-translate-2.4.2/angular-translate.min.js\"&gt;&lt;/ scrip t&gt;</div><div class=\"line\">&lt; script src=\"/bower_components/angular-translate-loader-static-files/angular-translate-loader-static-files.min.js\"&gt;&lt;/ scrip t&gt;</div><div class=\"line\">第一个文件 angular-1.3.8.js 就不用多说了.你懂的.</div><div class=\"line\"></div><div class=\"line\">第二个文件 angular-translate.min.js 是angular官方提供的国际化模块</div><div class=\"line\"></div><div class=\"line\">第三个文件 angular-translate-loader-static-files.min.js 模块是用来读取本地文件的模块,因为我们的翻译内容都是独立的 json 文件.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">我们找一个独立的文件夹 i18n 用来放json 文件,目录及文件如下层级关系:</div><div class=\"line\"></div><div class=\"line\">/i18n/</div><div class=\"line\"></div><div class=\"line\">        en.json</div><div class=\"line\"></div><div class=\"line\">        cn.json</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">en.json 文件内容如下:</div><div class=\"line\"></div><div class=\"line\">&#123;\"100001\":\"Login\",\"100002\":\"Register\"&#125;</div><div class=\"line\">cn.json 文件内容如下:</div><div class=\"line\"></div><div class=\"line\">&#123;\"100001\":\"登录\",\"100002\":\"注册\"&#125;</div><div class=\"line\">上面2个json文件对应相同的键 ,我们称之为 翻译键.  不同的语言文件中,相同的翻译键对应相应的翻译值即可.如 \"Login\" 对应 \"登录\"</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">接下来我们需要在注入依赖:</div><div class=\"line\">```python</div><div class=\"line\">var app = angular.module('myApp', ['pascalprecht.translate'])</div><div class=\"line\">.config(['$translateProvider',function($translateProvider)&#123;</div><div class=\"line\">        var lang = window.localStorage.lang||'cn';</div><div class=\"line\">    $translateProvider.preferredLanguage(lang);</div><div class=\"line\">    $translateProvider.useStaticFilesLoader(&#123;</div><div class=\"line\">        prefix: '/i18n/',</div><div class=\"line\">        suffix: '.json'</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure></p>\n<p>分解的看下上面的代码:</p>\n<p>var app = angular.module(‘myApp’, [‘pascalprecht.translate’]);<br>这一句就是告诉我们已经把 angular-translate 模块以一个依赖项加载进来.</p>\n<p>.config([‘$translateProvider’,function($translateProvider)<br>config 函数用 $translateProvider 服务配置 $translate 服务实现.</p>\n<p>我们上面使用了 localStorage.lang  来存储用户上一次选择的语言,如果用户是第一次范围,默认显示中文(及 加载 cn.json 文件来翻译)</p>\n<p>$translateProvider.preferredLanguage(lang)<br>这一句告诉 angular.js 哪种语言是默认已注册的语言.</p>\n<p>$translateProvider.useStaticFilesLoader({<br>        prefix: ‘/i18n/‘,<br>        suffix: ‘.json’<br>    });<br>上面的语句告诉我们 angular.js 应该加载本地那些国际化语言配置文件.</p>\n<p>prefix : 指定文件前缀.</p>\n<p>suffix: 指定文件后缀.</p>\n<p>这时你可能会想,只有前缀和后缀那 它到底该加载那个文件呢.如果 i18n 里面有几十种语言翻译文件,是不是要全部加载?</p>\n<p>不是这样的.它会按照默认注册的语言去加载.默认注册的语言就是下面这一句得到的.</p>\n<p>var lang = window.localStorage.lang||’cn’;<br>如果用户上次访问了英文站, window.localStorage.lang=en; 那么对于会加载 /i18n/en.json  文件</p>\n<p>如果用户第一次访问, window.localStorage.lang=undefined ,那么默认我们会加载 /i18n/cn.json 文件</p>\n<p>然后我们决定在页脚的位置放一个选择语言的下拉列表框</p>\n<pre><code>&lt;select class=&quot;language-switching&quot; ng-controller=&quot;LanguageSwitchingCtrl&quot; ng-model=&quot;cur_lang&quot;        ng-change=&quot;switching(cur_lang)&quot;&gt;\n&lt;option value=&quot;en&quot;&gt;English&lt;/option&gt;\n&lt;option value=&quot;cn&quot;&gt;简体中文&lt;/option&gt;\n&lt;/select&gt;\n</code></pre><p>上面的语言选择器提供了2种语言 ,en ,cn </p>\n<p>当我们选择项变化时会触发 ng-change 函数</p>\n<p>空间还绑定了模型 ng-model=”cur_lang”</p>\n<p>然后我们看下 controller 里面的内容:</p>\n<p>angular.module(‘myApp’).controller(‘LanguageSwitchingCtrl’, [‘$scope’, ‘$translate’, function (scope, $translate) {<br>    scope.switching = function(lang){<br>        $translate.use(lang);<br>        window.localStorage.lang = lang;<br>        window.location.reload();<br>    };<br>    scope.cur_lang = $translate.use();<br>}]);<br>ng-change 事件触发时会执行 控制器的 switching 方法. 此方法会接受下拉列表 option 传过来的参数值 (en 或者 cn )</p>\n<p>然后执行 $translate.use(lang) 方法.此方法实现了在运行时切换语言的功能.</p>\n<p>那 ng-model 到底实现了什么功能呢?这里的作用就是页面加载时下拉列表显示出当前默认使用的是哪种语言,就是定位select 默认项.</p>\n<p>我们所有的准备环境都配置好了,下面开始介绍应用:</p>\n<p>2.创建过滤器做Html 页面内容的国际化</p>\n<p>现在我们先准备在html页面里做国际化,首先想到做一个过滤器,在html页面使用起来是最方便的. /filters/ 目录下创建 T.js 过滤器</p>\n<p>angular.module(“myApp”).filter(“T”, [‘$translate’, function($translate) {<br>    return function(key) {<br>        if(key){<br>            return $translate.instant(key);<br>        }<br>    };<br>}]);</p>\n<p>过滤器使用起来非常简单方便,加入我们要在一个登录页面里,登录和注册链接需要我们做国际化.</p>\n<p>‍</p>\n<div ng-controller=\"LoginCtrl\" >\n\n\n\n\n<pre><code>&lt;a ui-sref=&quot;app.login({})&quot;&gt;{{'100001'|T}}\n&lt;a ui-sref=&quot;app.register({})&quot;&gt;{{'100002'|T}}\n</code></pre><p>这样在不同的语言环境, angular.js 会加载不同的语言配置文件,根据翻译ID展示出来翻译值.</p>\n<p>3.我们在javascript 脚本中使用国际化</p>\n<p>当然有人说直接用过滤器来做,也是可以的,但是个人更喜欢创建一个服务,感觉使用起来简单方法</p>\n<p>我们在 /services/ 目录里创建 T.js 服务,内容如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">angular.module(<span class=\"string\">'myApp'</span>).factory(<span class=\"string\">'T'</span>, [<span class=\"string\">'$translate'</span>, function($translate) &#123;</div><div class=\"line\">    var T = &#123;</div><div class=\"line\">        T:function(key) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(key)&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $translate.instant(key);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> key;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> T;</div><div class=\"line\">&#125;]);</div></pre></td></tr></table></figure></p>\n<p> 服务T 返回了一个方法 T.下面我们样式一下如何在controller 里使用国际化.</p>\n<p>假如登录的控制器 LoginCtrl.js 有一个登录标签需要做国际化:</p>\n<p>angular.module(‘myApp’).controller(‘LgoinCtrl’, [‘$scope’,’T’,<br>    function($scope,T) {</p>\n<pre><code>    $scope.login_title=T.T(100001);\n\n}\n</code></pre><p>]);<br>首先需要把 T 服务依赖注入到控制器,然后在需要国际化的地方直接调用 T 服务的 T 方法,传入翻译ID 返回 翻译值.</p>\n<p>走进AngularJs(七) 过滤器（filter）</p>\n<p>AngularJS模块:可以在被加载和执行之前对自身进行配置 我们可以在应用加载阶段配置不同的逻辑  </p>\n<pre><code>##配置快:  \n    通过config方法实现对模块的配置,AngularJS中的服务多数都对应一个provider,  \n    用来执行与对应服务相同的功能或对其配置,比如$log、$http、$location都是内置服务，  \n    相对应的“provider”分别是$logProvider、$httpProvider、$locationPorvider。  \n##运行块:  \n    服务也是模块形式存在的对且对外提供特定功能，前面学习中都是将服务做为依赖注入进去的，  \n        然后再进行调用，除了这种方式外我们也可以直接运行相应的服务模块，  \n        AngularJS提供了run方法来实现。  \n    run方法还是最先执行的，利用这个特点我们可以将一些需要优先执行的功能通过run方法来运行，  \n        比如验证用户是否登录，未登录则不允许进行任何其它操作。  \n</code></pre><p>配置块会按照$provide, $compileProvider, $filterProvider，注册的顺序，依次被应用。唯一的例外是对常量的定义，它们应该始终放在配置块的开始处。<br>运行块是AngularJS中最像主方法的东西。一个运行块就是一段用来启动应用的代码。它在所有服务都被配置和所有的注入器都被创建后执行。运行块通常包含了一些难以测试的代码，所以它们应该写在单独的模块里，这样在单元测试时就可以忽略它们了。<br>模块可以把其他模块列为它的依赖。“依赖某个模块”意味着需要把这个被依赖的模块在本块模块之前被加载。换句话说被依赖模块的配置块会在本模块配置块前被执行。运行块也是一样。任何一个模块都只能被加载一次，即使它被多个模块依赖。<br>模块是一种用来管理$injector配置的方法，和脚本的加载没有关系。现在网上已有很多控制模块加载的库，它们可以和AngularJS配合使用。因为在加载期间模块不做任何事情，所以它们可以以任意顺序或者并行方式加载</p>\n<p><a href=\"http://harttle.com/2015/06/07/angular-module.html\">http://harttle.com/2015/06/07/angular-module.html</a></p>\n"},{"title":"css小记录","date":"2017-01-18T08:12:07.000Z","_content":"div设置背景图片问题：\n必须设置高度，否则高度为0，背景图片显示不出来\nbackground-size：100%，不生效，不能控制图片的按比例缩放\nbackground: url(\"../images/part_1.png\") no-repeat center top;\n\nimg元素的边框问题：\n若未设置src或src文件找不到，则会出现灰色边框\nbackground-size: 100%;设置后可按比例缩放，无需设置高度\n若强制设置高度，则可能变形。\n原因：CSS不能控制图片的大小，当然也不能在css中指定src\n","source":"_posts/css小记录.md","raw":"---\ntitle: css小记录\ndate: 2017-01-18 16:12:07\ntags:\n---\ndiv设置背景图片问题：\n必须设置高度，否则高度为0，背景图片显示不出来\nbackground-size：100%，不生效，不能控制图片的按比例缩放\nbackground: url(\"../images/part_1.png\") no-repeat center top;\n\nimg元素的边框问题：\n若未设置src或src文件找不到，则会出现灰色边框\nbackground-size: 100%;设置后可按比例缩放，无需设置高度\n若强制设置高度，则可能变形。\n原因：CSS不能控制图片的大小，当然也不能在css中指定src\n","slug":"css小记录","published":1,"updated":"2018-05-16T09:03:16.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2p000coyffn0v9z5iz","content":"<p>div设置背景图片问题：<br>必须设置高度，否则高度为0，背景图片显示不出来<br>background-size：100%，不生效，不能控制图片的按比例缩放<br>background: url(“../images/part_1.png”) no-repeat center top;</p>\n<p>img元素的边框问题：<br>若未设置src或src文件找不到，则会出现灰色边框<br>background-size: 100%;设置后可按比例缩放，无需设置高度<br>若强制设置高度，则可能变形。<br>原因：CSS不能控制图片的大小，当然也不能在css中指定src</p>\n","excerpt":"","more":"<p>div设置背景图片问题：<br>必须设置高度，否则高度为0，背景图片显示不出来<br>background-size：100%，不生效，不能控制图片的按比例缩放<br>background: url(“../images/part_1.png”) no-repeat center top;</p>\n<p>img元素的边框问题：<br>若未设置src或src文件找不到，则会出现灰色边框<br>background-size: 100%;设置后可按比例缩放，无需设置高度<br>若强制设置高度，则可能变形。<br>原因：CSS不能控制图片的大小，当然也不能在css中指定src</p>\n"},{"title":"Webflow配置文件分析","date":"2017-01-19T07:38:31.000Z","_content":"Webflow配置文件分析\n在WEB-INF文件夹下的login-webflow.xml是登陆流程的主要配置文件。在该文件中，定义了用户登录的整个处理流程。\n首先，配置文件中的 on-start标签定义了用户第一次进入流程中的预处理动作。该标签对应spring中的id为initialFlowSetupAction的bean。查看该bean（InitialFlowSetupAction）的代码。该类需要继承自AbstractAction，AbstractAction方法是org.springframework.webflow.action包中的类。是webflow中的基础类。该类中的doExecute方法是对应处理业务的方法。就犹如servlet中的service方法一样。该方法的参数是RequestContext对象，该参数是一个流程的容器。该方法从request中获取TGT，并且构建一个临时的service对象（不同域注册的service，详情见接入系统管理）。并且，将TGT和service放在FlowScope作用域中。\n流程的初始化完毕之后，就开始一系列的判断了。也就是进入decision-state节点。这些节点是依次执行的。\n<!-- 检查flow中是否存在TGT如果存在，存在进入hasServiceCheck,为空进入gatewayRequestCheck -->\n    <decision-state id=\"ticketGrantingTicketExistsCheck\">\n       <if test=\"flowScope.ticketGrantingTicketId neq null\" then=\"hasServiceCheck\" else=\"gatewayRequestCheck\" />\n    </decision-state>\n   \n    <!-- 主要是CS结构使用gatewat,暂时不研究 -->\n    <decision-state id=\"gatewayRequestCheck\">\n       <if test=\"externalContext.requestParameterMap['gateway'] neq '' &amp;&amp; externalContext.requestParameterMap['gateway'] neq null &amp;&amp; flowScope.service neq null\" then=\"gatewayServicesManagementCheck\" else=\"viewLoginForm\" />\n    </decision-state>\n   \n    <!-- 存在TGT，说明用户已经登陆,测试flow中service是否为空，不为空，进入renewRequestCheck，为空，进入viewGenericLoginSuccess -->\n    <decision-state id=\"hasServiceCheck\">\n       <if test=\"flowScope.service != null\" then=\"renewRequestCheck\" else=\"viewGenericLoginSuccess\" />\n    </decision-state>\n    <!--\n       用户已经登陆，且请求参数中存在service 判断请求中是否存在'renew'参数，如果renew参数为空或者没有内容，那么，进入viewLoginForm，否则进入generateServiceTicket\n       renew参数和gateway参数不兼容。renew参数将绕过单点登录。也就是说即使用户登录了，还将要求用户登录。(等你妹啊，人家都登录了，凭什么还要让人家再登录一次)\n     -->\n    <decision-state id=\"renewRequestCheck\">\n       <if test=\"externalContext.requestParameterMap['renew'] neq '' &amp;&amp; externalContext.requestParameterMap['renew'] neq null\" then=\"viewLoginForm\" else=\"generateServiceTicket\" />\n    </decision-state>\n   \n    <decision-state id=\"warn\">\n       <if test=\"flowScope.warnCookieValue\" then=\"showWarningView\" else=\"redirect\" />\n    </decision-state>\n \n对应的dicision-state走完之后，如果不存在TGT，其实就会进入voiwLoginForm节点。该节点是一个view-state类型的，这也就是说明该节点是一个页面，view=“casLoginView”属性定义了该view对应的页面是“casLoginView”。这个视图会被spring的视图解析器解析成/WEB-INF/view/jsp/default/ui/casLoginView.jsp页面。用户这时候就能看到一个登陆界面了。\n需要注意的是，用户看到的登录界面中，会有hidden类型的一个lt参数：\n<input type=\"hidden\" name=\"lt\" value=\"${flowExecutionKey}\" />\n该参数可以理解成每个需要登录的用户都有一个流水号。只有有了webflow发放的有效的流水号，用户才可以说明是已经进入了webflow流程。否则，没有流水号的情况下，webflow会认为用户还没有进入webflow流程，从而会重新进入一次webflow流程，从而会重新出现登录界面。\n \n用户点击登录之后，提交到realSubmit节点。该节点执行的是authenticationViaFormAction.submit方法，在该方法中，将会验证用户的认证信息是否正确。验证成功之后，跳转到sendTicketGrantingTicket,在这里，将生成TGT，然后，进入serviceCheck，在serviceCheck中，将会验证flowScope作用域中是否存在service，如果存在，则进入generateServiceTicket，否则进入登录成功页面。在generateServiceTicket中，也将生成ST，同时检查是否有警告信息，然后进行重定向到用户最开始请求的地址。\n至此，springMVC与webflow整合以及登录整个流程已经讲解完毕。\n\n\nlogin-webflow.xml\n<view-state id=\"viewLoginForm\" view=\"casLoginView\" model=\"credential\">\n        <binder>\n        \t<!-- 增加惠商云企业账号登录 -->\n        \t<binding property=\"tenantCode\" required=\"true\"/>\n            <binding property=\"username\" required=\"true\"/>\n            <binding property=\"md5Password\" required=\"true\"/>\n            <binding property=\"shaPassword\" required=\"true\"/>\n            <binding property=\"sysid\" required=\"true\"/>\n            <binding property=\"verify_code\" required=\"true\"/>\n            <binding property=\"isAutoLogin\" required=\"true\"/>\n            <binding property=\"tokeninfo\" required=\"true\"/>\n            <binding property=\"openid\" required=\"true\"/>\n            <binding property=\"tenantid\" required=\"true\"/>\n            <binding property=\"service\" required=\"true\"/>\n            \n            <binding property=\"newpass\" required=\"true\"/> <!-- 修改的新的用户名-->\n            <binding property=\"randomvalue\" required=\"true\"/>  \n        </binder>\n        <on-entry>\n            <set name=\"viewScope.commandName\" value=\"'credential'\"/>\n\n            <!--\n            <evaluate expression=\"samlMetadataUIParserAction\" />\n            -->\n        </on-entry>\n        <transition on=\"submit\" bind=\"true\" validate=\"true\" to=\"realSubmit\"/>\n        \n        <transition on=\"modifyPW\" bind=\"true\" validate=\"true\" to=\"modifyPWSubmit\"/>\n    </view-state>\n\ncasLoginView.jsp\n\n     <% String sysid =  request.getParameter(\"sysid\")  ;\n    String verify_code = request.getParameter(\"verify_code\")  ; \n    String service= request.getParameter(\"service\")  ;  //客户端服务的 地\n    String openid = request.getParameter(\"openid\")  ;\n\n%>","source":"_posts/Webflow配置文件分析.md","raw":"---\ntitle: Webflow配置文件分析\ndate: 2017-01-19 15:38:31\ntags:\n---\nWebflow配置文件分析\n在WEB-INF文件夹下的login-webflow.xml是登陆流程的主要配置文件。在该文件中，定义了用户登录的整个处理流程。\n首先，配置文件中的 on-start标签定义了用户第一次进入流程中的预处理动作。该标签对应spring中的id为initialFlowSetupAction的bean。查看该bean（InitialFlowSetupAction）的代码。该类需要继承自AbstractAction，AbstractAction方法是org.springframework.webflow.action包中的类。是webflow中的基础类。该类中的doExecute方法是对应处理业务的方法。就犹如servlet中的service方法一样。该方法的参数是RequestContext对象，该参数是一个流程的容器。该方法从request中获取TGT，并且构建一个临时的service对象（不同域注册的service，详情见接入系统管理）。并且，将TGT和service放在FlowScope作用域中。\n流程的初始化完毕之后，就开始一系列的判断了。也就是进入decision-state节点。这些节点是依次执行的。\n<!-- 检查flow中是否存在TGT如果存在，存在进入hasServiceCheck,为空进入gatewayRequestCheck -->\n    <decision-state id=\"ticketGrantingTicketExistsCheck\">\n       <if test=\"flowScope.ticketGrantingTicketId neq null\" then=\"hasServiceCheck\" else=\"gatewayRequestCheck\" />\n    </decision-state>\n   \n    <!-- 主要是CS结构使用gatewat,暂时不研究 -->\n    <decision-state id=\"gatewayRequestCheck\">\n       <if test=\"externalContext.requestParameterMap['gateway'] neq '' &amp;&amp; externalContext.requestParameterMap['gateway'] neq null &amp;&amp; flowScope.service neq null\" then=\"gatewayServicesManagementCheck\" else=\"viewLoginForm\" />\n    </decision-state>\n   \n    <!-- 存在TGT，说明用户已经登陆,测试flow中service是否为空，不为空，进入renewRequestCheck，为空，进入viewGenericLoginSuccess -->\n    <decision-state id=\"hasServiceCheck\">\n       <if test=\"flowScope.service != null\" then=\"renewRequestCheck\" else=\"viewGenericLoginSuccess\" />\n    </decision-state>\n    <!--\n       用户已经登陆，且请求参数中存在service 判断请求中是否存在'renew'参数，如果renew参数为空或者没有内容，那么，进入viewLoginForm，否则进入generateServiceTicket\n       renew参数和gateway参数不兼容。renew参数将绕过单点登录。也就是说即使用户登录了，还将要求用户登录。(等你妹啊，人家都登录了，凭什么还要让人家再登录一次)\n     -->\n    <decision-state id=\"renewRequestCheck\">\n       <if test=\"externalContext.requestParameterMap['renew'] neq '' &amp;&amp; externalContext.requestParameterMap['renew'] neq null\" then=\"viewLoginForm\" else=\"generateServiceTicket\" />\n    </decision-state>\n   \n    <decision-state id=\"warn\">\n       <if test=\"flowScope.warnCookieValue\" then=\"showWarningView\" else=\"redirect\" />\n    </decision-state>\n \n对应的dicision-state走完之后，如果不存在TGT，其实就会进入voiwLoginForm节点。该节点是一个view-state类型的，这也就是说明该节点是一个页面，view=“casLoginView”属性定义了该view对应的页面是“casLoginView”。这个视图会被spring的视图解析器解析成/WEB-INF/view/jsp/default/ui/casLoginView.jsp页面。用户这时候就能看到一个登陆界面了。\n需要注意的是，用户看到的登录界面中，会有hidden类型的一个lt参数：\n<input type=\"hidden\" name=\"lt\" value=\"${flowExecutionKey}\" />\n该参数可以理解成每个需要登录的用户都有一个流水号。只有有了webflow发放的有效的流水号，用户才可以说明是已经进入了webflow流程。否则，没有流水号的情况下，webflow会认为用户还没有进入webflow流程，从而会重新进入一次webflow流程，从而会重新出现登录界面。\n \n用户点击登录之后，提交到realSubmit节点。该节点执行的是authenticationViaFormAction.submit方法，在该方法中，将会验证用户的认证信息是否正确。验证成功之后，跳转到sendTicketGrantingTicket,在这里，将生成TGT，然后，进入serviceCheck，在serviceCheck中，将会验证flowScope作用域中是否存在service，如果存在，则进入generateServiceTicket，否则进入登录成功页面。在generateServiceTicket中，也将生成ST，同时检查是否有警告信息，然后进行重定向到用户最开始请求的地址。\n至此，springMVC与webflow整合以及登录整个流程已经讲解完毕。\n\n\nlogin-webflow.xml\n<view-state id=\"viewLoginForm\" view=\"casLoginView\" model=\"credential\">\n        <binder>\n        \t<!-- 增加惠商云企业账号登录 -->\n        \t<binding property=\"tenantCode\" required=\"true\"/>\n            <binding property=\"username\" required=\"true\"/>\n            <binding property=\"md5Password\" required=\"true\"/>\n            <binding property=\"shaPassword\" required=\"true\"/>\n            <binding property=\"sysid\" required=\"true\"/>\n            <binding property=\"verify_code\" required=\"true\"/>\n            <binding property=\"isAutoLogin\" required=\"true\"/>\n            <binding property=\"tokeninfo\" required=\"true\"/>\n            <binding property=\"openid\" required=\"true\"/>\n            <binding property=\"tenantid\" required=\"true\"/>\n            <binding property=\"service\" required=\"true\"/>\n            \n            <binding property=\"newpass\" required=\"true\"/> <!-- 修改的新的用户名-->\n            <binding property=\"randomvalue\" required=\"true\"/>  \n        </binder>\n        <on-entry>\n            <set name=\"viewScope.commandName\" value=\"'credential'\"/>\n\n            <!--\n            <evaluate expression=\"samlMetadataUIParserAction\" />\n            -->\n        </on-entry>\n        <transition on=\"submit\" bind=\"true\" validate=\"true\" to=\"realSubmit\"/>\n        \n        <transition on=\"modifyPW\" bind=\"true\" validate=\"true\" to=\"modifyPWSubmit\"/>\n    </view-state>\n\ncasLoginView.jsp\n\n     <% String sysid =  request.getParameter(\"sysid\")  ;\n    String verify_code = request.getParameter(\"verify_code\")  ; \n    String service= request.getParameter(\"service\")  ;  //客户端服务的 地\n    String openid = request.getParameter(\"openid\")  ;\n\n%>","slug":"Webflow配置文件分析","published":1,"updated":"2018-05-16T09:03:16.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2q000doyff5yoq1ozn","content":"<p>Webflow配置文件分析<br>在WEB-INF文件夹下的login-webflow.xml是登陆流程的主要配置文件。在该文件中，定义了用户登录的整个处理流程。<br>首先，配置文件中的 on-start标签定义了用户第一次进入流程中的预处理动作。该标签对应spring中的id为initialFlowSetupAction的bean。查看该bean（InitialFlowSetupAction）的代码。该类需要继承自AbstractAction，AbstractAction方法是org.springframework.webflow.action包中的类。是webflow中的基础类。该类中的doExecute方法是对应处理业务的方法。就犹如servlet中的service方法一样。该方法的参数是RequestContext对象，该参数是一个流程的容器。该方法从request中获取TGT，并且构建一个临时的service对象（不同域注册的service，详情见接入系统管理）。并且，将TGT和service放在FlowScope作用域中。<br>流程的初始化完毕之后，就开始一系列的判断了。也就是进入decision-state节点。这些节点是依次执行的。<br><!-- 检查flow中是否存在TGT如果存在，存在进入hasServiceCheck,为空进入gatewayRequestCheck --><br>    <decision-state id=\"ticketGrantingTicketExistsCheck\"><br>       <if test=\"flowScope.ticketGrantingTicketId neq null\" then=\"hasServiceCheck\" else=\"gatewayRequestCheck\"><br>    </if></decision-state></p>\n<pre><code>&lt;!-- 主要是CS结构使用gatewat,暂时不研究 --&gt;\n&lt;decision-state id=&quot;gatewayRequestCheck&quot;&gt;\n   &lt;if test=&quot;externalContext.requestParameterMap[&apos;gateway&apos;] neq &apos;&apos; &amp;amp;&amp;amp; externalContext.requestParameterMap[&apos;gateway&apos;] neq null &amp;amp;&amp;amp; flowScope.service neq null&quot; then=&quot;gatewayServicesManagementCheck&quot; else=&quot;viewLoginForm&quot; /&gt;\n&lt;/decision-state&gt;\n\n&lt;!-- 存在TGT，说明用户已经登陆,测试flow中service是否为空，不为空，进入renewRequestCheck，为空，进入viewGenericLoginSuccess --&gt;\n&lt;decision-state id=&quot;hasServiceCheck&quot;&gt;\n   &lt;if test=&quot;flowScope.service != null&quot; then=&quot;renewRequestCheck&quot; else=&quot;viewGenericLoginSuccess&quot; /&gt;\n&lt;/decision-state&gt;\n&lt;!--\n   用户已经登陆，且请求参数中存在service 判断请求中是否存在&apos;renew&apos;参数，如果renew参数为空或者没有内容，那么，进入viewLoginForm，否则进入generateServiceTicket\n   renew参数和gateway参数不兼容。renew参数将绕过单点登录。也就是说即使用户登录了，还将要求用户登录。(等你妹啊，人家都登录了，凭什么还要让人家再登录一次)\n --&gt;\n&lt;decision-state id=&quot;renewRequestCheck&quot;&gt;\n   &lt;if test=&quot;externalContext.requestParameterMap[&apos;renew&apos;] neq &apos;&apos; &amp;amp;&amp;amp; externalContext.requestParameterMap[&apos;renew&apos;] neq null&quot; then=&quot;viewLoginForm&quot; else=&quot;generateServiceTicket&quot; /&gt;\n&lt;/decision-state&gt;\n\n&lt;decision-state id=&quot;warn&quot;&gt;\n   &lt;if test=&quot;flowScope.warnCookieValue&quot; then=&quot;showWarningView&quot; else=&quot;redirect&quot; /&gt;\n&lt;/decision-state&gt;\n</code></pre><p>对应的dicision-state走完之后，如果不存在TGT，其实就会进入voiwLoginForm节点。该节点是一个view-state类型的，这也就是说明该节点是一个页面，view=“casLoginView”属性定义了该view对应的页面是“casLoginView”。这个视图会被spring的视图解析器解析成/WEB-INF/view/jsp/default/ui/casLoginView.jsp页面。用户这时候就能看到一个登陆界面了。<br>需要注意的是，用户看到的登录界面中，会有hidden类型的一个lt参数：</p>\n<p><input type=\"hidden\" name=\"lt\" value=\"${flowExecutionKey}\"><br>该参数可以理解成每个需要登录的用户都有一个流水号。只有有了webflow发放的有效的流水号，用户才可以说明是已经进入了webflow流程。否则，没有流水号的情况下，webflow会认为用户还没有进入webflow流程，从而会重新进入一次webflow流程，从而会重新出现登录界面。</p>\n<p>用户点击登录之后，提交到realSubmit节点。该节点执行的是authenticationViaFormAction.submit方法，在该方法中，将会验证用户的认证信息是否正确。验证成功之后，跳转到sendTicketGrantingTicket,在这里，将生成TGT，然后，进入serviceCheck，在serviceCheck中，将会验证flowScope作用域中是否存在service，如果存在，则进入generateServiceTicket，否则进入登录成功页面。在generateServiceTicket中，也将生成ST，同时检查是否有警告信息，然后进行重定向到用户最开始请求的地址。<br>至此，springMVC与webflow整合以及登录整个流程已经讲解完毕。</p>\n<p>login-webflow.xml</p>\n<p><view-state id=\"viewLoginForm\" view=\"casLoginView\" model=\"credential\"><br>        <binder><br>            <!-- 增加惠商云企业账号登录 --><br>            <binding property=\"tenantCode\" required=\"true\"><br>            <binding property=\"username\" required=\"true\"><br>            <binding property=\"md5Password\" required=\"true\"><br>            <binding property=\"shaPassword\" required=\"true\"><br>            <binding property=\"sysid\" required=\"true\"><br>            <binding property=\"verify_code\" required=\"true\"><br>            <binding property=\"isAutoLogin\" required=\"true\"><br>            <binding property=\"tokeninfo\" required=\"true\"><br>            <binding property=\"openid\" required=\"true\"><br>            <binding property=\"tenantid\" required=\"true\"><br>            <binding property=\"service\" required=\"true\"></binding></binding></binding></binding></binding></binding></binding></binding></binding></binding></binding></binder></view-state></p>\n<pre><code>        &lt;binding property=&quot;newpass&quot; required=&quot;true&quot;/&gt; &lt;!-- 修改的新的用户名--&gt;\n        &lt;binding property=&quot;randomvalue&quot; required=&quot;true&quot;/&gt;  \n    &lt;/binder&gt;\n    &lt;on-entry&gt;\n        &lt;set name=&quot;viewScope.commandName&quot; value=&quot;&apos;credential&apos;&quot;/&gt;\n\n        &lt;!--\n        &lt;evaluate expression=&quot;samlMetadataUIParserAction&quot; /&gt;\n        --&gt;\n    &lt;/on-entry&gt;\n    &lt;transition on=&quot;submit&quot; bind=&quot;true&quot; validate=&quot;true&quot; to=&quot;realSubmit&quot;/&gt;\n\n    &lt;transition on=&quot;modifyPW&quot; bind=&quot;true&quot; validate=&quot;true&quot; to=&quot;modifyPWSubmit&quot;/&gt;\n&lt;/view-state&gt;\n</code></pre><p>casLoginView.jsp</p>\n<pre><code> &lt;% String sysid =  request.getParameter(&quot;sysid&quot;)  ;\nString verify_code = request.getParameter(&quot;verify_code&quot;)  ; \nString service= request.getParameter(&quot;service&quot;)  ;  //客户端服务的 地\nString openid = request.getParameter(&quot;openid&quot;)  ;\n</code></pre><p>%&gt;</p>\n","excerpt":"","more":"<p>Webflow配置文件分析<br>在WEB-INF文件夹下的login-webflow.xml是登陆流程的主要配置文件。在该文件中，定义了用户登录的整个处理流程。<br>首先，配置文件中的 on-start标签定义了用户第一次进入流程中的预处理动作。该标签对应spring中的id为initialFlowSetupAction的bean。查看该bean（InitialFlowSetupAction）的代码。该类需要继承自AbstractAction，AbstractAction方法是org.springframework.webflow.action包中的类。是webflow中的基础类。该类中的doExecute方法是对应处理业务的方法。就犹如servlet中的service方法一样。该方法的参数是RequestContext对象，该参数是一个流程的容器。该方法从request中获取TGT，并且构建一个临时的service对象（不同域注册的service，详情见接入系统管理）。并且，将TGT和service放在FlowScope作用域中。<br>流程的初始化完毕之后，就开始一系列的判断了。也就是进入decision-state节点。这些节点是依次执行的。<br><!-- 检查flow中是否存在TGT如果存在，存在进入hasServiceCheck,为空进入gatewayRequestCheck --><br>    <decision-state id=\"ticketGrantingTicketExistsCheck\"><br>       <if test=\"flowScope.ticketGrantingTicketId neq null\" then=\"hasServiceCheck\" else=\"gatewayRequestCheck\" /><br>    </decision-state></p>\n<pre><code>&lt;!-- 主要是CS结构使用gatewat,暂时不研究 --&gt;\n&lt;decision-state id=&quot;gatewayRequestCheck&quot;&gt;\n   &lt;if test=&quot;externalContext.requestParameterMap[&apos;gateway&apos;] neq &apos;&apos; &amp;amp;&amp;amp; externalContext.requestParameterMap[&apos;gateway&apos;] neq null &amp;amp;&amp;amp; flowScope.service neq null&quot; then=&quot;gatewayServicesManagementCheck&quot; else=&quot;viewLoginForm&quot; /&gt;\n&lt;/decision-state&gt;\n\n&lt;!-- 存在TGT，说明用户已经登陆,测试flow中service是否为空，不为空，进入renewRequestCheck，为空，进入viewGenericLoginSuccess --&gt;\n&lt;decision-state id=&quot;hasServiceCheck&quot;&gt;\n   &lt;if test=&quot;flowScope.service != null&quot; then=&quot;renewRequestCheck&quot; else=&quot;viewGenericLoginSuccess&quot; /&gt;\n&lt;/decision-state&gt;\n&lt;!--\n   用户已经登陆，且请求参数中存在service 判断请求中是否存在&apos;renew&apos;参数，如果renew参数为空或者没有内容，那么，进入viewLoginForm，否则进入generateServiceTicket\n   renew参数和gateway参数不兼容。renew参数将绕过单点登录。也就是说即使用户登录了，还将要求用户登录。(等你妹啊，人家都登录了，凭什么还要让人家再登录一次)\n --&gt;\n&lt;decision-state id=&quot;renewRequestCheck&quot;&gt;\n   &lt;if test=&quot;externalContext.requestParameterMap[&apos;renew&apos;] neq &apos;&apos; &amp;amp;&amp;amp; externalContext.requestParameterMap[&apos;renew&apos;] neq null&quot; then=&quot;viewLoginForm&quot; else=&quot;generateServiceTicket&quot; /&gt;\n&lt;/decision-state&gt;\n\n&lt;decision-state id=&quot;warn&quot;&gt;\n   &lt;if test=&quot;flowScope.warnCookieValue&quot; then=&quot;showWarningView&quot; else=&quot;redirect&quot; /&gt;\n&lt;/decision-state&gt;\n</code></pre><p>对应的dicision-state走完之后，如果不存在TGT，其实就会进入voiwLoginForm节点。该节点是一个view-state类型的，这也就是说明该节点是一个页面，view=“casLoginView”属性定义了该view对应的页面是“casLoginView”。这个视图会被spring的视图解析器解析成/WEB-INF/view/jsp/default/ui/casLoginView.jsp页面。用户这时候就能看到一个登陆界面了。<br>需要注意的是，用户看到的登录界面中，会有hidden类型的一个lt参数：</p>\n<p><input type=\"hidden\" name=\"lt\" value=\"${flowExecutionKey}\" /><br>该参数可以理解成每个需要登录的用户都有一个流水号。只有有了webflow发放的有效的流水号，用户才可以说明是已经进入了webflow流程。否则，没有流水号的情况下，webflow会认为用户还没有进入webflow流程，从而会重新进入一次webflow流程，从而会重新出现登录界面。</p>\n<p>用户点击登录之后，提交到realSubmit节点。该节点执行的是authenticationViaFormAction.submit方法，在该方法中，将会验证用户的认证信息是否正确。验证成功之后，跳转到sendTicketGrantingTicket,在这里，将生成TGT，然后，进入serviceCheck，在serviceCheck中，将会验证flowScope作用域中是否存在service，如果存在，则进入generateServiceTicket，否则进入登录成功页面。在generateServiceTicket中，也将生成ST，同时检查是否有警告信息，然后进行重定向到用户最开始请求的地址。<br>至此，springMVC与webflow整合以及登录整个流程已经讲解完毕。</p>\n<p>login-webflow.xml</p>\n<p><view-state id=\"viewLoginForm\" view=\"casLoginView\" model=\"credential\"><br>        <binder><br>            <!-- 增加惠商云企业账号登录 --><br>            <binding property=\"tenantCode\" required=\"true\"/><br>            <binding property=\"username\" required=\"true\"/><br>            <binding property=\"md5Password\" required=\"true\"/><br>            <binding property=\"shaPassword\" required=\"true\"/><br>            <binding property=\"sysid\" required=\"true\"/><br>            <binding property=\"verify_code\" required=\"true\"/><br>            <binding property=\"isAutoLogin\" required=\"true\"/><br>            <binding property=\"tokeninfo\" required=\"true\"/><br>            <binding property=\"openid\" required=\"true\"/><br>            <binding property=\"tenantid\" required=\"true\"/><br>            <binding property=\"service\" required=\"true\"/></p>\n<pre><code>        &lt;binding property=&quot;newpass&quot; required=&quot;true&quot;/&gt; &lt;!-- 修改的新的用户名--&gt;\n        &lt;binding property=&quot;randomvalue&quot; required=&quot;true&quot;/&gt;  \n    &lt;/binder&gt;\n    &lt;on-entry&gt;\n        &lt;set name=&quot;viewScope.commandName&quot; value=&quot;&apos;credential&apos;&quot;/&gt;\n\n        &lt;!--\n        &lt;evaluate expression=&quot;samlMetadataUIParserAction&quot; /&gt;\n        --&gt;\n    &lt;/on-entry&gt;\n    &lt;transition on=&quot;submit&quot; bind=&quot;true&quot; validate=&quot;true&quot; to=&quot;realSubmit&quot;/&gt;\n\n    &lt;transition on=&quot;modifyPW&quot; bind=&quot;true&quot; validate=&quot;true&quot; to=&quot;modifyPWSubmit&quot;/&gt;\n&lt;/view-state&gt;\n</code></pre><p>casLoginView.jsp</p>\n<pre><code> &lt;% String sysid =  request.getParameter(&quot;sysid&quot;)  ;\nString verify_code = request.getParameter(&quot;verify_code&quot;)  ; \nString service= request.getParameter(&quot;service&quot;)  ;  //客户端服务的 地\nString openid = request.getParameter(&quot;openid&quot;)  ;\n</code></pre><p>%&gt;</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-05-16T09:03:16.182Z","updated":"2018-05-16T09:03:16.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2r000eoyffabmhhz1x","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"jhipster搭建Mciroservice","date":"2017-01-12T05:41:34.000Z","_content":"\n简介\njhipster简单来说是一个基于nodejs+yeoman的java代码生成器。往大了说是基于java的一套微服务解决方案。请注意是一整套的微服务解决方案。jhipster在整个程序架构上都做好了整合，包括前端mvvm框架（angularjs），前端构建工具（gulp）到后端的微服务框架（spring cloud）和hibernate/mongodb，再到单元测试/ui测试。\n毫不客气的说 ：学会了这套框架，你就是程序开发/程序架构界的潮男。对,hipster的意思就是：追求新奇的人。\n\ndemo\n下面跟着我来一步一步的来见证奇迹。\n\n1.安装nodejs。\n\n2.安装yeoman/bower/gulp npm install -g yo bower gulp-cli\n\n3.安装jhipster npm install -g generator-jhipster\n\n是不是被gfw艹翻了？哈哈哈\n\n## 生成单机服务app\ncd到你想存放代码的路径，然后运行：yo jhipster\n第一个选择很重要，项目类型要选择第一个，单机服务\n后面的根据实际情况，选择就可以。失败了也没关系，删掉文件夹重新来过。\n\n------生成成功后运行 \n./mvnw 或者gradlew下载依赖包。\n./mvnw (on Mac OS X/Linux) of mvnw (on Windows)\n\n\n## 生成mciroservice app\n生成基础架构\n\ncd到你想存放代码的路径，然后运行：yo jhipster\n\n这时候jhipster向导就会启动了,如图：\n![image](http://images2015.cnblogs.com/blog/33454/201607/33454-20160722105819779-322820644.png)\n\n第一个选择很重要，项目类型要选择microservice application\n后面的根据实际情况，选择就可以。失败了也没关系，删掉文件夹重新来过。\n\n------生成成功后运行 ./mvnw 或者gradlew下载依赖包。\n\njhipster是可以生成实体和实体的增删改查带分页的\n\n运行yo jhipster:entity <entityName>来启动实体生成向导。\n\n然后跟着向导输入信息。\n\n## 生成microservie gateway\n生成基础架构\n\n继续运行：yo jhipster\n第一个选择很重要，项目类型要选择*microservice gateway\n\n这个时候如果还被gfw折磨，你应该考虑ss或者vpn了。\n\n生成实体\n\n运行yo jhipster:entity <entityName>来启动实体生成向导。\n\n然后跟着向导输入信息。\n\n此处需要注意：\n\n1.询问是否选择存在的app时 选择是\n\n2.<entityName>需要时在app中生成过的\n\n## 运行 jhipster registry\njhipster registry是一个基于spring cloud的配置中心，jhipster的微服务架构依赖此程序。\n\n1 从github下载源码https://github.com/jhipster/jhipster-registry\n\n2 cd 到解压目录 然后运行 ./mvnw或者gradlew 启动应用\n\n浏览器地址：http://127.0.0.1:8761/.\n效果如图\n![image](http://images2015.cnblogs.com/blog/33454/201607/33454-20160722105802779-429391766.png)\n默认用户名：密码  admin:admin\n\n这个时候就可以启动app和gateway了。\n\ncd到刚才存放microservice app的目录 运行./\n\ncd到刚才存放microservice gateway的目录 运行./mvnw\n\n然后打开浏览器见证奇迹\n","source":"_posts/jhipster搭建Mciroservice.md","raw":"---\ntitle: jhipster搭建Mciroservice\ndate: 2017-01-12 13:41:34\ntags:\n---\n\n简介\njhipster简单来说是一个基于nodejs+yeoman的java代码生成器。往大了说是基于java的一套微服务解决方案。请注意是一整套的微服务解决方案。jhipster在整个程序架构上都做好了整合，包括前端mvvm框架（angularjs），前端构建工具（gulp）到后端的微服务框架（spring cloud）和hibernate/mongodb，再到单元测试/ui测试。\n毫不客气的说 ：学会了这套框架，你就是程序开发/程序架构界的潮男。对,hipster的意思就是：追求新奇的人。\n\ndemo\n下面跟着我来一步一步的来见证奇迹。\n\n1.安装nodejs。\n\n2.安装yeoman/bower/gulp npm install -g yo bower gulp-cli\n\n3.安装jhipster npm install -g generator-jhipster\n\n是不是被gfw艹翻了？哈哈哈\n\n## 生成单机服务app\ncd到你想存放代码的路径，然后运行：yo jhipster\n第一个选择很重要，项目类型要选择第一个，单机服务\n后面的根据实际情况，选择就可以。失败了也没关系，删掉文件夹重新来过。\n\n------生成成功后运行 \n./mvnw 或者gradlew下载依赖包。\n./mvnw (on Mac OS X/Linux) of mvnw (on Windows)\n\n\n## 生成mciroservice app\n生成基础架构\n\ncd到你想存放代码的路径，然后运行：yo jhipster\n\n这时候jhipster向导就会启动了,如图：\n![image](http://images2015.cnblogs.com/blog/33454/201607/33454-20160722105819779-322820644.png)\n\n第一个选择很重要，项目类型要选择microservice application\n后面的根据实际情况，选择就可以。失败了也没关系，删掉文件夹重新来过。\n\n------生成成功后运行 ./mvnw 或者gradlew下载依赖包。\n\njhipster是可以生成实体和实体的增删改查带分页的\n\n运行yo jhipster:entity <entityName>来启动实体生成向导。\n\n然后跟着向导输入信息。\n\n## 生成microservie gateway\n生成基础架构\n\n继续运行：yo jhipster\n第一个选择很重要，项目类型要选择*microservice gateway\n\n这个时候如果还被gfw折磨，你应该考虑ss或者vpn了。\n\n生成实体\n\n运行yo jhipster:entity <entityName>来启动实体生成向导。\n\n然后跟着向导输入信息。\n\n此处需要注意：\n\n1.询问是否选择存在的app时 选择是\n\n2.<entityName>需要时在app中生成过的\n\n## 运行 jhipster registry\njhipster registry是一个基于spring cloud的配置中心，jhipster的微服务架构依赖此程序。\n\n1 从github下载源码https://github.com/jhipster/jhipster-registry\n\n2 cd 到解压目录 然后运行 ./mvnw或者gradlew 启动应用\n\n浏览器地址：http://127.0.0.1:8761/.\n效果如图\n![image](http://images2015.cnblogs.com/blog/33454/201607/33454-20160722105802779-429391766.png)\n默认用户名：密码  admin:admin\n\n这个时候就可以启动app和gateway了。\n\ncd到刚才存放microservice app的目录 运行./\n\ncd到刚才存放microservice gateway的目录 运行./mvnw\n\n然后打开浏览器见证奇迹\n","slug":"jhipster搭建Mciroservice","published":1,"updated":"2018-05-16T09:03:16.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2s000foyffnnhk6bby","content":"<p>简介<br>jhipster简单来说是一个基于nodejs+yeoman的java代码生成器。往大了说是基于java的一套微服务解决方案。请注意是一整套的微服务解决方案。jhipster在整个程序架构上都做好了整合，包括前端mvvm框架（angularjs），前端构建工具（gulp）到后端的微服务框架（spring cloud）和hibernate/mongodb，再到单元测试/ui测试。<br>毫不客气的说 ：学会了这套框架，你就是程序开发/程序架构界的潮男。对,hipster的意思就是：追求新奇的人。</p>\n<p>demo<br>下面跟着我来一步一步的来见证奇迹。</p>\n<p>1.安装nodejs。</p>\n<p>2.安装yeoman/bower/gulp npm install -g yo bower gulp-cli</p>\n<p>3.安装jhipster npm install -g generator-jhipster</p>\n<p>是不是被gfw艹翻了？哈哈哈</p>\n<h2 id=\"生成单机服务app\"><a href=\"#生成单机服务app\" class=\"headerlink\" title=\"生成单机服务app\"></a>生成单机服务app</h2><p>cd到你想存放代码的路径，然后运行：yo jhipster<br>第一个选择很重要，项目类型要选择第一个，单机服务<br>后面的根据实际情况，选择就可以。失败了也没关系，删掉文件夹重新来过。</p>\n<p>——生成成功后运行<br>./mvnw 或者gradlew下载依赖包。<br>./mvnw (on Mac OS X/Linux) of mvnw (on Windows)</p>\n<h2 id=\"生成mciroservice-app\"><a href=\"#生成mciroservice-app\" class=\"headerlink\" title=\"生成mciroservice app\"></a>生成mciroservice app</h2><p>生成基础架构</p>\n<p>cd到你想存放代码的路径，然后运行：yo jhipster</p>\n<p>这时候jhipster向导就会启动了,如图：<br><img src=\"http://images2015.cnblogs.com/blog/33454/201607/33454-20160722105819779-322820644.png\" alt=\"image\"></p>\n<p>第一个选择很重要，项目类型要选择microservice application<br>后面的根据实际情况，选择就可以。失败了也没关系，删掉文件夹重新来过。</p>\n<p>——生成成功后运行 ./mvnw 或者gradlew下载依赖包。</p>\n<p>jhipster是可以生成实体和实体的增删改查带分页的</p>\n<p>运行yo jhipster:entity <entityname>来启动实体生成向导。</entityname></p>\n<p>然后跟着向导输入信息。</p>\n<h2 id=\"生成microservie-gateway\"><a href=\"#生成microservie-gateway\" class=\"headerlink\" title=\"生成microservie gateway\"></a>生成microservie gateway</h2><p>生成基础架构</p>\n<p>继续运行：yo jhipster<br>第一个选择很重要，项目类型要选择*microservice gateway</p>\n<p>这个时候如果还被gfw折磨，你应该考虑ss或者vpn了。</p>\n<p>生成实体</p>\n<p>运行yo jhipster:entity <entityname>来启动实体生成向导。</entityname></p>\n<p>然后跟着向导输入信息。</p>\n<p>此处需要注意：</p>\n<p>1.询问是否选择存在的app时 选择是</p>\n<p>2.<entityname>需要时在app中生成过的</entityname></p>\n<h2 id=\"运行-jhipster-registry\"><a href=\"#运行-jhipster-registry\" class=\"headerlink\" title=\"运行 jhipster registry\"></a>运行 jhipster registry</h2><p>jhipster registry是一个基于spring cloud的配置中心，jhipster的微服务架构依赖此程序。</p>\n<p>1 从github下载源码<a href=\"https://github.com/jhipster/jhipster-registry\" target=\"_blank\" rel=\"external\">https://github.com/jhipster/jhipster-registry</a></p>\n<p>2 cd 到解压目录 然后运行 ./mvnw或者gradlew 启动应用</p>\n<p>浏览器地址：<a href=\"http://127.0.0.1:8761/\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8761/</a>.<br>效果如图<br><img src=\"http://images2015.cnblogs.com/blog/33454/201607/33454-20160722105802779-429391766.png\" alt=\"image\"><br>默认用户名：密码  admin:admin</p>\n<p>这个时候就可以启动app和gateway了。</p>\n<p>cd到刚才存放microservice app的目录 运行./</p>\n<p>cd到刚才存放microservice gateway的目录 运行./mvnw</p>\n<p>然后打开浏览器见证奇迹</p>\n","excerpt":"","more":"<p>简介<br>jhipster简单来说是一个基于nodejs+yeoman的java代码生成器。往大了说是基于java的一套微服务解决方案。请注意是一整套的微服务解决方案。jhipster在整个程序架构上都做好了整合，包括前端mvvm框架（angularjs），前端构建工具（gulp）到后端的微服务框架（spring cloud）和hibernate/mongodb，再到单元测试/ui测试。<br>毫不客气的说 ：学会了这套框架，你就是程序开发/程序架构界的潮男。对,hipster的意思就是：追求新奇的人。</p>\n<p>demo<br>下面跟着我来一步一步的来见证奇迹。</p>\n<p>1.安装nodejs。</p>\n<p>2.安装yeoman/bower/gulp npm install -g yo bower gulp-cli</p>\n<p>3.安装jhipster npm install -g generator-jhipster</p>\n<p>是不是被gfw艹翻了？哈哈哈</p>\n<h2 id=\"生成单机服务app\"><a href=\"#生成单机服务app\" class=\"headerlink\" title=\"生成单机服务app\"></a>生成单机服务app</h2><p>cd到你想存放代码的路径，然后运行：yo jhipster<br>第一个选择很重要，项目类型要选择第一个，单机服务<br>后面的根据实际情况，选择就可以。失败了也没关系，删掉文件夹重新来过。</p>\n<p>——生成成功后运行<br>./mvnw 或者gradlew下载依赖包。<br>./mvnw (on Mac OS X/Linux) of mvnw (on Windows)</p>\n<h2 id=\"生成mciroservice-app\"><a href=\"#生成mciroservice-app\" class=\"headerlink\" title=\"生成mciroservice app\"></a>生成mciroservice app</h2><p>生成基础架构</p>\n<p>cd到你想存放代码的路径，然后运行：yo jhipster</p>\n<p>这时候jhipster向导就会启动了,如图：<br><img src=\"http://images2015.cnblogs.com/blog/33454/201607/33454-20160722105819779-322820644.png\" alt=\"image\"></p>\n<p>第一个选择很重要，项目类型要选择microservice application<br>后面的根据实际情况，选择就可以。失败了也没关系，删掉文件夹重新来过。</p>\n<p>——生成成功后运行 ./mvnw 或者gradlew下载依赖包。</p>\n<p>jhipster是可以生成实体和实体的增删改查带分页的</p>\n<p>运行yo jhipster:entity <entityName>来启动实体生成向导。</p>\n<p>然后跟着向导输入信息。</p>\n<h2 id=\"生成microservie-gateway\"><a href=\"#生成microservie-gateway\" class=\"headerlink\" title=\"生成microservie gateway\"></a>生成microservie gateway</h2><p>生成基础架构</p>\n<p>继续运行：yo jhipster<br>第一个选择很重要，项目类型要选择*microservice gateway</p>\n<p>这个时候如果还被gfw折磨，你应该考虑ss或者vpn了。</p>\n<p>生成实体</p>\n<p>运行yo jhipster:entity <entityName>来启动实体生成向导。</p>\n<p>然后跟着向导输入信息。</p>\n<p>此处需要注意：</p>\n<p>1.询问是否选择存在的app时 选择是</p>\n<p>2.<entityName>需要时在app中生成过的</p>\n<h2 id=\"运行-jhipster-registry\"><a href=\"#运行-jhipster-registry\" class=\"headerlink\" title=\"运行 jhipster registry\"></a>运行 jhipster registry</h2><p>jhipster registry是一个基于spring cloud的配置中心，jhipster的微服务架构依赖此程序。</p>\n<p>1 从github下载源码<a href=\"https://github.com/jhipster/jhipster-registry\">https://github.com/jhipster/jhipster-registry</a></p>\n<p>2 cd 到解压目录 然后运行 ./mvnw或者gradlew 启动应用</p>\n<p>浏览器地址：<a href=\"http://127.0.0.1:8761/\">http://127.0.0.1:8761/</a>.<br>效果如图<br><img src=\"http://images2015.cnblogs.com/blog/33454/201607/33454-20160722105802779-429391766.png\" alt=\"image\"><br>默认用户名：密码  admin:admin</p>\n<p>这个时候就可以启动app和gateway了。</p>\n<p>cd到刚才存放microservice app的目录 运行./</p>\n<p>cd到刚才存放microservice gateway的目录 运行./mvnw</p>\n<p>然后打开浏览器见证奇迹</p>\n"},{"title":"js自执行函数","date":"2016-12-15T06:59:19.000Z","_content":"js自执行函数的几种不同写法的比较\n\n经常需要一个函数自执行，可惜这一种写法是错的： \n复制代码 代码如下:\n```python\nfunction(){alert(1);}(); \n```\n\n原因是前半段“function(){alert(1);}”被当成了函数声明，而不是一个函数表达式，从而让后面的“();”变得孤立，产生语法错。 \n\n按上面的分析，这一段代码虽说没有语法错，但也是不符合我们的预期的，因为这个函数并没有自执行。 \n复制代码 代码如下:\n\n```python\nfunction(){alert(1);}(1); \n```\n综上，症结在于，如何明确代码描述的是一个函数表达式，而不是函数声明语句。 \n正确的写法多种多样，也各有利弊： \n\n方法1：最前最后加括号 \n\n复制代码 代码如下:\n```python\n(function(){alert(1);}()); \n```\n这是jslint推荐的写法，好处是，能提醒阅读代码的人，这段代码是一个整体。 \n例如，在有语法高亮匹配功能的编辑器里，光标在第一个左括号后时，最后一个右括号也会高亮，看代码的人一眼就可以看到这个整体。 \n不过，对于某些写代码不喜欢在行后加分号的同学，也会形成一些坑坑，例如以下代码会报运行错： \n复制代码 代码如下:\n```python\nvar a=1 \n(function(){alert(1);}()); \n```\n\n方法2：function外面加括号 \n\n复制代码 代码如下:\n```python\n(function(){alert(1);})(); \n```\n这种做法比方法1少了一个代码整体性的好处。 \n\n方法3：function前面加运算符，常见的是!与void 。 \n复制代码 代码如下:\n```python\n!function(){alert(1);}(); \nvoid function(){alert(2);}(); \n```\n\n显然，加上“!”或“+”等运算符，写起来是最简单的。 \n加上“void ”要敲五下键盘，但是听说有一个好处是，比加\"!\"少一次逻辑运算。----我只是听说，不明所以。 \n\n最后，代表我个人，强烈支持方法1,即jslint的推荐写法： \n复制代码 代码如下:\n```python\n(function(){alert(1);}()); \n```","source":"_posts/js自执行函数.md","raw":"---\ntitle: js自执行函数\ndate: 2016-12-15 14:59:19\ntags:\n---\njs自执行函数的几种不同写法的比较\n\n经常需要一个函数自执行，可惜这一种写法是错的： \n复制代码 代码如下:\n```python\nfunction(){alert(1);}(); \n```\n\n原因是前半段“function(){alert(1);}”被当成了函数声明，而不是一个函数表达式，从而让后面的“();”变得孤立，产生语法错。 \n\n按上面的分析，这一段代码虽说没有语法错，但也是不符合我们的预期的，因为这个函数并没有自执行。 \n复制代码 代码如下:\n\n```python\nfunction(){alert(1);}(1); \n```\n综上，症结在于，如何明确代码描述的是一个函数表达式，而不是函数声明语句。 \n正确的写法多种多样，也各有利弊： \n\n方法1：最前最后加括号 \n\n复制代码 代码如下:\n```python\n(function(){alert(1);}()); \n```\n这是jslint推荐的写法，好处是，能提醒阅读代码的人，这段代码是一个整体。 \n例如，在有语法高亮匹配功能的编辑器里，光标在第一个左括号后时，最后一个右括号也会高亮，看代码的人一眼就可以看到这个整体。 \n不过，对于某些写代码不喜欢在行后加分号的同学，也会形成一些坑坑，例如以下代码会报运行错： \n复制代码 代码如下:\n```python\nvar a=1 \n(function(){alert(1);}()); \n```\n\n方法2：function外面加括号 \n\n复制代码 代码如下:\n```python\n(function(){alert(1);})(); \n```\n这种做法比方法1少了一个代码整体性的好处。 \n\n方法3：function前面加运算符，常见的是!与void 。 \n复制代码 代码如下:\n```python\n!function(){alert(1);}(); \nvoid function(){alert(2);}(); \n```\n\n显然，加上“!”或“+”等运算符，写起来是最简单的。 \n加上“void ”要敲五下键盘，但是听说有一个好处是，比加\"!\"少一次逻辑运算。----我只是听说，不明所以。 \n\n最后，代表我个人，强烈支持方法1,即jslint的推荐写法： \n复制代码 代码如下:\n```python\n(function(){alert(1);}()); \n```","slug":"js自执行函数","published":1,"updated":"2018-05-16T09:03:16.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2s000goyff2phg7udr","content":"<p>js自执行函数的几种不同写法的比较</p>\n<p>经常需要一个函数自执行，可惜这一种写法是错的：<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">function()&#123;alert(<span class=\"number\">1</span>);&#125;();</div></pre></td></tr></table></figure></p>\n<p>原因是前半段“function(){alert(1);}”被当成了函数声明，而不是一个函数表达式，从而让后面的“();”变得孤立，产生语法错。 </p>\n<p>按上面的分析，这一段代码虽说没有语法错，但也是不符合我们的预期的，因为这个函数并没有自执行。<br>复制代码 代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">function()&#123;alert(<span class=\"number\">1</span>);&#125;(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<p>综上，症结在于，如何明确代码描述的是一个函数表达式，而不是函数声明语句。<br>正确的写法多种多样，也各有利弊： </p>\n<p>方法1：最前最后加括号 </p>\n<p>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;());</div></pre></td></tr></table></figure></p>\n<p>这是jslint推荐的写法，好处是，能提醒阅读代码的人，这段代码是一个整体。<br>例如，在有语法高亮匹配功能的编辑器里，光标在第一个左括号后时，最后一个右括号也会高亮，看代码的人一眼就可以看到这个整体。<br>不过，对于某些写代码不喜欢在行后加分号的同学，也会形成一些坑坑，例如以下代码会报运行错：<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a=<span class=\"number\">1</span> </div><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;());</div></pre></td></tr></table></figure></p>\n<p>方法2：function外面加括号 </p>\n<p>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;)();</div></pre></td></tr></table></figure></p>\n<p>这种做法比方法1少了一个代码整体性的好处。 </p>\n<p>方法3：function前面加运算符，常见的是!与void 。<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">!function()&#123;alert(<span class=\"number\">1</span>);&#125;(); </div><div class=\"line\">void function()&#123;alert(<span class=\"number\">2</span>);&#125;();</div></pre></td></tr></table></figure></p>\n<p>显然，加上“!”或“+”等运算符，写起来是最简单的。<br>加上“void ”要敲五下键盘，但是听说有一个好处是，比加”!”少一次逻辑运算。—-我只是听说，不明所以。 </p>\n<p>最后，代表我个人，强烈支持方法1,即jslint的推荐写法：<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;());</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>js自执行函数的几种不同写法的比较</p>\n<p>经常需要一个函数自执行，可惜这一种写法是错的：<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">function()&#123;alert(<span class=\"number\">1</span>);&#125;();</div></pre></td></tr></table></figure></p>\n<p>原因是前半段“function(){alert(1);}”被当成了函数声明，而不是一个函数表达式，从而让后面的“();”变得孤立，产生语法错。 </p>\n<p>按上面的分析，这一段代码虽说没有语法错，但也是不符合我们的预期的，因为这个函数并没有自执行。<br>复制代码 代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">function()&#123;alert(<span class=\"number\">1</span>);&#125;(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<p>综上，症结在于，如何明确代码描述的是一个函数表达式，而不是函数声明语句。<br>正确的写法多种多样，也各有利弊： </p>\n<p>方法1：最前最后加括号 </p>\n<p>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;());</div></pre></td></tr></table></figure></p>\n<p>这是jslint推荐的写法，好处是，能提醒阅读代码的人，这段代码是一个整体。<br>例如，在有语法高亮匹配功能的编辑器里，光标在第一个左括号后时，最后一个右括号也会高亮，看代码的人一眼就可以看到这个整体。<br>不过，对于某些写代码不喜欢在行后加分号的同学，也会形成一些坑坑，例如以下代码会报运行错：<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a=<span class=\"number\">1</span> </div><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;());</div></pre></td></tr></table></figure></p>\n<p>方法2：function外面加括号 </p>\n<p>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;)();</div></pre></td></tr></table></figure></p>\n<p>这种做法比方法1少了一个代码整体性的好处。 </p>\n<p>方法3：function前面加运算符，常见的是!与void 。<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">!function()&#123;alert(<span class=\"number\">1</span>);&#125;(); </div><div class=\"line\">void function()&#123;alert(<span class=\"number\">2</span>);&#125;();</div></pre></td></tr></table></figure></p>\n<p>显然，加上“!”或“+”等运算符，写起来是最简单的。<br>加上“void ”要敲五下键盘，但是听说有一个好处是，比加”!”少一次逻辑运算。—-我只是听说，不明所以。 </p>\n<p>最后，代表我个人，强烈支持方法1,即jslint的推荐写法：<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;());</div></pre></td></tr></table></figure></p>\n"},{"title":"基于Jhipster的前端框架梳理","date":"2017-01-13T05:44:03.000Z","_content":"\n## 基于Jhipster的前端框架梳理\n\n\nJHipster(以下简称JH) 根据鄙人这几天的理解, JHipster 不算是一门技术,而更多的算是各种最佳实践的结合,基于Yoeman来讲符合需求的技术架构的最佳实践生成出来, 并提供了通过JDL来自动生成Restful以及页面代码的方式. 这种可能很大程度上改变我们的开发模式.有以前的架构师定框架,写base类, 2~3年的程序员堆API的模式改成, 架构师根据需求通过JH来生成框架,再设计UML图出JDL 然后自动生成RestAPI 前端web,IOS 安卓调用的方式. 业务逻辑被前置,这也是自移动开发变得日益壮大后前端在单BS 架构上的变化. \n\n至于spring-boot 的目的是解放开发人员.java 开发经常会掉在jar包依赖(Maven 并没有很好的解决这个问题,Maven只是让你能管理你的依赖,至于依赖什么还是要靠你自己梳理,gradle没实际项目使用过,不过我觉得定位是一样的.Ant的话还要更灵活一点,但是也要更麻烦一点)各个模块的集成中(缓存,数据库,事务....)的深坑之中... 而spring-boot在一定程度上解决了这个问题, 依赖什么.怎么配置 spring-boot会把一些配置自动配置掉.而腾出更多的时间关注你的业务.\n\nJHIpster在后端使用spring-boot的基础上把前端对于gulp, bower, npm, angular等技术的最佳实践来生产出来.为什么要用gulp,bower... 因为前端代码正在日新月异的变化.而浏览器都是按照ES3..ES5..ES2015 ES2016的规范来支持JS的,也就是说使用CoffeeJS,TypeScript开发的JS SCSS开发的样式文件不能被浏览器支持.需要我们在发布站点之前做一个编译的动作.将ts coffeejs翻译成浏览器能认识的方言.在这个编译的过程中我们还喜欢合并js文件,移除空格等来提示我们发布的站定的访问效率. 这些就是gulp,webpack,grunt灯要帮我们完成的任务. 而且在编译的时候我们会依赖angular依赖bootstrap等js 文件,而bower就是来帮我们处理这些事情(有点类似后天的maven 干的事情). \n关于Angular 截止目前为止JH貌似还不支持AngularJS2.0 (本人前台做的比较少,如有不对的地方敬请指出) 随着bootstrap等技术的发展前端的代码也通过MVVM之类的设计模式进行了业务代码和界面的分离.以前的jsp模板页面的技术在现在的web开发中已经很少见到应用了. 这是一个趋势.吧页面用bootsrap的风格做出来.把页面细节美化留给美工去完成.毕竟业务逻辑前置了,我还有一堆业务逻辑要等着去完成呢.\n\n\n客户端技术栈\n\n单页面Web应用:\n\n响应式页面设计\nHTML5 Boilerplate\nTwitter Bootstrap\nAngularJS\n兼容 IE9+ 和其他现代浏览器\n完整的国际化支持，基于 Angular Translate\n可选 Sass 用于 CSS 设计\n可选 Spring Websocket 来实现 WebSocket\n强大的 Yeoman 开发工作流:\n\n使用 Bower 可以轻松的安装 JavaScript 类库\n使用 Gulp.js 构建, 优化项目, 支持 live reload\n使用 Karma and PhantomJS 进行测试\n那么，如果单页面应用不能满足你的需求呢？\n\n支持 Thymeleaf 模板引擎, 用于在服务端渲染页面\n \n\n 服务端技术栈\n\n一个完整的 Spring 应用:\n\nSpring Boot 用于简化应用配置\nMaven 或者 Gradle 用于构建，测试和运行应用\n\"development\" 和 \"production\" 配置文件 (支持 Maven 和 Gradle)\nSpring Security\nSpring MVC REST + Jackson\n可选的 WebSocket 支持 -- 基于 Spring Websocket\nSpring Data JPA + Bean 验证\n使用 Liquibase 实现数据库自动更新\nElasticsearch 支持对数据库的搜索功能\n支持像MongoDB 这样的 document-oriented NoSQL 数据库\n支持像Cassandra 这样的 column-oriented NoSQL 数据库\n支持生产环境：\n\nMonitoring with Metrics 监控运行状态\n支持 ehcache (本地缓存) 或者 hazelcast (分布式缓存)\n可选的 HTTP session 集群 -- 基于 hazelcast\n优化的静态资源(gzip filter, HTTP cache headers)\n日志管理 Logback, 可在运行时配置\nHikariCP 连接池，用于性能优化\n可以将应用构建成一个标准的 WAR 文件或者一个可执行的 JAR 文件\n \n 安装\n\n安装前置条件\n\nJDK 8+\nMaven或者Gradle\nNodeJs\nPhantomJS(见下文安装说明)\nMySql\nGit\nSpring Tool Suite或Eclipse或Intellij IDEA\nwindow 管理员权限的 CMD或者PowerShell(推荐用PowerShell)\n全局安装 Yeoman : npm install -g yo\n全局安装 Bower:npm install -g bower\n全局安装 Gulp ：npm install -g gulp-cli\n全局安装 JHipster：npm install -g generator-jhipster\n假如已经安装完毕则软件各版本如下\n\nyo@1.8.5\nbower@1.7.9\ngulp-cli@1.2.2\nnpm@3.10.3\ngenerator-jhipster@3.8.0\n至此，JHipster已经安装完毕\n\n## Yeoman学习与实践笔记\n\nYeoman是Google的团队和外部贡献者团队合作开发的，他的目标是通过Grunt（一个用于开发\n任务自动化的命令行工具）和Bower（一个HTML、CSS、Javascript和图片等前端资源的包管理器）的包装为开发者创建一个易用的工作流。\n\n\nYeoman的目的不仅是要为新项目建立工作流，同时还是为了解决前端开发所面临的诸多严重问题，例如零散的依赖关系。\n\nYeoman主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。这三个工具是分别独立开发的，但是需要配合使用，来实现我们高效的工作流模式。\n\n下面这幅图很形象的表明了他们三者之间的协作关系。\n![image](http://images.cnitblog.com/blog/39469/201303/09214923-27fe6dea6eb34f468e601589ea83a675.png)\nYOMAN的特性\n\n闪电般的初始化：项目开始阶段，可以基于现有的模板框架（例如：HTML5 Bolierplate、Twitter Bootstrap）进行项目初始化的快速构建。\n了不起的构建流程：不仅仅包括JS、CSS代码的压缩、合并，还可以对图片和HTML文件进行优化，同时对CoffeScript和Compass的文件进行编译。\n自动编译CoffeScript和Compass：通过LiveReload进程可以对源文件发生的改动自动编译，完成后刷新浏览器。\n自动Lint代码：对于JS代码会自动进行JSLint测试，确保代码符合最佳编程实践。\n内置的预览服务器：不再需要自己配置服务器了，使用内置的就可以快速预览。\n惊人的图片优化：通过使用OptiPNG和JPEGTran来优化图片，减少下载损耗。\n杀手级包管理：通过bower search jQuery，可以快速安装和更新相关的文件，不再需要打开浏览器自己搜索了。\nPhantomJS单元测试：可以非常方便的使用PhantomJS进行单元测试，一切在项目初始的时候都准备好了。\n\n安装前的准备工作\n\n检查系统中是否安装了：Node.js、Ruby、Compass。\n\nMac下安装Node.js非常方便，首页提供了一个pkg下载，双击后可以默认安装node、npm到/usr/local/bin下，我们只需要确保/usr/local/bin包含在PATH变量中就可以。\n\nMac Mountain Lion 下自带了Ruby，所以也就不需要再单独安装了。\n\nCompass安装需要依赖于Ruby Gems，执行下面的步骤：\nsudo gem update --system\nsudo gem install compass\n\n安装\n\n环境准备好之后，就可以进行安装了，执行：\nsudo npm install -g yo grunt-cli bower\n\nhttp://www.cnblogs.com/cocowool/archive/2013/03/09/2952003.html\n\n## bower\n\n为什么使用bower，因为它可以节省掉你去git或是网上找js的时间\n试着在项目文件夹下，下载jquery 和 underscore\nbower install jquery underscore\n然后就可以看到项目文件夹下多了一个app文件，里面有bower_components，再就去就是两个插件了包了\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=5)\n初步这样也就行了，但是app/bower_components这个目录有点让人不习惯，我想把东西下载到我习惯的目录里。需要加一个.bowerrc文件。注意，不需要名字什么的，只要新增一个.bowerrc就行了。里面用可以定义下载目录\n{\n  \"directory\": \"app/vendor\"\n}\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=6)\n同样的cmd命令再执行一遍，这次可以看到文件下载到app/vendor中了\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=7)\n如果已经下载了很多必要的js，然后又不小心vendor文件夹删了，或者说另一个项目也需要类似的配置，难道还要一个一个输入命令吗？为了方便我们还要再加一个bower.json配置文件\n可以自己用文本编辑器新增一个，也可以用bower.init初始化\nbower.init后，它会问你很多问题，一路默认就行了\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=8)\n然后文件夹里就会多一个bower.json\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=9)\nbower install --save handlebars 后就会看到handlebar 在bower.json的dependencies里，如果不加--save就不会有。\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=10)\n接下来删了app/vendor下的所有内容，然后bower install，他会把bower.json中的dependencies重新下载\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=11)\n\n\n##　AngularJS　Bootstrap\nAngularJS依赖注入，JQuery依赖选择器；\nAngularJS有助于前后台数据的耦合，而JQuery无法达到该效果；\n目前华为公司采用的就是：内部前端框架(名称不能漏，不好意思，自己公司开发的)+AngularJS+Bootstrap。无论是从性能上，还是从前后台数据耦合程度而言，都比传统JQuery来得强；\n我刚进华为，目前正在学习AngularJS中。\nBootstrap 和 Angular 都是人们大量使用的工具。在很多项目中，它们需要一起使用。为什么不呢？他们已经改变了CSS和JS的开发方式，让前端既成为令人难以置信的工具。\n但是，把它们放在一起使用还有一些问题，特别是当你试图在Angular的项目中引入Bootstrap JavaScript组件时，会是一个问题。当建立了Angular的项目，##你不应该添加完整的jQuery库##。 jQlite已经包含在Angular中的，所有jQuery必要的功能它都有。这是因为把jQuery添加到Angular的项目将很难让你完全掌握Angular的核心优势和数据绑定的力量。\n比如你想在某种程度上改变View视图，一个很好的做法是通过Angular所绑定的data数据来改变。我们写这篇文章的目标就是为了，学习用jQuery和Angular通过不同的手段达到相同的目的。\nBootstrap JavaScript和Angular问题\n这个问题可以追溯到，你不应该在你的Angular项目中使用jQuery的原则。jQuery操作视图的方法与Angular操纵数据的方法会起冲突。\n为什么你不应该使用jQuery\n您使用jQuery操作数据抓住并注入到DOM的方式基本上基于事件。当我们使用Bootstrap JavaScript组件时，比如一个按钮，我们需要“单击此按钮时，设置此按钮为激活状态”。并将这种设置添加入新加的按钮中。通过添加 .active 类和检查input（如果你的按钮是一个input）为实现。\n在Angular中，操纵数据不是通过抓取和注入。一般通过数据绑定来实现，野蛮抓取注入数据。也能够改变每个组件的状态，不过在切换时就会暴露出问题。\n这就是为什么我们不能直接用Bootstrap的JavaScript。它依赖于jQuery我们不希望jQuery的破坏我们的Angular项目。如果我们试图绑定变量到组件，它无法工作。\n回到顶部\n解决方案： UI Bootstrap\n那么该如何解决？我们从Angular得知，我们需要将数据绑定到一个特定的组件，我们应该建立一个directive 指令。这将让我们的Angular网站，更关注数据的变化。\n该解决方案是一种被称为UI Bootstrap 的项目。这是由Angular UI团队开发的，增加了许多Angular的扩展组件。UI Bootstrap不使用jQuery; 它为每个Bootstrap JS组件添加了内置指令（directives）。\n对于UI Bootstrap（非BootstrapJS）的要求是：\n没有jQuery的依赖\n依赖Angular\n依赖Bootstrap CSS文件\n就是这样。现在，我们要如何将它集成到我们的项目？\n回到顶部\n我们的Angular应用\n让我们来看看我们需要些什么设置。如果你已经看过JavaScript代码，你会看到我们创建了一个Angular模块和控制器。然后，我们创建的按钮和折叠的变量。\n为此，下一步就是要拿到UI Bootstrap的文件，放到我们的项目中。那么我们能够在我们的Angular模块中导入ui.bootstrap。就这样，我们就能够获取需要模仿BootstrapJS组件的指令（directives ）！\n\n\nAngularJS Bootstrap\nhttp://www.runoob.com/angularjs/angularjs-bootstrap.html\n\nUI Bootstrap 是由 AngularJS UI 团队编写的纯 AngularJS 实现的 Bootstrap 组件。\n","source":"_posts/基于Jhipster的前端框架梳理.md","raw":"---\ntitle: 基于Jhipster的前端框架梳理\ndate: 2017-01-13 13:44:03\ntags:\n---\n\n## 基于Jhipster的前端框架梳理\n\n\nJHipster(以下简称JH) 根据鄙人这几天的理解, JHipster 不算是一门技术,而更多的算是各种最佳实践的结合,基于Yoeman来讲符合需求的技术架构的最佳实践生成出来, 并提供了通过JDL来自动生成Restful以及页面代码的方式. 这种可能很大程度上改变我们的开发模式.有以前的架构师定框架,写base类, 2~3年的程序员堆API的模式改成, 架构师根据需求通过JH来生成框架,再设计UML图出JDL 然后自动生成RestAPI 前端web,IOS 安卓调用的方式. 业务逻辑被前置,这也是自移动开发变得日益壮大后前端在单BS 架构上的变化. \n\n至于spring-boot 的目的是解放开发人员.java 开发经常会掉在jar包依赖(Maven 并没有很好的解决这个问题,Maven只是让你能管理你的依赖,至于依赖什么还是要靠你自己梳理,gradle没实际项目使用过,不过我觉得定位是一样的.Ant的话还要更灵活一点,但是也要更麻烦一点)各个模块的集成中(缓存,数据库,事务....)的深坑之中... 而spring-boot在一定程度上解决了这个问题, 依赖什么.怎么配置 spring-boot会把一些配置自动配置掉.而腾出更多的时间关注你的业务.\n\nJHIpster在后端使用spring-boot的基础上把前端对于gulp, bower, npm, angular等技术的最佳实践来生产出来.为什么要用gulp,bower... 因为前端代码正在日新月异的变化.而浏览器都是按照ES3..ES5..ES2015 ES2016的规范来支持JS的,也就是说使用CoffeeJS,TypeScript开发的JS SCSS开发的样式文件不能被浏览器支持.需要我们在发布站点之前做一个编译的动作.将ts coffeejs翻译成浏览器能认识的方言.在这个编译的过程中我们还喜欢合并js文件,移除空格等来提示我们发布的站定的访问效率. 这些就是gulp,webpack,grunt灯要帮我们完成的任务. 而且在编译的时候我们会依赖angular依赖bootstrap等js 文件,而bower就是来帮我们处理这些事情(有点类似后天的maven 干的事情). \n关于Angular 截止目前为止JH貌似还不支持AngularJS2.0 (本人前台做的比较少,如有不对的地方敬请指出) 随着bootstrap等技术的发展前端的代码也通过MVVM之类的设计模式进行了业务代码和界面的分离.以前的jsp模板页面的技术在现在的web开发中已经很少见到应用了. 这是一个趋势.吧页面用bootsrap的风格做出来.把页面细节美化留给美工去完成.毕竟业务逻辑前置了,我还有一堆业务逻辑要等着去完成呢.\n\n\n客户端技术栈\n\n单页面Web应用:\n\n响应式页面设计\nHTML5 Boilerplate\nTwitter Bootstrap\nAngularJS\n兼容 IE9+ 和其他现代浏览器\n完整的国际化支持，基于 Angular Translate\n可选 Sass 用于 CSS 设计\n可选 Spring Websocket 来实现 WebSocket\n强大的 Yeoman 开发工作流:\n\n使用 Bower 可以轻松的安装 JavaScript 类库\n使用 Gulp.js 构建, 优化项目, 支持 live reload\n使用 Karma and PhantomJS 进行测试\n那么，如果单页面应用不能满足你的需求呢？\n\n支持 Thymeleaf 模板引擎, 用于在服务端渲染页面\n \n\n 服务端技术栈\n\n一个完整的 Spring 应用:\n\nSpring Boot 用于简化应用配置\nMaven 或者 Gradle 用于构建，测试和运行应用\n\"development\" 和 \"production\" 配置文件 (支持 Maven 和 Gradle)\nSpring Security\nSpring MVC REST + Jackson\n可选的 WebSocket 支持 -- 基于 Spring Websocket\nSpring Data JPA + Bean 验证\n使用 Liquibase 实现数据库自动更新\nElasticsearch 支持对数据库的搜索功能\n支持像MongoDB 这样的 document-oriented NoSQL 数据库\n支持像Cassandra 这样的 column-oriented NoSQL 数据库\n支持生产环境：\n\nMonitoring with Metrics 监控运行状态\n支持 ehcache (本地缓存) 或者 hazelcast (分布式缓存)\n可选的 HTTP session 集群 -- 基于 hazelcast\n优化的静态资源(gzip filter, HTTP cache headers)\n日志管理 Logback, 可在运行时配置\nHikariCP 连接池，用于性能优化\n可以将应用构建成一个标准的 WAR 文件或者一个可执行的 JAR 文件\n \n 安装\n\n安装前置条件\n\nJDK 8+\nMaven或者Gradle\nNodeJs\nPhantomJS(见下文安装说明)\nMySql\nGit\nSpring Tool Suite或Eclipse或Intellij IDEA\nwindow 管理员权限的 CMD或者PowerShell(推荐用PowerShell)\n全局安装 Yeoman : npm install -g yo\n全局安装 Bower:npm install -g bower\n全局安装 Gulp ：npm install -g gulp-cli\n全局安装 JHipster：npm install -g generator-jhipster\n假如已经安装完毕则软件各版本如下\n\nyo@1.8.5\nbower@1.7.9\ngulp-cli@1.2.2\nnpm@3.10.3\ngenerator-jhipster@3.8.0\n至此，JHipster已经安装完毕\n\n## Yeoman学习与实践笔记\n\nYeoman是Google的团队和外部贡献者团队合作开发的，他的目标是通过Grunt（一个用于开发\n任务自动化的命令行工具）和Bower（一个HTML、CSS、Javascript和图片等前端资源的包管理器）的包装为开发者创建一个易用的工作流。\n\n\nYeoman的目的不仅是要为新项目建立工作流，同时还是为了解决前端开发所面临的诸多严重问题，例如零散的依赖关系。\n\nYeoman主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。这三个工具是分别独立开发的，但是需要配合使用，来实现我们高效的工作流模式。\n\n下面这幅图很形象的表明了他们三者之间的协作关系。\n![image](http://images.cnitblog.com/blog/39469/201303/09214923-27fe6dea6eb34f468e601589ea83a675.png)\nYOMAN的特性\n\n闪电般的初始化：项目开始阶段，可以基于现有的模板框架（例如：HTML5 Bolierplate、Twitter Bootstrap）进行项目初始化的快速构建。\n了不起的构建流程：不仅仅包括JS、CSS代码的压缩、合并，还可以对图片和HTML文件进行优化，同时对CoffeScript和Compass的文件进行编译。\n自动编译CoffeScript和Compass：通过LiveReload进程可以对源文件发生的改动自动编译，完成后刷新浏览器。\n自动Lint代码：对于JS代码会自动进行JSLint测试，确保代码符合最佳编程实践。\n内置的预览服务器：不再需要自己配置服务器了，使用内置的就可以快速预览。\n惊人的图片优化：通过使用OptiPNG和JPEGTran来优化图片，减少下载损耗。\n杀手级包管理：通过bower search jQuery，可以快速安装和更新相关的文件，不再需要打开浏览器自己搜索了。\nPhantomJS单元测试：可以非常方便的使用PhantomJS进行单元测试，一切在项目初始的时候都准备好了。\n\n安装前的准备工作\n\n检查系统中是否安装了：Node.js、Ruby、Compass。\n\nMac下安装Node.js非常方便，首页提供了一个pkg下载，双击后可以默认安装node、npm到/usr/local/bin下，我们只需要确保/usr/local/bin包含在PATH变量中就可以。\n\nMac Mountain Lion 下自带了Ruby，所以也就不需要再单独安装了。\n\nCompass安装需要依赖于Ruby Gems，执行下面的步骤：\nsudo gem update --system\nsudo gem install compass\n\n安装\n\n环境准备好之后，就可以进行安装了，执行：\nsudo npm install -g yo grunt-cli bower\n\nhttp://www.cnblogs.com/cocowool/archive/2013/03/09/2952003.html\n\n## bower\n\n为什么使用bower，因为它可以节省掉你去git或是网上找js的时间\n试着在项目文件夹下，下载jquery 和 underscore\nbower install jquery underscore\n然后就可以看到项目文件夹下多了一个app文件，里面有bower_components，再就去就是两个插件了包了\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=5)\n初步这样也就行了，但是app/bower_components这个目录有点让人不习惯，我想把东西下载到我习惯的目录里。需要加一个.bowerrc文件。注意，不需要名字什么的，只要新增一个.bowerrc就行了。里面用可以定义下载目录\n{\n  \"directory\": \"app/vendor\"\n}\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=6)\n同样的cmd命令再执行一遍，这次可以看到文件下载到app/vendor中了\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=7)\n如果已经下载了很多必要的js，然后又不小心vendor文件夹删了，或者说另一个项目也需要类似的配置，难道还要一个一个输入命令吗？为了方便我们还要再加一个bower.json配置文件\n可以自己用文本编辑器新增一个，也可以用bower.init初始化\nbower.init后，它会问你很多问题，一路默认就行了\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=8)\n然后文件夹里就会多一个bower.json\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=9)\nbower install --save handlebars 后就会看到handlebar 在bower.json的dependencies里，如果不加--save就不会有。\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=10)\n接下来删了app/vendor下的所有内容，然后bower install，他会把bower.json中的dependencies重新下载\n![image](http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=11)\n\n\n##　AngularJS　Bootstrap\nAngularJS依赖注入，JQuery依赖选择器；\nAngularJS有助于前后台数据的耦合，而JQuery无法达到该效果；\n目前华为公司采用的就是：内部前端框架(名称不能漏，不好意思，自己公司开发的)+AngularJS+Bootstrap。无论是从性能上，还是从前后台数据耦合程度而言，都比传统JQuery来得强；\n我刚进华为，目前正在学习AngularJS中。\nBootstrap 和 Angular 都是人们大量使用的工具。在很多项目中，它们需要一起使用。为什么不呢？他们已经改变了CSS和JS的开发方式，让前端既成为令人难以置信的工具。\n但是，把它们放在一起使用还有一些问题，特别是当你试图在Angular的项目中引入Bootstrap JavaScript组件时，会是一个问题。当建立了Angular的项目，##你不应该添加完整的jQuery库##。 jQlite已经包含在Angular中的，所有jQuery必要的功能它都有。这是因为把jQuery添加到Angular的项目将很难让你完全掌握Angular的核心优势和数据绑定的力量。\n比如你想在某种程度上改变View视图，一个很好的做法是通过Angular所绑定的data数据来改变。我们写这篇文章的目标就是为了，学习用jQuery和Angular通过不同的手段达到相同的目的。\nBootstrap JavaScript和Angular问题\n这个问题可以追溯到，你不应该在你的Angular项目中使用jQuery的原则。jQuery操作视图的方法与Angular操纵数据的方法会起冲突。\n为什么你不应该使用jQuery\n您使用jQuery操作数据抓住并注入到DOM的方式基本上基于事件。当我们使用Bootstrap JavaScript组件时，比如一个按钮，我们需要“单击此按钮时，设置此按钮为激活状态”。并将这种设置添加入新加的按钮中。通过添加 .active 类和检查input（如果你的按钮是一个input）为实现。\n在Angular中，操纵数据不是通过抓取和注入。一般通过数据绑定来实现，野蛮抓取注入数据。也能够改变每个组件的状态，不过在切换时就会暴露出问题。\n这就是为什么我们不能直接用Bootstrap的JavaScript。它依赖于jQuery我们不希望jQuery的破坏我们的Angular项目。如果我们试图绑定变量到组件，它无法工作。\n回到顶部\n解决方案： UI Bootstrap\n那么该如何解决？我们从Angular得知，我们需要将数据绑定到一个特定的组件，我们应该建立一个directive 指令。这将让我们的Angular网站，更关注数据的变化。\n该解决方案是一种被称为UI Bootstrap 的项目。这是由Angular UI团队开发的，增加了许多Angular的扩展组件。UI Bootstrap不使用jQuery; 它为每个Bootstrap JS组件添加了内置指令（directives）。\n对于UI Bootstrap（非BootstrapJS）的要求是：\n没有jQuery的依赖\n依赖Angular\n依赖Bootstrap CSS文件\n就是这样。现在，我们要如何将它集成到我们的项目？\n回到顶部\n我们的Angular应用\n让我们来看看我们需要些什么设置。如果你已经看过JavaScript代码，你会看到我们创建了一个Angular模块和控制器。然后，我们创建的按钮和折叠的变量。\n为此，下一步就是要拿到UI Bootstrap的文件，放到我们的项目中。那么我们能够在我们的Angular模块中导入ui.bootstrap。就这样，我们就能够获取需要模仿BootstrapJS组件的指令（directives ）！\n\n\nAngularJS Bootstrap\nhttp://www.runoob.com/angularjs/angularjs-bootstrap.html\n\nUI Bootstrap 是由 AngularJS UI 团队编写的纯 AngularJS 实现的 Bootstrap 组件。\n","slug":"基于Jhipster的前端框架梳理","published":1,"updated":"2018-05-16T09:03:16.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2t000hoyffb4r98abp","content":"<h2 id=\"基于Jhipster的前端框架梳理\"><a href=\"#基于Jhipster的前端框架梳理\" class=\"headerlink\" title=\"基于Jhipster的前端框架梳理\"></a>基于Jhipster的前端框架梳理</h2><p>JHipster(以下简称JH) 根据鄙人这几天的理解, JHipster 不算是一门技术,而更多的算是各种最佳实践的结合,基于Yoeman来讲符合需求的技术架构的最佳实践生成出来, 并提供了通过JDL来自动生成Restful以及页面代码的方式. 这种可能很大程度上改变我们的开发模式.有以前的架构师定框架,写base类, 2~3年的程序员堆API的模式改成, 架构师根据需求通过JH来生成框架,再设计UML图出JDL 然后自动生成RestAPI 前端web,IOS 安卓调用的方式. 业务逻辑被前置,这也是自移动开发变得日益壮大后前端在单BS 架构上的变化. </p>\n<p>至于spring-boot 的目的是解放开发人员.java 开发经常会掉在jar包依赖(Maven 并没有很好的解决这个问题,Maven只是让你能管理你的依赖,至于依赖什么还是要靠你自己梳理,gradle没实际项目使用过,不过我觉得定位是一样的.Ant的话还要更灵活一点,但是也要更麻烦一点)各个模块的集成中(缓存,数据库,事务….)的深坑之中… 而spring-boot在一定程度上解决了这个问题, 依赖什么.怎么配置 spring-boot会把一些配置自动配置掉.而腾出更多的时间关注你的业务.</p>\n<p>JHIpster在后端使用spring-boot的基础上把前端对于gulp, bower, npm, angular等技术的最佳实践来生产出来.为什么要用gulp,bower… 因为前端代码正在日新月异的变化.而浏览器都是按照ES3..ES5..ES2015 ES2016的规范来支持JS的,也就是说使用CoffeeJS,TypeScript开发的JS SCSS开发的样式文件不能被浏览器支持.需要我们在发布站点之前做一个编译的动作.将ts coffeejs翻译成浏览器能认识的方言.在这个编译的过程中我们还喜欢合并js文件,移除空格等来提示我们发布的站定的访问效率. 这些就是gulp,webpack,grunt灯要帮我们完成的任务. 而且在编译的时候我们会依赖angular依赖bootstrap等js 文件,而bower就是来帮我们处理这些事情(有点类似后天的maven 干的事情).<br>关于Angular 截止目前为止JH貌似还不支持AngularJS2.0 (本人前台做的比较少,如有不对的地方敬请指出) 随着bootstrap等技术的发展前端的代码也通过MVVM之类的设计模式进行了业务代码和界面的分离.以前的jsp模板页面的技术在现在的web开发中已经很少见到应用了. 这是一个趋势.吧页面用bootsrap的风格做出来.把页面细节美化留给美工去完成.毕竟业务逻辑前置了,我还有一堆业务逻辑要等着去完成呢.</p>\n<p>客户端技术栈</p>\n<p>单页面Web应用:</p>\n<p>响应式页面设计<br>HTML5 Boilerplate<br>Twitter Bootstrap<br>AngularJS<br>兼容 IE9+ 和其他现代浏览器<br>完整的国际化支持，基于 Angular Translate<br>可选 Sass 用于 CSS 设计<br>可选 Spring Websocket 来实现 WebSocket<br>强大的 Yeoman 开发工作流:</p>\n<p>使用 Bower 可以轻松的安装 JavaScript 类库<br>使用 Gulp.js 构建, 优化项目, 支持 live reload<br>使用 Karma and PhantomJS 进行测试<br>那么，如果单页面应用不能满足你的需求呢？</p>\n<p>支持 Thymeleaf 模板引擎, 用于在服务端渲染页面</p>\n<p> 服务端技术栈</p>\n<p>一个完整的 Spring 应用:</p>\n<p>Spring Boot 用于简化应用配置<br>Maven 或者 Gradle 用于构建，测试和运行应用<br>“development” 和 “production” 配置文件 (支持 Maven 和 Gradle)<br>Spring Security<br>Spring MVC REST + Jackson<br>可选的 WebSocket 支持 – 基于 Spring Websocket<br>Spring Data JPA + Bean 验证<br>使用 Liquibase 实现数据库自动更新<br>Elasticsearch 支持对数据库的搜索功能<br>支持像MongoDB 这样的 document-oriented NoSQL 数据库<br>支持像Cassandra 这样的 column-oriented NoSQL 数据库<br>支持生产环境：</p>\n<p>Monitoring with Metrics 监控运行状态<br>支持 ehcache (本地缓存) 或者 hazelcast (分布式缓存)<br>可选的 HTTP session 集群 – 基于 hazelcast<br>优化的静态资源(gzip filter, HTTP cache headers)<br>日志管理 Logback, 可在运行时配置<br>HikariCP 连接池，用于性能优化<br>可以将应用构建成一个标准的 WAR 文件或者一个可执行的 JAR 文件</p>\n<p> 安装</p>\n<p>安装前置条件</p>\n<p>JDK 8+<br>Maven或者Gradle<br>NodeJs<br>PhantomJS(见下文安装说明)<br>MySql<br>Git<br>Spring Tool Suite或Eclipse或Intellij IDEA<br>window 管理员权限的 CMD或者PowerShell(推荐用PowerShell)<br>全局安装 Yeoman : npm install -g yo<br>全局安装 Bower:npm install -g bower<br>全局安装 Gulp ：npm install -g gulp-cli<br>全局安装 JHipster：npm install -g generator-jhipster<br>假如已经安装完毕则软件各版本如下</p>\n<p>yo@1.8.5<br>bower@1.7.9<br>gulp-cli@1.2.2<br>npm@3.10.3<br>generator-jhipster@3.8.0<br>至此，JHipster已经安装完毕</p>\n<h2 id=\"Yeoman学习与实践笔记\"><a href=\"#Yeoman学习与实践笔记\" class=\"headerlink\" title=\"Yeoman学习与实践笔记\"></a>Yeoman学习与实践笔记</h2><p>Yeoman是Google的团队和外部贡献者团队合作开发的，他的目标是通过Grunt（一个用于开发<br>任务自动化的命令行工具）和Bower（一个HTML、CSS、Javascript和图片等前端资源的包管理器）的包装为开发者创建一个易用的工作流。</p>\n<p>Yeoman的目的不仅是要为新项目建立工作流，同时还是为了解决前端开发所面临的诸多严重问题，例如零散的依赖关系。</p>\n<p>Yeoman主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。这三个工具是分别独立开发的，但是需要配合使用，来实现我们高效的工作流模式。</p>\n<p>下面这幅图很形象的表明了他们三者之间的协作关系。<br><img src=\"http://images.cnitblog.com/blog/39469/201303/09214923-27fe6dea6eb34f468e601589ea83a675.png\" alt=\"image\"><br>YOMAN的特性</p>\n<p>闪电般的初始化：项目开始阶段，可以基于现有的模板框架（例如：HTML5 Bolierplate、Twitter Bootstrap）进行项目初始化的快速构建。<br>了不起的构建流程：不仅仅包括JS、CSS代码的压缩、合并，还可以对图片和HTML文件进行优化，同时对CoffeScript和Compass的文件进行编译。<br>自动编译CoffeScript和Compass：通过LiveReload进程可以对源文件发生的改动自动编译，完成后刷新浏览器。<br>自动Lint代码：对于JS代码会自动进行JSLint测试，确保代码符合最佳编程实践。<br>内置的预览服务器：不再需要自己配置服务器了，使用内置的就可以快速预览。<br>惊人的图片优化：通过使用OptiPNG和JPEGTran来优化图片，减少下载损耗。<br>杀手级包管理：通过bower search jQuery，可以快速安装和更新相关的文件，不再需要打开浏览器自己搜索了。<br>PhantomJS单元测试：可以非常方便的使用PhantomJS进行单元测试，一切在项目初始的时候都准备好了。</p>\n<p>安装前的准备工作</p>\n<p>检查系统中是否安装了：Node.js、Ruby、Compass。</p>\n<p>Mac下安装Node.js非常方便，首页提供了一个pkg下载，双击后可以默认安装node、npm到/usr/local/bin下，我们只需要确保/usr/local/bin包含在PATH变量中就可以。</p>\n<p>Mac Mountain Lion 下自带了Ruby，所以也就不需要再单独安装了。</p>\n<p>Compass安装需要依赖于Ruby Gems，执行下面的步骤：<br>sudo gem update –system<br>sudo gem install compass</p>\n<p>安装</p>\n<p>环境准备好之后，就可以进行安装了，执行：<br>sudo npm install -g yo grunt-cli bower</p>\n<p><a href=\"http://www.cnblogs.com/cocowool/archive/2013/03/09/2952003.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/cocowool/archive/2013/03/09/2952003.html</a></p>\n<h2 id=\"bower\"><a href=\"#bower\" class=\"headerlink\" title=\"bower\"></a>bower</h2><p>为什么使用bower，因为它可以节省掉你去git或是网上找js的时间<br>试着在项目文件夹下，下载jquery 和 underscore<br>bower install jquery underscore<br>然后就可以看到项目文件夹下多了一个app文件，里面有bower_components，再就去就是两个插件了包了<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=5\" alt=\"image\"><br>初步这样也就行了，但是app/bower_components这个目录有点让人不习惯，我想把东西下载到我习惯的目录里。需要加一个.bowerrc文件。注意，不需要名字什么的，只要新增一个.bowerrc就行了。里面用可以定义下载目录<br>{<br>  “directory”: “app/vendor”<br>}<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=6\" alt=\"image\"><br>同样的cmd命令再执行一遍，这次可以看到文件下载到app/vendor中了<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=7\" alt=\"image\"><br>如果已经下载了很多必要的js，然后又不小心vendor文件夹删了，或者说另一个项目也需要类似的配置，难道还要一个一个输入命令吗？为了方便我们还要再加一个bower.json配置文件<br>可以自己用文本编辑器新增一个，也可以用bower.init初始化<br>bower.init后，它会问你很多问题，一路默认就行了<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=8\" alt=\"image\"><br>然后文件夹里就会多一个bower.json<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=9\" alt=\"image\"><br>bower install –save handlebars 后就会看到handlebar 在bower.json的dependencies里，如果不加–save就不会有。<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=10\" alt=\"image\"><br>接下来删了app/vendor下的所有内容，然后bower install，他会把bower.json中的dependencies重新下载<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=11\" alt=\"image\"></p>\n<p>##　AngularJS　Bootstrap<br>AngularJS依赖注入，JQuery依赖选择器；<br>AngularJS有助于前后台数据的耦合，而JQuery无法达到该效果；<br>目前华为公司采用的就是：内部前端框架(名称不能漏，不好意思，自己公司开发的)+AngularJS+Bootstrap。无论是从性能上，还是从前后台数据耦合程度而言，都比传统JQuery来得强；<br>我刚进华为，目前正在学习AngularJS中。<br>Bootstrap 和 Angular 都是人们大量使用的工具。在很多项目中，它们需要一起使用。为什么不呢？他们已经改变了CSS和JS的开发方式，让前端既成为令人难以置信的工具。<br>但是，把它们放在一起使用还有一些问题，特别是当你试图在Angular的项目中引入Bootstrap JavaScript组件时，会是一个问题。当建立了Angular的项目，##你不应该添加完整的jQuery库##。 jQlite已经包含在Angular中的，所有jQuery必要的功能它都有。这是因为把jQuery添加到Angular的项目将很难让你完全掌握Angular的核心优势和数据绑定的力量。<br>比如你想在某种程度上改变View视图，一个很好的做法是通过Angular所绑定的data数据来改变。我们写这篇文章的目标就是为了，学习用jQuery和Angular通过不同的手段达到相同的目的。<br>Bootstrap JavaScript和Angular问题<br>这个问题可以追溯到，你不应该在你的Angular项目中使用jQuery的原则。jQuery操作视图的方法与Angular操纵数据的方法会起冲突。<br>为什么你不应该使用jQuery<br>您使用jQuery操作数据抓住并注入到DOM的方式基本上基于事件。当我们使用Bootstrap JavaScript组件时，比如一个按钮，我们需要“单击此按钮时，设置此按钮为激活状态”。并将这种设置添加入新加的按钮中。通过添加 .active 类和检查input（如果你的按钮是一个input）为实现。<br>在Angular中，操纵数据不是通过抓取和注入。一般通过数据绑定来实现，野蛮抓取注入数据。也能够改变每个组件的状态，不过在切换时就会暴露出问题。<br>这就是为什么我们不能直接用Bootstrap的JavaScript。它依赖于jQuery我们不希望jQuery的破坏我们的Angular项目。如果我们试图绑定变量到组件，它无法工作。<br>回到顶部<br>解决方案： UI Bootstrap<br>那么该如何解决？我们从Angular得知，我们需要将数据绑定到一个特定的组件，我们应该建立一个directive 指令。这将让我们的Angular网站，更关注数据的变化。<br>该解决方案是一种被称为UI Bootstrap 的项目。这是由Angular UI团队开发的，增加了许多Angular的扩展组件。UI Bootstrap不使用jQuery; 它为每个Bootstrap JS组件添加了内置指令（directives）。<br>对于UI Bootstrap（非BootstrapJS）的要求是：<br>没有jQuery的依赖<br>依赖Angular<br>依赖Bootstrap CSS文件<br>就是这样。现在，我们要如何将它集成到我们的项目？<br>回到顶部<br>我们的Angular应用<br>让我们来看看我们需要些什么设置。如果你已经看过JavaScript代码，你会看到我们创建了一个Angular模块和控制器。然后，我们创建的按钮和折叠的变量。<br>为此，下一步就是要拿到UI Bootstrap的文件，放到我们的项目中。那么我们能够在我们的Angular模块中导入ui.bootstrap。就这样，我们就能够获取需要模仿BootstrapJS组件的指令（directives ）！</p>\n<p>AngularJS Bootstrap<br><a href=\"http://www.runoob.com/angularjs/angularjs-bootstrap.html\" target=\"_blank\" rel=\"external\">http://www.runoob.com/angularjs/angularjs-bootstrap.html</a></p>\n<p>UI Bootstrap 是由 AngularJS UI 团队编写的纯 AngularJS 实现的 Bootstrap 组件。</p>\n","excerpt":"","more":"<h2 id=\"基于Jhipster的前端框架梳理\"><a href=\"#基于Jhipster的前端框架梳理\" class=\"headerlink\" title=\"基于Jhipster的前端框架梳理\"></a>基于Jhipster的前端框架梳理</h2><p>JHipster(以下简称JH) 根据鄙人这几天的理解, JHipster 不算是一门技术,而更多的算是各种最佳实践的结合,基于Yoeman来讲符合需求的技术架构的最佳实践生成出来, 并提供了通过JDL来自动生成Restful以及页面代码的方式. 这种可能很大程度上改变我们的开发模式.有以前的架构师定框架,写base类, 2~3年的程序员堆API的模式改成, 架构师根据需求通过JH来生成框架,再设计UML图出JDL 然后自动生成RestAPI 前端web,IOS 安卓调用的方式. 业务逻辑被前置,这也是自移动开发变得日益壮大后前端在单BS 架构上的变化. </p>\n<p>至于spring-boot 的目的是解放开发人员.java 开发经常会掉在jar包依赖(Maven 并没有很好的解决这个问题,Maven只是让你能管理你的依赖,至于依赖什么还是要靠你自己梳理,gradle没实际项目使用过,不过我觉得定位是一样的.Ant的话还要更灵活一点,但是也要更麻烦一点)各个模块的集成中(缓存,数据库,事务….)的深坑之中… 而spring-boot在一定程度上解决了这个问题, 依赖什么.怎么配置 spring-boot会把一些配置自动配置掉.而腾出更多的时间关注你的业务.</p>\n<p>JHIpster在后端使用spring-boot的基础上把前端对于gulp, bower, npm, angular等技术的最佳实践来生产出来.为什么要用gulp,bower… 因为前端代码正在日新月异的变化.而浏览器都是按照ES3..ES5..ES2015 ES2016的规范来支持JS的,也就是说使用CoffeeJS,TypeScript开发的JS SCSS开发的样式文件不能被浏览器支持.需要我们在发布站点之前做一个编译的动作.将ts coffeejs翻译成浏览器能认识的方言.在这个编译的过程中我们还喜欢合并js文件,移除空格等来提示我们发布的站定的访问效率. 这些就是gulp,webpack,grunt灯要帮我们完成的任务. 而且在编译的时候我们会依赖angular依赖bootstrap等js 文件,而bower就是来帮我们处理这些事情(有点类似后天的maven 干的事情).<br>关于Angular 截止目前为止JH貌似还不支持AngularJS2.0 (本人前台做的比较少,如有不对的地方敬请指出) 随着bootstrap等技术的发展前端的代码也通过MVVM之类的设计模式进行了业务代码和界面的分离.以前的jsp模板页面的技术在现在的web开发中已经很少见到应用了. 这是一个趋势.吧页面用bootsrap的风格做出来.把页面细节美化留给美工去完成.毕竟业务逻辑前置了,我还有一堆业务逻辑要等着去完成呢.</p>\n<p>客户端技术栈</p>\n<p>单页面Web应用:</p>\n<p>响应式页面设计<br>HTML5 Boilerplate<br>Twitter Bootstrap<br>AngularJS<br>兼容 IE9+ 和其他现代浏览器<br>完整的国际化支持，基于 Angular Translate<br>可选 Sass 用于 CSS 设计<br>可选 Spring Websocket 来实现 WebSocket<br>强大的 Yeoman 开发工作流:</p>\n<p>使用 Bower 可以轻松的安装 JavaScript 类库<br>使用 Gulp.js 构建, 优化项目, 支持 live reload<br>使用 Karma and PhantomJS 进行测试<br>那么，如果单页面应用不能满足你的需求呢？</p>\n<p>支持 Thymeleaf 模板引擎, 用于在服务端渲染页面</p>\n<p> 服务端技术栈</p>\n<p>一个完整的 Spring 应用:</p>\n<p>Spring Boot 用于简化应用配置<br>Maven 或者 Gradle 用于构建，测试和运行应用<br>“development” 和 “production” 配置文件 (支持 Maven 和 Gradle)<br>Spring Security<br>Spring MVC REST + Jackson<br>可选的 WebSocket 支持 – 基于 Spring Websocket<br>Spring Data JPA + Bean 验证<br>使用 Liquibase 实现数据库自动更新<br>Elasticsearch 支持对数据库的搜索功能<br>支持像MongoDB 这样的 document-oriented NoSQL 数据库<br>支持像Cassandra 这样的 column-oriented NoSQL 数据库<br>支持生产环境：</p>\n<p>Monitoring with Metrics 监控运行状态<br>支持 ehcache (本地缓存) 或者 hazelcast (分布式缓存)<br>可选的 HTTP session 集群 – 基于 hazelcast<br>优化的静态资源(gzip filter, HTTP cache headers)<br>日志管理 Logback, 可在运行时配置<br>HikariCP 连接池，用于性能优化<br>可以将应用构建成一个标准的 WAR 文件或者一个可执行的 JAR 文件</p>\n<p> 安装</p>\n<p>安装前置条件</p>\n<p>JDK 8+<br>Maven或者Gradle<br>NodeJs<br>PhantomJS(见下文安装说明)<br>MySql<br>Git<br>Spring Tool Suite或Eclipse或Intellij IDEA<br>window 管理员权限的 CMD或者PowerShell(推荐用PowerShell)<br>全局安装 Yeoman : npm install -g yo<br>全局安装 Bower:npm install -g bower<br>全局安装 Gulp ：npm install -g gulp-cli<br>全局安装 JHipster：npm install -g generator-jhipster<br>假如已经安装完毕则软件各版本如下</p>\n<p>yo@1.8.5<br>bower@1.7.9<br>gulp-cli@1.2.2<br>npm@3.10.3<br>generator-jhipster@3.8.0<br>至此，JHipster已经安装完毕</p>\n<h2 id=\"Yeoman学习与实践笔记\"><a href=\"#Yeoman学习与实践笔记\" class=\"headerlink\" title=\"Yeoman学习与实践笔记\"></a>Yeoman学习与实践笔记</h2><p>Yeoman是Google的团队和外部贡献者团队合作开发的，他的目标是通过Grunt（一个用于开发<br>任务自动化的命令行工具）和Bower（一个HTML、CSS、Javascript和图片等前端资源的包管理器）的包装为开发者创建一个易用的工作流。</p>\n<p>Yeoman的目的不仅是要为新项目建立工作流，同时还是为了解决前端开发所面临的诸多严重问题，例如零散的依赖关系。</p>\n<p>Yeoman主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。这三个工具是分别独立开发的，但是需要配合使用，来实现我们高效的工作流模式。</p>\n<p>下面这幅图很形象的表明了他们三者之间的协作关系。<br><img src=\"http://images.cnitblog.com/blog/39469/201303/09214923-27fe6dea6eb34f468e601589ea83a675.png\" alt=\"image\"><br>YOMAN的特性</p>\n<p>闪电般的初始化：项目开始阶段，可以基于现有的模板框架（例如：HTML5 Bolierplate、Twitter Bootstrap）进行项目初始化的快速构建。<br>了不起的构建流程：不仅仅包括JS、CSS代码的压缩、合并，还可以对图片和HTML文件进行优化，同时对CoffeScript和Compass的文件进行编译。<br>自动编译CoffeScript和Compass：通过LiveReload进程可以对源文件发生的改动自动编译，完成后刷新浏览器。<br>自动Lint代码：对于JS代码会自动进行JSLint测试，确保代码符合最佳编程实践。<br>内置的预览服务器：不再需要自己配置服务器了，使用内置的就可以快速预览。<br>惊人的图片优化：通过使用OptiPNG和JPEGTran来优化图片，减少下载损耗。<br>杀手级包管理：通过bower search jQuery，可以快速安装和更新相关的文件，不再需要打开浏览器自己搜索了。<br>PhantomJS单元测试：可以非常方便的使用PhantomJS进行单元测试，一切在项目初始的时候都准备好了。</p>\n<p>安装前的准备工作</p>\n<p>检查系统中是否安装了：Node.js、Ruby、Compass。</p>\n<p>Mac下安装Node.js非常方便，首页提供了一个pkg下载，双击后可以默认安装node、npm到/usr/local/bin下，我们只需要确保/usr/local/bin包含在PATH变量中就可以。</p>\n<p>Mac Mountain Lion 下自带了Ruby，所以也就不需要再单独安装了。</p>\n<p>Compass安装需要依赖于Ruby Gems，执行下面的步骤：<br>sudo gem update –system<br>sudo gem install compass</p>\n<p>安装</p>\n<p>环境准备好之后，就可以进行安装了，执行：<br>sudo npm install -g yo grunt-cli bower</p>\n<p><a href=\"http://www.cnblogs.com/cocowool/archive/2013/03/09/2952003.html\">http://www.cnblogs.com/cocowool/archive/2013/03/09/2952003.html</a></p>\n<h2 id=\"bower\"><a href=\"#bower\" class=\"headerlink\" title=\"bower\"></a>bower</h2><p>为什么使用bower，因为它可以节省掉你去git或是网上找js的时间<br>试着在项目文件夹下，下载jquery 和 underscore<br>bower install jquery underscore<br>然后就可以看到项目文件夹下多了一个app文件，里面有bower_components，再就去就是两个插件了包了<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=5\" alt=\"image\"><br>初步这样也就行了，但是app/bower_components这个目录有点让人不习惯，我想把东西下载到我习惯的目录里。需要加一个.bowerrc文件。注意，不需要名字什么的，只要新增一个.bowerrc就行了。里面用可以定义下载目录<br>{<br>  “directory”: “app/vendor”<br>}<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=6\" alt=\"image\"><br>同样的cmd命令再执行一遍，这次可以看到文件下载到app/vendor中了<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=7\" alt=\"image\"><br>如果已经下载了很多必要的js，然后又不小心vendor文件夹删了，或者说另一个项目也需要类似的配置，难道还要一个一个输入命令吗？为了方便我们还要再加一个bower.json配置文件<br>可以自己用文本编辑器新增一个，也可以用bower.init初始化<br>bower.init后，它会问你很多问题，一路默认就行了<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=8\" alt=\"image\"><br>然后文件夹里就会多一个bower.json<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=9\" alt=\"image\"><br>bower install –save handlebars 后就会看到handlebar 在bower.json的dependencies里，如果不加–save就不会有。<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=10\" alt=\"image\"><br>接下来删了app/vendor下的所有内容，然后bower install，他会把bower.json中的dependencies重新下载<br><img src=\"http://jingyan.baidu.com/album/03b2f78c6bd7c05ea337ae6e.html?picindex=11\" alt=\"image\"></p>\n<p>##　AngularJS　Bootstrap<br>AngularJS依赖注入，JQuery依赖选择器；<br>AngularJS有助于前后台数据的耦合，而JQuery无法达到该效果；<br>目前华为公司采用的就是：内部前端框架(名称不能漏，不好意思，自己公司开发的)+AngularJS+Bootstrap。无论是从性能上，还是从前后台数据耦合程度而言，都比传统JQuery来得强；<br>我刚进华为，目前正在学习AngularJS中。<br>Bootstrap 和 Angular 都是人们大量使用的工具。在很多项目中，它们需要一起使用。为什么不呢？他们已经改变了CSS和JS的开发方式，让前端既成为令人难以置信的工具。<br>但是，把它们放在一起使用还有一些问题，特别是当你试图在Angular的项目中引入Bootstrap JavaScript组件时，会是一个问题。当建立了Angular的项目，##你不应该添加完整的jQuery库##。 jQlite已经包含在Angular中的，所有jQuery必要的功能它都有。这是因为把jQuery添加到Angular的项目将很难让你完全掌握Angular的核心优势和数据绑定的力量。<br>比如你想在某种程度上改变View视图，一个很好的做法是通过Angular所绑定的data数据来改变。我们写这篇文章的目标就是为了，学习用jQuery和Angular通过不同的手段达到相同的目的。<br>Bootstrap JavaScript和Angular问题<br>这个问题可以追溯到，你不应该在你的Angular项目中使用jQuery的原则。jQuery操作视图的方法与Angular操纵数据的方法会起冲突。<br>为什么你不应该使用jQuery<br>您使用jQuery操作数据抓住并注入到DOM的方式基本上基于事件。当我们使用Bootstrap JavaScript组件时，比如一个按钮，我们需要“单击此按钮时，设置此按钮为激活状态”。并将这种设置添加入新加的按钮中。通过添加 .active 类和检查input（如果你的按钮是一个input）为实现。<br>在Angular中，操纵数据不是通过抓取和注入。一般通过数据绑定来实现，野蛮抓取注入数据。也能够改变每个组件的状态，不过在切换时就会暴露出问题。<br>这就是为什么我们不能直接用Bootstrap的JavaScript。它依赖于jQuery我们不希望jQuery的破坏我们的Angular项目。如果我们试图绑定变量到组件，它无法工作。<br>回到顶部<br>解决方案： UI Bootstrap<br>那么该如何解决？我们从Angular得知，我们需要将数据绑定到一个特定的组件，我们应该建立一个directive 指令。这将让我们的Angular网站，更关注数据的变化。<br>该解决方案是一种被称为UI Bootstrap 的项目。这是由Angular UI团队开发的，增加了许多Angular的扩展组件。UI Bootstrap不使用jQuery; 它为每个Bootstrap JS组件添加了内置指令（directives）。<br>对于UI Bootstrap（非BootstrapJS）的要求是：<br>没有jQuery的依赖<br>依赖Angular<br>依赖Bootstrap CSS文件<br>就是这样。现在，我们要如何将它集成到我们的项目？<br>回到顶部<br>我们的Angular应用<br>让我们来看看我们需要些什么设置。如果你已经看过JavaScript代码，你会看到我们创建了一个Angular模块和控制器。然后，我们创建的按钮和折叠的变量。<br>为此，下一步就是要拿到UI Bootstrap的文件，放到我们的项目中。那么我们能够在我们的Angular模块中导入ui.bootstrap。就这样，我们就能够获取需要模仿BootstrapJS组件的指令（directives ）！</p>\n<p>AngularJS Bootstrap<br><a href=\"http://www.runoob.com/angularjs/angularjs-bootstrap.html\">http://www.runoob.com/angularjs/angularjs-bootstrap.html</a></p>\n<p>UI Bootstrap 是由 AngularJS UI 团队编写的纯 AngularJS 实现的 Bootstrap 组件。</p>\n"},{"title":"我在AngularJS的曲折路","date":"2017-01-17T07:18:55.000Z","_content":"新手单枪匹马闯AngularJS之路，走过的每个弯路，遇到的每个难题，都是汗和泪，再次记录下来，共勉。\n\n1.实现AngularJS的国际化问题的时候，按照网上的步骤进行配置Angular-translate，进行了translate配置，切换控制器，设置支持JSON文件的多语过滤器。\n\n多语文件目录 webapp/i18n/cn.json  webapp/i18n/cn.json\n\n\nlang.translate.js 配置translateConfig\n```python\n(function() {\n    'use strict';\n\n    angular\n        .module('jhipsterApp', ['pascalprecht.translate'])\n        .config(translateConfig);\n\n    translateConfig.$inject = ['$translateProvider'];\n\n    function translateConfig($translateProvider) {\n        var lang = window.localStorage.lang || 'cn';\n        $translateProvider.preferredLanguage(lang);\n        $translateProvider.useStaticFilesLoader({\n            prefix: '/i18n/',\n            suffix: '.json'\n        });\n    }\n})();\n```\n\nlang.controller.js配置控制器\n```python\n(function() {\n    'use strict';\n\n    angular\n        .module('jhipsterApp')\n        .controller('LanguageSwitchingCtrl', LanguageSwitchingCtrl);\n\n    LanguageSwitchingCtrl.$inject = ['$scope', '$translate'];\n\n    function LanguageSwitchingCtrl($scope, $translate) {\n        var vm = this;\n        $scope.switching = function(lang) {\n            $translate.use(lang);\n            window.localStorage.lang = lang;\n            window.location.reload();\n        };\n        // $scope.cur_lang = $translate.use();\n        // vm.cur_lang = $translate.use();\n        vm.cur_lang = \"cn\";\n        $translate.use(\"cn\");\n        $scope.cur_lang = \"cn\";\n        window.localStorage.lang = \"cn\";\n    }\n})();\n```\n\nT.js配置过滤器\n```python\n(function() {\n\t'use strict';\n\n\tangular\n\t\t.module('jhipsterApp')\n\t\t.filter('T',T);\n\t\t\n\tT.$inject = ['$translate'];\n\n\tfunction T($translate) {\n\t\treturn function(key) {\n\t\t\tif (key) {\n\t\t\t\treturn $translate.instant(key);\n\t\t\t}\n\t\t};\n\t}\n})();\n```\n\napp.module.js这是原来的APP初始化方法\n```python\n(function() {\n    'use strict';\n    angular\n        .module('jhipsterApp', [\n            'ngStorage',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar',\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler'];\n\n    function run(stateHandler) {\n        stateHandler.initialize();\n    }\n})();\n```\n\nindex.html中引入顺序\n原引入\n<script src=\"app/app.module.js\"></script>\n\n新引入\n<script src=\"app/lang/lang.translate.js\"></script>\n<script src=\"app/lang/lang.controller.js\"></script>\n<script src=\"app/services/lang/T.js\"></script>\n发现新引入后置于app/app.module.js前后效果都不同，置于后面，app.module.js不能顺利执行，置于最前面，引入的模块不能生效，折磨了很久，加了N个技术群，查了N多资料，重新看了模块和注入依赖的内容，还是找不到根源。终于在长达6小时的折磨后，我猛然发现了问题。\nlang.translate.js 中\nangular.module('jhipsterApp', ['pascalprecht.translate'])\n        .config(translateConfig);\n这种写法是进行模块的配置，与app.module中 angular\n        .module('jhipsterApp', [\n            'ngStorage',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar',\n        ])有冲突！都在进行模块配置生成模块实例，会发生错误，导致后续的链式操作不能正常执行。\n\n修改如下：\napp.module.js\n angular\n        .module('jhipsterApp', [\n            'ngStorage',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar',\n            'pascalprecht.translate'\n        ])\n        .run(run);\nlang.translate.js\n angular\n        .module('jhipsterApp')\n        .config(translateConfig);\n\n测试成功，很感动，6个多小时的反复查看，就是基本概念没有掌握，这个弯路走的很深刻。\n","source":"_posts/我在AngularJS的曲折路.md","raw":"---\ntitle: 我在AngularJS的曲折路\ndate: 2017-01-17 15:18:55\ntags:\n---\n新手单枪匹马闯AngularJS之路，走过的每个弯路，遇到的每个难题，都是汗和泪，再次记录下来，共勉。\n\n1.实现AngularJS的国际化问题的时候，按照网上的步骤进行配置Angular-translate，进行了translate配置，切换控制器，设置支持JSON文件的多语过滤器。\n\n多语文件目录 webapp/i18n/cn.json  webapp/i18n/cn.json\n\n\nlang.translate.js 配置translateConfig\n```python\n(function() {\n    'use strict';\n\n    angular\n        .module('jhipsterApp', ['pascalprecht.translate'])\n        .config(translateConfig);\n\n    translateConfig.$inject = ['$translateProvider'];\n\n    function translateConfig($translateProvider) {\n        var lang = window.localStorage.lang || 'cn';\n        $translateProvider.preferredLanguage(lang);\n        $translateProvider.useStaticFilesLoader({\n            prefix: '/i18n/',\n            suffix: '.json'\n        });\n    }\n})();\n```\n\nlang.controller.js配置控制器\n```python\n(function() {\n    'use strict';\n\n    angular\n        .module('jhipsterApp')\n        .controller('LanguageSwitchingCtrl', LanguageSwitchingCtrl);\n\n    LanguageSwitchingCtrl.$inject = ['$scope', '$translate'];\n\n    function LanguageSwitchingCtrl($scope, $translate) {\n        var vm = this;\n        $scope.switching = function(lang) {\n            $translate.use(lang);\n            window.localStorage.lang = lang;\n            window.location.reload();\n        };\n        // $scope.cur_lang = $translate.use();\n        // vm.cur_lang = $translate.use();\n        vm.cur_lang = \"cn\";\n        $translate.use(\"cn\");\n        $scope.cur_lang = \"cn\";\n        window.localStorage.lang = \"cn\";\n    }\n})();\n```\n\nT.js配置过滤器\n```python\n(function() {\n\t'use strict';\n\n\tangular\n\t\t.module('jhipsterApp')\n\t\t.filter('T',T);\n\t\t\n\tT.$inject = ['$translate'];\n\n\tfunction T($translate) {\n\t\treturn function(key) {\n\t\t\tif (key) {\n\t\t\t\treturn $translate.instant(key);\n\t\t\t}\n\t\t};\n\t}\n})();\n```\n\napp.module.js这是原来的APP初始化方法\n```python\n(function() {\n    'use strict';\n    angular\n        .module('jhipsterApp', [\n            'ngStorage',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar',\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler'];\n\n    function run(stateHandler) {\n        stateHandler.initialize();\n    }\n})();\n```\n\nindex.html中引入顺序\n原引入\n<script src=\"app/app.module.js\"></script>\n\n新引入\n<script src=\"app/lang/lang.translate.js\"></script>\n<script src=\"app/lang/lang.controller.js\"></script>\n<script src=\"app/services/lang/T.js\"></script>\n发现新引入后置于app/app.module.js前后效果都不同，置于后面，app.module.js不能顺利执行，置于最前面，引入的模块不能生效，折磨了很久，加了N个技术群，查了N多资料，重新看了模块和注入依赖的内容，还是找不到根源。终于在长达6小时的折磨后，我猛然发现了问题。\nlang.translate.js 中\nangular.module('jhipsterApp', ['pascalprecht.translate'])\n        .config(translateConfig);\n这种写法是进行模块的配置，与app.module中 angular\n        .module('jhipsterApp', [\n            'ngStorage',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar',\n        ])有冲突！都在进行模块配置生成模块实例，会发生错误，导致后续的链式操作不能正常执行。\n\n修改如下：\napp.module.js\n angular\n        .module('jhipsterApp', [\n            'ngStorage',\n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar',\n            'pascalprecht.translate'\n        ])\n        .run(run);\nlang.translate.js\n angular\n        .module('jhipsterApp')\n        .config(translateConfig);\n\n测试成功，很感动，6个多小时的反复查看，就是基本概念没有掌握，这个弯路走的很深刻。\n","slug":"我在AngularJS的曲折路","published":1,"updated":"2018-05-16T09:03:16.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhcqjk2u000ioyffw6qtf2l6","content":"<p>新手单枪匹马闯AngularJS之路，走过的每个弯路，遇到的每个难题，都是汗和泪，再次记录下来，共勉。</p>\n<p>1.实现AngularJS的国际化问题的时候，按照网上的步骤进行配置Angular-translate，进行了translate配置，切换控制器，设置支持JSON文件的多语过滤器。</p>\n<p>多语文件目录 webapp/i18n/cn.json  webapp/i18n/cn.json</p>\n<p>lang.translate.js 配置translateConfig<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function() &#123;</div><div class=\"line\">    <span class=\"string\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">    angular</div><div class=\"line\">        .module(<span class=\"string\">'jhipsterApp'</span>, [<span class=\"string\">'pascalprecht.translate'</span>])</div><div class=\"line\">        .config(translateConfig);</div><div class=\"line\"></div><div class=\"line\">    translateConfig.$inject = [<span class=\"string\">'$translateProvider'</span>];</div><div class=\"line\"></div><div class=\"line\">    function translateConfig($translateProvider) &#123;</div><div class=\"line\">        var lang = window.localStorage.lang || <span class=\"string\">'cn'</span>;</div><div class=\"line\">        $translateProvider.preferredLanguage(lang);</div><div class=\"line\">        $translateProvider.useStaticFilesLoader(&#123;</div><div class=\"line\">            prefix: <span class=\"string\">'/i18n/'</span>,</div><div class=\"line\">            suffix: <span class=\"string\">'.json'</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>lang.controller.js配置控制器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function() &#123;</div><div class=\"line\">    <span class=\"string\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">    angular</div><div class=\"line\">        .module(<span class=\"string\">'jhipsterApp'</span>)</div><div class=\"line\">        .controller(<span class=\"string\">'LanguageSwitchingCtrl'</span>, LanguageSwitchingCtrl);</div><div class=\"line\"></div><div class=\"line\">    LanguageSwitchingCtrl.$inject = [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$translate'</span>];</div><div class=\"line\"></div><div class=\"line\">    function LanguageSwitchingCtrl($scope, $translate) &#123;</div><div class=\"line\">        var vm = this;</div><div class=\"line\">        $scope.switching = function(lang) &#123;</div><div class=\"line\">            $translate.use(lang);</div><div class=\"line\">            window.localStorage.lang = lang;</div><div class=\"line\">            window.location.reload();</div><div class=\"line\">        &#125;;</div><div class=\"line\">        // $scope.cur_lang = $translate.use();</div><div class=\"line\">        // vm.cur_lang = $translate.use();</div><div class=\"line\">        vm.cur_lang = <span class=\"string\">\"cn\"</span>;</div><div class=\"line\">        $translate.use(<span class=\"string\">\"cn\"</span>);</div><div class=\"line\">        $scope.cur_lang = <span class=\"string\">\"cn\"</span>;</div><div class=\"line\">        window.localStorage.lang = <span class=\"string\">\"cn\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>T.js配置过滤器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function() &#123;</div><div class=\"line\">\t<span class=\"string\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">\tangular</div><div class=\"line\">\t\t.module(<span class=\"string\">'jhipsterApp'</span>)</div><div class=\"line\">\t\t.filter(<span class=\"string\">'T'</span>,T);</div><div class=\"line\">\t\t</div><div class=\"line\">\tT.$inject = [<span class=\"string\">'$translate'</span>];</div><div class=\"line\"></div><div class=\"line\">\tfunction T($translate) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> function(key) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (key) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> $translate.instant(key);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>app.module.js这是原来的APP初始化方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function() &#123;</div><div class=\"line\">    <span class=\"string\">'use strict'</span>;</div><div class=\"line\">    angular</div><div class=\"line\">        .module(<span class=\"string\">'jhipsterApp'</span>, [</div><div class=\"line\">            <span class=\"string\">'ngStorage'</span>,</div><div class=\"line\">            <span class=\"string\">'ngResource'</span>,</div><div class=\"line\">            <span class=\"string\">'ngCookies'</span>,</div><div class=\"line\">            <span class=\"string\">'ngAria'</span>,</div><div class=\"line\">            <span class=\"string\">'ngCacheBuster'</span>,</div><div class=\"line\">            <span class=\"string\">'ngFileUpload'</span>,</div><div class=\"line\">            <span class=\"string\">'ui.bootstrap'</span>,</div><div class=\"line\">            <span class=\"string\">'ui.bootstrap.datetimepicker'</span>,</div><div class=\"line\">            <span class=\"string\">'ui.router'</span>,</div><div class=\"line\">            <span class=\"string\">'infinite-scroll'</span>,</div><div class=\"line\">            // jhipster-needle-angularjs-add-module JHipster will add new module here</div><div class=\"line\">            <span class=\"string\">'angular-loading-bar'</span>,</div><div class=\"line\">        ])</div><div class=\"line\">        .run(run);</div><div class=\"line\"></div><div class=\"line\">    run.$inject = [<span class=\"string\">'stateHandler'</span>];</div><div class=\"line\"></div><div class=\"line\">    function run(stateHandler) &#123;</div><div class=\"line\">        stateHandler.initialize();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>index.html中引入顺序<br>原引入</p>\n<script src=\"app/app.module.js\"></script>\n\n<p>新引入</p>\n<p><script src=\"app/lang/lang.translate.js\"></script></p>\n<p><script src=\"app/lang/lang.controller.js\"></script></p>\n<p><script src=\"app/services/lang/T.js\"></script><br>发现新引入后置于app/app.module.js前后效果都不同，置于后面，app.module.js不能顺利执行，置于最前面，引入的模块不能生效，折磨了很久，加了N个技术群，查了N多资料，重新看了模块和注入依赖的内容，还是找不到根源。终于在长达6小时的折磨后，我猛然发现了问题。<br>lang.translate.js 中<br>angular.module(‘jhipsterApp’, [‘pascalprecht.translate’])<br>        .config(translateConfig);<br>这种写法是进行模块的配置，与app.module中 angular<br>        .module(‘jhipsterApp’, [<br>            ‘ngStorage’,<br>            ‘ngResource’,<br>            ‘ngCookies’,<br>            ‘ngAria’,<br>            ‘ngCacheBuster’,<br>            ‘ngFileUpload’,<br>            ‘ui.bootstrap’,<br>            ‘ui.bootstrap.datetimepicker’,<br>            ‘ui.router’,<br>            ‘infinite-scroll’,<br>            // jhipster-needle-angularjs-add-module JHipster will add new module here<br>            ‘angular-loading-bar’,<br>        ])有冲突！都在进行模块配置生成模块实例，会发生错误，导致后续的链式操作不能正常执行。</p>\n<p>修改如下：<br>app.module.js<br> angular<br>        .module(‘jhipsterApp’, [<br>            ‘ngStorage’,<br>            ‘ngResource’,<br>            ‘ngCookies’,<br>            ‘ngAria’,<br>            ‘ngCacheBuster’,<br>            ‘ngFileUpload’,<br>            ‘ui.bootstrap’,<br>            ‘ui.bootstrap.datetimepicker’,<br>            ‘ui.router’,<br>            ‘infinite-scroll’,<br>            // jhipster-needle-angularjs-add-module JHipster will add new module here<br>            ‘angular-loading-bar’,<br>            ‘pascalprecht.translate’<br>        ])<br>        .run(run);<br>lang.translate.js<br> angular<br>        .module(‘jhipsterApp’)<br>        .config(translateConfig);</p>\n<p>测试成功，很感动，6个多小时的反复查看，就是基本概念没有掌握，这个弯路走的很深刻。</p>\n","excerpt":"","more":"<p>新手单枪匹马闯AngularJS之路，走过的每个弯路，遇到的每个难题，都是汗和泪，再次记录下来，共勉。</p>\n<p>1.实现AngularJS的国际化问题的时候，按照网上的步骤进行配置Angular-translate，进行了translate配置，切换控制器，设置支持JSON文件的多语过滤器。</p>\n<p>多语文件目录 webapp/i18n/cn.json  webapp/i18n/cn.json</p>\n<p>lang.translate.js 配置translateConfig<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function() &#123;</div><div class=\"line\">    <span class=\"string\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">    angular</div><div class=\"line\">        .module(<span class=\"string\">'jhipsterApp'</span>, [<span class=\"string\">'pascalprecht.translate'</span>])</div><div class=\"line\">        .config(translateConfig);</div><div class=\"line\"></div><div class=\"line\">    translateConfig.$inject = [<span class=\"string\">'$translateProvider'</span>];</div><div class=\"line\"></div><div class=\"line\">    function translateConfig($translateProvider) &#123;</div><div class=\"line\">        var lang = window.localStorage.lang || <span class=\"string\">'cn'</span>;</div><div class=\"line\">        $translateProvider.preferredLanguage(lang);</div><div class=\"line\">        $translateProvider.useStaticFilesLoader(&#123;</div><div class=\"line\">            prefix: <span class=\"string\">'/i18n/'</span>,</div><div class=\"line\">            suffix: <span class=\"string\">'.json'</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>lang.controller.js配置控制器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function() &#123;</div><div class=\"line\">    <span class=\"string\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">    angular</div><div class=\"line\">        .module(<span class=\"string\">'jhipsterApp'</span>)</div><div class=\"line\">        .controller(<span class=\"string\">'LanguageSwitchingCtrl'</span>, LanguageSwitchingCtrl);</div><div class=\"line\"></div><div class=\"line\">    LanguageSwitchingCtrl.$inject = [<span class=\"string\">'$scope'</span>, <span class=\"string\">'$translate'</span>];</div><div class=\"line\"></div><div class=\"line\">    function LanguageSwitchingCtrl($scope, $translate) &#123;</div><div class=\"line\">        var vm = this;</div><div class=\"line\">        $scope.switching = function(lang) &#123;</div><div class=\"line\">            $translate.use(lang);</div><div class=\"line\">            window.localStorage.lang = lang;</div><div class=\"line\">            window.location.reload();</div><div class=\"line\">        &#125;;</div><div class=\"line\">        // $scope.cur_lang = $translate.use();</div><div class=\"line\">        // vm.cur_lang = $translate.use();</div><div class=\"line\">        vm.cur_lang = <span class=\"string\">\"cn\"</span>;</div><div class=\"line\">        $translate.use(<span class=\"string\">\"cn\"</span>);</div><div class=\"line\">        $scope.cur_lang = <span class=\"string\">\"cn\"</span>;</div><div class=\"line\">        window.localStorage.lang = <span class=\"string\">\"cn\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>T.js配置过滤器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function() &#123;</div><div class=\"line\">\t<span class=\"string\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">\tangular</div><div class=\"line\">\t\t.module(<span class=\"string\">'jhipsterApp'</span>)</div><div class=\"line\">\t\t.filter(<span class=\"string\">'T'</span>,T);</div><div class=\"line\">\t\t</div><div class=\"line\">\tT.$inject = [<span class=\"string\">'$translate'</span>];</div><div class=\"line\"></div><div class=\"line\">\tfunction T($translate) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> function(key) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (key) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> $translate.instant(key);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>app.module.js这是原来的APP初始化方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function() &#123;</div><div class=\"line\">    <span class=\"string\">'use strict'</span>;</div><div class=\"line\">    angular</div><div class=\"line\">        .module(<span class=\"string\">'jhipsterApp'</span>, [</div><div class=\"line\">            <span class=\"string\">'ngStorage'</span>,</div><div class=\"line\">            <span class=\"string\">'ngResource'</span>,</div><div class=\"line\">            <span class=\"string\">'ngCookies'</span>,</div><div class=\"line\">            <span class=\"string\">'ngAria'</span>,</div><div class=\"line\">            <span class=\"string\">'ngCacheBuster'</span>,</div><div class=\"line\">            <span class=\"string\">'ngFileUpload'</span>,</div><div class=\"line\">            <span class=\"string\">'ui.bootstrap'</span>,</div><div class=\"line\">            <span class=\"string\">'ui.bootstrap.datetimepicker'</span>,</div><div class=\"line\">            <span class=\"string\">'ui.router'</span>,</div><div class=\"line\">            <span class=\"string\">'infinite-scroll'</span>,</div><div class=\"line\">            // jhipster-needle-angularjs-add-module JHipster will add new module here</div><div class=\"line\">            <span class=\"string\">'angular-loading-bar'</span>,</div><div class=\"line\">        ])</div><div class=\"line\">        .run(run);</div><div class=\"line\"></div><div class=\"line\">    run.$inject = [<span class=\"string\">'stateHandler'</span>];</div><div class=\"line\"></div><div class=\"line\">    function run(stateHandler) &#123;</div><div class=\"line\">        stateHandler.initialize();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>index.html中引入顺序<br>原引入</p>\n<script src=\"app/app.module.js\"></script>\n\n<p>新引入</p>\n<p><script src=\"app/lang/lang.translate.js\"></script></p>\n<p><script src=\"app/lang/lang.controller.js\"></script></p>\n<p><script src=\"app/services/lang/T.js\"></script><br>发现新引入后置于app/app.module.js前后效果都不同，置于后面，app.module.js不能顺利执行，置于最前面，引入的模块不能生效，折磨了很久，加了N个技术群，查了N多资料，重新看了模块和注入依赖的内容，还是找不到根源。终于在长达6小时的折磨后，我猛然发现了问题。<br>lang.translate.js 中<br>angular.module(‘jhipsterApp’, [‘pascalprecht.translate’])<br>        .config(translateConfig);<br>这种写法是进行模块的配置，与app.module中 angular<br>        .module(‘jhipsterApp’, [<br>            ‘ngStorage’,<br>            ‘ngResource’,<br>            ‘ngCookies’,<br>            ‘ngAria’,<br>            ‘ngCacheBuster’,<br>            ‘ngFileUpload’,<br>            ‘ui.bootstrap’,<br>            ‘ui.bootstrap.datetimepicker’,<br>            ‘ui.router’,<br>            ‘infinite-scroll’,<br>            // jhipster-needle-angularjs-add-module JHipster will add new module here<br>            ‘angular-loading-bar’,<br>        ])有冲突！都在进行模块配置生成模块实例，会发生错误，导致后续的链式操作不能正常执行。</p>\n<p>修改如下：<br>app.module.js<br> angular<br>        .module(‘jhipsterApp’, [<br>            ‘ngStorage’,<br>            ‘ngResource’,<br>            ‘ngCookies’,<br>            ‘ngAria’,<br>            ‘ngCacheBuster’,<br>            ‘ngFileUpload’,<br>            ‘ui.bootstrap’,<br>            ‘ui.bootstrap.datetimepicker’,<br>            ‘ui.router’,<br>            ‘infinite-scroll’,<br>            // jhipster-needle-angularjs-add-module JHipster will add new module here<br>            ‘angular-loading-bar’,<br>            ‘pascalprecht.translate’<br>        ])<br>        .run(run);<br>lang.translate.js<br> angular<br>        .module(‘jhipsterApp’)<br>        .config(translateConfig);</p>\n<p>测试成功，很感动，6个多小时的反复查看，就是基本概念没有掌握，这个弯路走的很深刻。</p>\n"},{"title":"给阿玖做件小睡衣","date":"2018-05-17T07:35:43.000Z","description":"“”","_content":"北京的夏天这次来的有点猛烈，还不到六月份，持续30度的高温天气，仿佛已经步入桑拿天的感觉。偶然的一个中午，婆婆给我介绍她的一件小背心，是亲戚用人造棉手工做好送她的，看着真心有趣。我萌生了为阿玖做一件小睡衣的想法，她现在晚上穿着纯棉的短袖包屁衣，再盖一个小薄被。\n她这个近两个月的小娃娃，以躺姿为基础，添加千变万化但又很含蓄的手脚动作，市面上的裙子不对她开放，那我就来试试吧，希望她的第一个夏天过的舒服一些。\n这是我从某宝上挑选的布料。\n<div class=\"image-size-400\">\n{% asset_img 1.png  %}\n</div>\n<div class=\"image-size-400\">\n{% asset_img 2.png  %}\n</div>\n<div class=\"image-size-400\">\n{% asset_img 3.jpg  %}\n</div>\n<div class=\"image-size-400\">\n{% asset_img 4.png  %}\n</div>\n<div class=\"image-size-400\">\n{% asset_img 5.png %}\n</div>\n这是网络上搜索到的裁剪图\n<div class=\"image-size-400\">\n{% asset_img 6.jpeg  %}\n</div>","source":"_posts/给阿玖做件小睡衣.md","raw":"---\ntitle: 给阿玖做件小睡衣\ndate: 2018-05-17 15:35:43\ncategories: \"小玖乐团\"\ntags:\ndescription: “”\n---\n北京的夏天这次来的有点猛烈，还不到六月份，持续30度的高温天气，仿佛已经步入桑拿天的感觉。偶然的一个中午，婆婆给我介绍她的一件小背心，是亲戚用人造棉手工做好送她的，看着真心有趣。我萌生了为阿玖做一件小睡衣的想法，她现在晚上穿着纯棉的短袖包屁衣，再盖一个小薄被。\n她这个近两个月的小娃娃，以躺姿为基础，添加千变万化但又很含蓄的手脚动作，市面上的裙子不对她开放，那我就来试试吧，希望她的第一个夏天过的舒服一些。\n这是我从某宝上挑选的布料。\n<div class=\"image-size-400\">\n{% asset_img 1.png  %}\n</div>\n<div class=\"image-size-400\">\n{% asset_img 2.png  %}\n</div>\n<div class=\"image-size-400\">\n{% asset_img 3.jpg  %}\n</div>\n<div class=\"image-size-400\">\n{% asset_img 4.png  %}\n</div>\n<div class=\"image-size-400\">\n{% asset_img 5.png %}\n</div>\n这是网络上搜索到的裁剪图\n<div class=\"image-size-400\">\n{% asset_img 6.jpeg  %}\n</div>","slug":"给阿玖做件小睡衣","published":1,"updated":"2018-05-20T08:37:25.238Z","_id":"cjhcqjk2u000joyffuw47womx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>北京的夏天这次来的有点猛烈，还不到六月份，持续30度的高温天气，仿佛已经步入桑拿天的感觉。偶然的一个中午，婆婆给我介绍她的一件小背心，是亲戚用人造棉手工做好送她的，看着真心有趣。我萌生了为阿玖做一件小睡衣的想法，她现在晚上穿着纯棉的短袖包屁衣，再盖一个小薄被。<br>她这个近两个月的小娃娃，以躺姿为基础，添加千变万化但又很含蓄的手脚动作，市面上的裙子不对她开放，那我就来试试吧，希望她的第一个夏天过的舒服一些。<br>这是我从某宝上挑选的布料。</p>\n<div class=\"image-size-400\"><br><img src=\"/2018/05/17/给阿玖做件小睡衣/1.png\" alt=\"1.png\" title=\"\"><br></div><br><div class=\"image-size-400\"><br><img src=\"/2018/05/17/给阿玖做件小睡衣/2.png\" alt=\"2.png\" title=\"\"><br></div><br><div class=\"image-size-400\"><br><img src=\"/2018/05/17/给阿玖做件小睡衣/3.jpg\" alt=\"3.jpg\" title=\"\"><br></div><br><div class=\"image-size-400\"><br><img src=\"/2018/05/17/给阿玖做件小睡衣/4.png\" alt=\"4.png\" title=\"\"><br></div><br><div class=\"image-size-400\"><br><img src=\"/2018/05/17/给阿玖做件小睡衣/5.png\" alt=\"5.png\" title=\"\"><br></div><br>这是网络上搜索到的裁剪图<br><div class=\"image-size-400\"><br><img src=\"/2018/05/17/给阿玖做件小睡衣/6.jpeg\" alt=\"6.jpeg\" title=\"\"><br></div>","excerpt":"","more":"<p>北京的夏天这次来的有点猛烈，还不到六月份，持续30度的高温天气，仿佛已经步入桑拿天的感觉。偶然的一个中午，婆婆给我介绍她的一件小背心，是亲戚用人造棉手工做好送她的，看着真心有趣。我萌生了为阿玖做一件小睡衣的想法，她现在晚上穿着纯棉的短袖包屁衣，再盖一个小薄被。<br>她这个近两个月的小娃娃，以躺姿为基础，添加千变万化但又很含蓄的手脚动作，市面上的裙子不对她开放，那我就来试试吧，希望她的第一个夏天过的舒服一些。<br>这是我从某宝上挑选的布料。</p>\n<div class=\"image-size-400\"><br><img src=\"/2018/05/17/给阿玖做件小睡衣/1.png\" alt=\"1.png\" title=\"\"><br></div><br><div class=\"image-size-400\"><br><img src=\"/2018/05/17/给阿玖做件小睡衣/2.png\" alt=\"2.png\" title=\"\"><br></div><br><div class=\"image-size-400\"><br><img src=\"/2018/05/17/给阿玖做件小睡衣/3.jpg\" alt=\"3.jpg\" title=\"\"><br></div><br><div class=\"image-size-400\"><br><img src=\"/2018/05/17/给阿玖做件小睡衣/4.png\" alt=\"4.png\" title=\"\"><br></div><br><div class=\"image-size-400\"><br><img src=\"/2018/05/17/给阿玖做件小睡衣/5.png\" alt=\"5.png\" title=\"\"><br></div><br>这是网络上搜索到的裁剪图<br><div class=\"image-size-400\"><br><img src=\"/2018/05/17/给阿玖做件小睡衣/6.jpeg\" alt=\"6.jpeg\" title=\"\"><br></div>"}],"PostAsset":[{"_id":"source/_posts/给阿玖做件小睡衣/2.png","slug":"2.png","post":"cjhcqjk2u000joyffuw47womx","modified":0,"renderable":0},{"_id":"source/_posts/给阿玖做件小睡衣/1.png","slug":"1.png","post":"cjhcqjk2u000joyffuw47womx","modified":0,"renderable":0},{"_id":"source/_posts/给阿玖做件小睡衣/3.jpg","slug":"3.jpg","post":"cjhcqjk2u000joyffuw47womx","modified":0,"renderable":0},{"_id":"source/_posts/给阿玖做件小睡衣/4.png","slug":"4.png","post":"cjhcqjk2u000joyffuw47womx","modified":0,"renderable":0},{"_id":"source/_posts/给阿玖做件小睡衣/5.png","slug":"5.png","post":"cjhcqjk2u000joyffuw47womx","modified":0,"renderable":0},{"_id":"source/_posts/给阿玖做件小睡衣/6.jpeg","slug":"6.jpeg","post":"cjhcqjk2u000joyffuw47womx","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjhcqjk2u000joyffuw47womx","category_id":"cjhcqjk2v000koyffmezao0h5","_id":"cjhcqjk32000loyff3uq23qoj"}],"PostTag":[],"Tag":[]}}