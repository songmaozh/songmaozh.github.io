{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1481613740254},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1481613740255},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1481613740255},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1481613740254},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1481613740262},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1481613740258},{"_id":"source/_posts/HexoHelper.md","hash":"208c53b9b7b76e79e2103020e8f574d9e9f0378b","modified":1484030317521},{"_id":"source/_posts/Jquery简写.md","hash":"514b401b5b33ac48665eb9886a0a51ba560b5a78","modified":1481875213174},{"_id":"source/_posts/SpringBoot-Help.md","hash":"4425cb3ae87c4087ef2dbbde27c89093562a44f3","modified":1484031591659},{"_id":"source/_posts/Namespace.md","hash":"3ac4e5f98f922ebf8c6d5cd99c9cb0a74dc45bc0","modified":1484030313729},{"_id":"source/_posts/Technical-Term.md","hash":"ebba3085964f4d5b3c60944c1f115440e65c5f66","modified":1481875087518},{"_id":"source/_posts/js自执行函数.md","hash":"99af0baaa113e05394c618519c0bd6f437666494","modified":1481875304510},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1481613740243},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1481613740290},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1481613740296},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1481613740290},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1481613740296},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1481613740296},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1481613740297},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1481613740297},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1481613740297},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1481613740297},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1481613740301},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1481613740298},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481613740298},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481613740300},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1481613740300},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1481613740296},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1481613740396},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1481613740408},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1481613740401},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1481613740401},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1481613740408},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1481613740408},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1481613740411},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1481613740411},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1481613740409},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1481613740410},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1481613740341},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1481613740342},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1481613740394},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1481613740367},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1481613740367},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1481613740336},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1481613740343},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1481613740368},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1481613740387},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1481613740367},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1481613740382},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1481613740387},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1481613740390},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1481613740390},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1481613740388},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1481613740391},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1481613740391},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1481613740342},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1481613740435},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1481613740436},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1481613740435},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1481613740438},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1481613740437},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1481613740436},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1481613740411},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1481613740411},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1481613740414},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1481613740415},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1481613740412},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1481613740412},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1481613740419},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1481613740417},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1481613740413},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1481613740417},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1481613740419},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1481613740417},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1481613740420},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1481613740418},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1481613740420},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1481613740427},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1481613740427},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1481613740427},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1481613740427},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1481613740430},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1481613740430},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1481613740422},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1481613740436},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1481613740436},{"_id":"public/2016/12/15/js自执行函数/index.html","hash":"4b54c8397b5ed73c443e01b97c1ded47195d8234","modified":1484031646087},{"_id":"public/2016/12/15/Jquery简写/index.html","hash":"8f2e0ac88f5e65063a87188bed7e015f7dac3dff","modified":1484031646108},{"_id":"public/2016/12/14/Technical-Term/index.html","hash":"649c2361ed90633f71911d2c6c089873636e99a8","modified":1484031646110},{"_id":"public/2016/12/13/hello-world/index.html","hash":"3a29b9a4d9c6f464581932748e103de34e0f8284","modified":1484031646110},{"_id":"public/archives/index.html","hash":"e4140f9c92636765979ef6fa21c41295f2a675ea","modified":1484031646110},{"_id":"public/archives/2016/index.html","hash":"c60d5a1bb694a622396ddea5b32731eebe4f5e04","modified":1484031646110},{"_id":"public/archives/2016/12/index.html","hash":"23a1edd5006bbdc722869e07bb90d5d99d8c0988","modified":1484031646110},{"_id":"public/index.html","hash":"f167d95f028e892fd0ff5d40fd1358322c8a529c","modified":1484031646110},{"_id":"public/2017/01/10/HexoHelper/index.html","hash":"d7bac025dbea2418b49c5752a44361c813c570f9","modified":1484031646119},{"_id":"public/archives/2017/index.html","hash":"fe984ef6f38f93ded87cde3684991c9d00c07a9b","modified":1484031646120},{"_id":"public/archives/2017/01/index.html","hash":"9c71fd98bb429d53ffe90899dcf035db10105f06","modified":1484031646120},{"_id":"public/2017/01/10/SpringBoot-Help/index.html","hash":"6c9025c57b12355c61c1608c708283cc65cebf65","modified":1484031646121},{"_id":"public/2016/12/14/Namespace/index.html","hash":"f7b52254a2b39c825d129dc715f234cb7b70f682","modified":1484031646121},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1484031646124},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1484031646124},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1484031646124},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1484031646124},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1484031646124},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1484031646125},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1484031646125},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1484031646125},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1484031646125},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1484031646125},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1484031646797},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1484031646806},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1484031646806},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1484031646806},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1484031646806},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1484031646806},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1484031646807},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1484031646807},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1484031646807},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1484031646807},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1484031646807},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1484031646808},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1484031646808}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Jquery简写","date":"2016-12-15T06:49:37.000Z","_content":"## ~ function($) {}($) \n```python\nvar fn = function(opt){};\nfn($);\n```\n## $this和$(this)\n// this其实是一个Html 元素。\n// $this 只是个变量名，加$是为说明其是个jquery对象。\n// 而$(this)是个转换，将this表示的dom对象转为jquery对象，这样就可以使用jquery提供的方法操作。\n\n## return this.each(function () {})\n因为each返回的也是this对象，所以直接return this.each可以执行你的相关操作，还可以保持链式调用功能\n因为this.each保证了遍历完成才执行下一个操作，否则迭代是延迟执行的，前面的插件并没有实际执行。\n```python\njQuery.fn.test2= function(){ \n   this.css(\"background\",\"#ff0\");//这里面的this为jquery对象，而不是dom对象 \n   return this.each(function(){ //遍历匹配的元素，此处的this表示为jquery对象，而不是dom对象 \n    alert(\"this\"+this+this.innerHTML); \n    //提示当前对象的dom节点名称,这里的this关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）。 \n     }); \n};\n```\nthis.css(),this.each（）里面的this为jquery对象，但是alert里面this为dom对象.\n为什么要return this.each()\n先return this.each(),后调用each（）方法，而each（）方法返回jQuery对象，所以这样就可以继续链式操作了。\n首先在JQ中,each是遍历一个数组,比如你$('.some')返回的不一定只是一个jq对象,有可能是个数组,好多个elements.\n所以return this.each(){}是把所有你索引的对象都作用到这个插件下.\n你若保证你的插件每次都只会用一个JQ对象,那么你可以直接return this.\n\n\n## JavaScript prototype 属性\n定义和用法\nprototype 属性允许您向对象添加属性和方法\n注意： Prototype 是全局属性，适用于所有的Javascript对象。\n语法\nobject.prototype.name=value\n\n## _.extend\n_，在这里应该是接管了JQUERY，就是jQuery。(有不少人这样用，因为和$冲突)\n_.extend方法是把指定的对象进行扩展(在这里就是document.body.style)\nQuery中需要用到$符号，如果其他js库（例如大名鼎鼎的prototype)也定义了$符号，那么就会造成冲突，会影响到js代码的正常执行。\n\n## jquery call方法和apply方法\ncall方法: \n语法：call([thisObj[,arg1[, arg2[,   [,.argN]]]]]) \n定义：调用一个对象的一个方法，以另一个对象替换当前对象。 \n说明： \ncall 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。 \n如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 \n\napply方法： \n语法：apply([thisObj[,argArray]]) \n定义：应用某一对象的一个方法，用另一个对象替换当前对象。 \n说明： \n如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。 \n如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。 \n\n\n```python\n  \n    <script language=\"javascript\"><!--\n   \n    /**定义一个animal类*/  \n    function Animal(){   \n    this.name = \"Animal\";   \n    this.showName = function(){   \n    alert(this.name);   \n    }   \n    }   \n    /**定义一个Cat类*/  \n    function Cat(){   \n    this.name = \"Cat\";   \n    }   \n  \n    /**创建两个类对象*/  \n    var animal = new Animal();   \n    var cat = new Cat();   \n  \n    //通过call或apply方法，将原本属于Animal对象的showName()方法交给当前对象cat来使用了。   \n    //输入结果为\"Cat\"   \n    animal.showName.call(cat,\",\");   \n    //animal.showName.apply(cat,[]);   \n      \n    \n// --></script> \n```","source":"_posts/Jquery简写.md","raw":"---\ntitle: Jquery简写\ndate: 2016-12-15 14:49:37\ntags:\n---\n## ~ function($) {}($) \n```python\nvar fn = function(opt){};\nfn($);\n```\n## $this和$(this)\n// this其实是一个Html 元素。\n// $this 只是个变量名，加$是为说明其是个jquery对象。\n// 而$(this)是个转换，将this表示的dom对象转为jquery对象，这样就可以使用jquery提供的方法操作。\n\n## return this.each(function () {})\n因为each返回的也是this对象，所以直接return this.each可以执行你的相关操作，还可以保持链式调用功能\n因为this.each保证了遍历完成才执行下一个操作，否则迭代是延迟执行的，前面的插件并没有实际执行。\n```python\njQuery.fn.test2= function(){ \n   this.css(\"background\",\"#ff0\");//这里面的this为jquery对象，而不是dom对象 \n   return this.each(function(){ //遍历匹配的元素，此处的this表示为jquery对象，而不是dom对象 \n    alert(\"this\"+this+this.innerHTML); \n    //提示当前对象的dom节点名称,这里的this关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）。 \n     }); \n};\n```\nthis.css(),this.each（）里面的this为jquery对象，但是alert里面this为dom对象.\n为什么要return this.each()\n先return this.each(),后调用each（）方法，而each（）方法返回jQuery对象，所以这样就可以继续链式操作了。\n首先在JQ中,each是遍历一个数组,比如你$('.some')返回的不一定只是一个jq对象,有可能是个数组,好多个elements.\n所以return this.each(){}是把所有你索引的对象都作用到这个插件下.\n你若保证你的插件每次都只会用一个JQ对象,那么你可以直接return this.\n\n\n## JavaScript prototype 属性\n定义和用法\nprototype 属性允许您向对象添加属性和方法\n注意： Prototype 是全局属性，适用于所有的Javascript对象。\n语法\nobject.prototype.name=value\n\n## _.extend\n_，在这里应该是接管了JQUERY，就是jQuery。(有不少人这样用，因为和$冲突)\n_.extend方法是把指定的对象进行扩展(在这里就是document.body.style)\nQuery中需要用到$符号，如果其他js库（例如大名鼎鼎的prototype)也定义了$符号，那么就会造成冲突，会影响到js代码的正常执行。\n\n## jquery call方法和apply方法\ncall方法: \n语法：call([thisObj[,arg1[, arg2[,   [,.argN]]]]]) \n定义：调用一个对象的一个方法，以另一个对象替换当前对象。 \n说明： \ncall 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。 \n如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 \n\napply方法： \n语法：apply([thisObj[,argArray]]) \n定义：应用某一对象的一个方法，用另一个对象替换当前对象。 \n说明： \n如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。 \n如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。 \n\n\n```python\n  \n    <script language=\"javascript\"><!--\n   \n    /**定义一个animal类*/  \n    function Animal(){   \n    this.name = \"Animal\";   \n    this.showName = function(){   \n    alert(this.name);   \n    }   \n    }   \n    /**定义一个Cat类*/  \n    function Cat(){   \n    this.name = \"Cat\";   \n    }   \n  \n    /**创建两个类对象*/  \n    var animal = new Animal();   \n    var cat = new Cat();   \n  \n    //通过call或apply方法，将原本属于Animal对象的showName()方法交给当前对象cat来使用了。   \n    //输入结果为\"Cat\"   \n    animal.showName.call(cat,\",\");   \n    //animal.showName.apply(cat,[]);   \n      \n    \n// --></script> \n```","slug":"Jquery简写","published":1,"updated":"2016-12-16T08:00:13.174Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixr64idl0000z8joago6uxp5","content":"<h2 id=\"function\"><a href=\"#function\" class=\"headerlink\" title=\"~ function($) {}($)\"></a>~ function($) {}($)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var fn = function(opt)&#123;&#125;;</div><div class=\"line\">fn($);</div></pre></td></tr></table></figure>\n<h2 id=\"this和-this\"><a href=\"#this和-this\" class=\"headerlink\" title=\"$this和$(this)\"></a>$this和$(this)</h2><p>// this其实是一个Html 元素。<br>// $this 只是个变量名，加$是为说明其是个jquery对象。<br>// 而$(this)是个转换，将this表示的dom对象转为jquery对象，这样就可以使用jquery提供的方法操作。</p>\n<h2 id=\"return-this-each-function\"><a href=\"#return-this-each-function\" class=\"headerlink\" title=\"return this.each(function () {})\"></a>return this.each(function () {})</h2><p>因为each返回的也是this对象，所以直接return this.each可以执行你的相关操作，还可以保持链式调用功能<br>因为this.each保证了遍历完成才执行下一个操作，否则迭代是延迟执行的，前面的插件并没有实际执行。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.fn.test2= function()&#123; </div><div class=\"line\">   this.css(<span class=\"string\">\"background\"</span>,<span class=\"string\">\"#ff0\"</span>);//这里面的this为jquery对象，而不是dom对象 </div><div class=\"line\">   <span class=\"keyword\">return</span> this.each(function()&#123; //遍历匹配的元素，此处的this表示为jquery对象，而不是dom对象 </div><div class=\"line\">    alert(<span class=\"string\">\"this\"</span>+this+this.innerHTML); </div><div class=\"line\">    //提示当前对象的dom节点名称,这里的this关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）。 </div><div class=\"line\">     &#125;); </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>this.css(),this.each（）里面的this为jquery对象，但是alert里面this为dom对象.<br>为什么要return this.each()<br>先return this.each(),后调用each（）方法，而each（）方法返回jQuery对象，所以这样就可以继续链式操作了。<br>首先在JQ中,each是遍历一个数组,比如你$(‘.some’)返回的不一定只是一个jq对象,有可能是个数组,好多个elements.<br>所以return this.each(){}是把所有你索引的对象都作用到这个插件下.<br>你若保证你的插件每次都只会用一个JQ对象,那么你可以直接return this.</p>\n<h2 id=\"JavaScript-prototype-属性\"><a href=\"#JavaScript-prototype-属性\" class=\"headerlink\" title=\"JavaScript prototype 属性\"></a>JavaScript prototype 属性</h2><p>定义和用法<br>prototype 属性允许您向对象添加属性和方法<br>注意： Prototype 是全局属性，适用于所有的Javascript对象。<br>语法<br>object.prototype.name=value</p>\n<h2 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"_.extend\"></a>_.extend</h2><p><em>，在这里应该是接管了JQUERY，就是jQuery。(有不少人这样用，因为和$冲突)\n</em>.extend方法是把指定的对象进行扩展(在这里就是document.body.style)<br>Query中需要用到$符号，如果其他js库（例如大名鼎鼎的prototype)也定义了$符号，那么就会造成冲突，会影响到js代码的正常执行。</p>\n<h2 id=\"jquery-call方法和apply方法\"><a href=\"#jquery-call方法和apply方法\" class=\"headerlink\" title=\"jquery call方法和apply方法\"></a>jquery call方法和apply方法</h2><p>call方法:<br>语法：call([thisObj[,arg1[, arg2[,   [,.argN]]]]])<br>定义：调用一个对象的一个方法，以另一个对象替换当前对象。<br>说明：<br>call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。<br>如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 </p>\n<p>apply方法：<br>语法：apply([thisObj[,argArray]])<br>定义：应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明：<br>如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。<br>如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。 </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">    &lt;script language=\"javascript\"&gt;&lt;!--</div><div class=\"line\">   </div><div class=\"line\">    /**定义一个animal类*/  </div><div class=\"line\">    function Animal()&#123;   </div><div class=\"line\">    this.name = \"Animal\";   </div><div class=\"line\">    this.showName = function()&#123;   </div><div class=\"line\">    alert(this.name);   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    /**定义一个Cat类*/  </div><div class=\"line\">    function Cat()&#123;   </div><div class=\"line\">    this.name = \"Cat\";   </div><div class=\"line\">    &#125;   </div><div class=\"line\">  </div><div class=\"line\">    /**创建两个类对象*/  </div><div class=\"line\">    var animal = new Animal();   </div><div class=\"line\">    var cat = new Cat();   </div><div class=\"line\">  </div><div class=\"line\">    //通过call或apply方法，将原本属于Animal对象的showName()方法交给当前对象cat来使用了。   </div><div class=\"line\">    //输入结果为\"Cat\"   </div><div class=\"line\">    animal.showName.call(cat,\",\");   </div><div class=\"line\">    //animal.showName.apply(cat,[]);   </div><div class=\"line\">      </div><div class=\"line\">    </div><div class=\"line\">// --&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"function\"><a href=\"#function\" class=\"headerlink\" title=\"~ function($) {}($)\"></a>~ function($) {}($)</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var fn = function(opt)&#123;&#125;;</div><div class=\"line\">fn($);</div></pre></td></tr></table></figure>\n<h2 id=\"this和-this\"><a href=\"#this和-this\" class=\"headerlink\" title=\"$this和$(this)\"></a>$this和$(this)</h2><p>// this其实是一个Html 元素。<br>// $this 只是个变量名，加$是为说明其是个jquery对象。<br>// 而$(this)是个转换，将this表示的dom对象转为jquery对象，这样就可以使用jquery提供的方法操作。</p>\n<h2 id=\"return-this-each-function\"><a href=\"#return-this-each-function\" class=\"headerlink\" title=\"return this.each(function () {})\"></a>return this.each(function () {})</h2><p>因为each返回的也是this对象，所以直接return this.each可以执行你的相关操作，还可以保持链式调用功能<br>因为this.each保证了遍历完成才执行下一个操作，否则迭代是延迟执行的，前面的插件并没有实际执行。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.fn.test2= function()&#123; </div><div class=\"line\">   this.css(<span class=\"string\">\"background\"</span>,<span class=\"string\">\"#ff0\"</span>);//这里面的this为jquery对象，而不是dom对象 </div><div class=\"line\">   <span class=\"keyword\">return</span> this.each(function()&#123; //遍历匹配的元素，此处的this表示为jquery对象，而不是dom对象 </div><div class=\"line\">    alert(<span class=\"string\">\"this\"</span>+this+this.innerHTML); </div><div class=\"line\">    //提示当前对象的dom节点名称,这里的this关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）。 </div><div class=\"line\">     &#125;); </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>this.css(),this.each（）里面的this为jquery对象，但是alert里面this为dom对象.<br>为什么要return this.each()<br>先return this.each(),后调用each（）方法，而each（）方法返回jQuery对象，所以这样就可以继续链式操作了。<br>首先在JQ中,each是遍历一个数组,比如你$(‘.some’)返回的不一定只是一个jq对象,有可能是个数组,好多个elements.<br>所以return this.each(){}是把所有你索引的对象都作用到这个插件下.<br>你若保证你的插件每次都只会用一个JQ对象,那么你可以直接return this.</p>\n<h2 id=\"JavaScript-prototype-属性\"><a href=\"#JavaScript-prototype-属性\" class=\"headerlink\" title=\"JavaScript prototype 属性\"></a>JavaScript prototype 属性</h2><p>定义和用法<br>prototype 属性允许您向对象添加属性和方法<br>注意： Prototype 是全局属性，适用于所有的Javascript对象。<br>语法<br>object.prototype.name=value</p>\n<h2 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"_.extend\"></a>_.extend</h2><p><em>，在这里应该是接管了JQUERY，就是jQuery。(有不少人这样用，因为和$冲突)\n</em>.extend方法是把指定的对象进行扩展(在这里就是document.body.style)<br>Query中需要用到$符号，如果其他js库（例如大名鼎鼎的prototype)也定义了$符号，那么就会造成冲突，会影响到js代码的正常执行。</p>\n<h2 id=\"jquery-call方法和apply方法\"><a href=\"#jquery-call方法和apply方法\" class=\"headerlink\" title=\"jquery call方法和apply方法\"></a>jquery call方法和apply方法</h2><p>call方法:<br>语法：call([thisObj[,arg1[, arg2[,   [,.argN]]]]])<br>定义：调用一个对象的一个方法，以另一个对象替换当前对象。<br>说明：<br>call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。<br>如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 </p>\n<p>apply方法：<br>语法：apply([thisObj[,argArray]])<br>定义：应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明：<br>如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。<br>如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。 </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">    &lt;script language=\"javascript\"&gt;&lt;!--</div><div class=\"line\">   </div><div class=\"line\">    /**定义一个animal类*/  </div><div class=\"line\">    function Animal()&#123;   </div><div class=\"line\">    this.name = \"Animal\";   </div><div class=\"line\">    this.showName = function()&#123;   </div><div class=\"line\">    alert(this.name);   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    /**定义一个Cat类*/  </div><div class=\"line\">    function Cat()&#123;   </div><div class=\"line\">    this.name = \"Cat\";   </div><div class=\"line\">    &#125;   </div><div class=\"line\">  </div><div class=\"line\">    /**创建两个类对象*/  </div><div class=\"line\">    var animal = new Animal();   </div><div class=\"line\">    var cat = new Cat();   </div><div class=\"line\">  </div><div class=\"line\">    //通过call或apply方法，将原本属于Animal对象的showName()方法交给当前对象cat来使用了。   </div><div class=\"line\">    //输入结果为\"Cat\"   </div><div class=\"line\">    animal.showName.call(cat,\",\");   </div><div class=\"line\">    //animal.showName.apply(cat,[]);   </div><div class=\"line\">      </div><div class=\"line\">    </div><div class=\"line\">// --&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>"},{"title":"HexoHelper","date":"2017-01-10T06:37:46.000Z","_content":"\n#hexo分支提交\ngit add --all\ngit commit -m \"...\"\ngit push origin hexo提交网站相关的文件；\n多秘钥管理问题eval $(ssh-agent)，然后输入ssh-add ~/.ssh/id_rsa_songmaozh；\n\n#master提交\n执行hexo g -d生成网站并部署到GitHub上。\n","source":"_posts/HexoHelper.md","raw":"---\ntitle: HexoHelper\ndate: 2017-01-10 14:37:46\ntags:\n---\n\n#hexo分支提交\ngit add --all\ngit commit -m \"...\"\ngit push origin hexo提交网站相关的文件；\n多秘钥管理问题eval $(ssh-agent)，然后输入ssh-add ~/.ssh/id_rsa_songmaozh；\n\n#master提交\n执行hexo g -d生成网站并部署到GitHub上。\n","slug":"HexoHelper","published":1,"updated":"2017-01-10T06:38:37.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixr64ido0001z8jo74yekq6j","content":"<p>#hexo分支提交<br>git add –all<br>git commit -m “…”<br>git push origin hexo提交网站相关的文件；<br>多秘钥管理问题eval $(ssh-agent)，然后输入ssh-add ~/.ssh/id_rsa_songmaozh；</p>\n<p>#master提交<br>执行hexo g -d生成网站并部署到GitHub上。</p>\n","excerpt":"","more":"<p>#hexo分支提交<br>git add –all<br>git commit -m “…”<br>git push origin hexo提交网站相关的文件；<br>多秘钥管理问题eval $(ssh-agent)，然后输入ssh-add ~/.ssh/id_rsa_songmaozh；</p>\n<p>#master提交<br>执行hexo g -d生成网站并部署到GitHub上。</p>\n"},{"title":"SpringBoot Help","date":"2017-01-10T06:39:17.000Z","_content":"# Spring Boot MVC\n## 使用Spring Boot\n你可以像使用标准的Java库文件一样使用Spring Boot。简单的将需要的 spring-boot-*.jar 添加到classpath即可。\n Spring Boot不要求任何特殊的工具集成，所以可以使用任何IDE，甚至文本编辑器。\n \n只是，仍然建议使用build工具：Maven 或 Gradle。\n \n    Spring Boot依赖 使用 org.springframework.boot groupId 。\n    通常，让你的Maven POM文件继承 spring-boot-starter-parent，并声明一个或多个 Starter POMs依赖即可。Spring Boot也提供了一个可选的 Maven Plugin来创建可执行的jars。 \n```python\n    <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.4.3.RELEASE</version>\n</parent>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n## 环境准备\n\n一个称手的文本编辑器（例如Vim、Emacs、Sublime Text）或者IDE（Eclipse、Idea Intellij）\nJava环境（JDK 1.7或以上版本）\nMaven 3.0+（Eclipse和Idea IntelliJ内置，如果使用IDE并且不使用命令行工具可以不安装）\n一个最简单的Web应用\n\n## pom配置依赖\n使用Spring Boot框架可以大大加速Web应用的开发过程，首先在Maven项目依赖中引入spring-boot-starter-web：\n\npom.xml\n\n```python\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>org.springframework</groupId>\n    <artifactId>gs-maven</artifactId>\n    <packaging>jar</packaging>\n    <version>0.1.0</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.4.3.RELEASE</version>\n    </parent>\n    <dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-devtools</artifactId>\n        <optional>true</optional>\n    </dependency>\n\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>2.7.0</version>\n        </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-annotations</artifactId>\n        <version>2.7.0</version>\n    </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <fork>true</fork>\n                </configuration>\n            </plugin>\n        </plugins>\n \n    </build>\n\n\n</project>\n```\n\n\n## Controller 含main方法\nSampleController.java\n```python\npackage hello;\n\nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.ui.Model;\nimport org.springframework.context.annotation.ComponentScan;\n\n@RestController\n@Controller\n@ComponentScan\n@EnableAutoConfiguration\n\n\n// @Configuration  \n// @ComponentScan  \npublic class SampleController {\n\n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        return \"Hello World222!\";\n    }\n\n    @RequestMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n\n    @RequestMapping(\"/index\")\n    public String index(Model model){\n \n        model.addAttribute(\"name\",\"Ryan\");\n \n        return \"index\";\n    }\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(SampleController.class, args);\n    }\n\n}\n```\n\n## Controller 不含main 的rest风格\nHelloController.java\n\n```python\npackage hello;\n \nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.ui.Model; \nimport java.util.HashMap;\nimport java.util.Map;\n \n/**\n * Created by miaorf on 2016/6/19.\n */\n@Controller\n@RestController\n@RequestMapping(\"/hello\")\npublic class HelloController {\n \n    @RequestMapping(\"/index\")\n    public String index(Model model){\n \n        model.addAttribute(\"name\",\"Ryan\");\n \n        return \"index\";\n    }\n \n \n    @RequestMapping(\"/json\")\n    @ResponseBody\n    public Map<String,Object> json(){\n        Map<String,Object> map = new HashMap<String,Object>();\n        map.put(\"name\",\"Ryan\");\n        map.put(\"age\",\"18\");\n        map.put(\"sex\",\"man\");\n        return map;\n    }\n}\n```\n\n\n## 运行应用：mvn spring-boot:run或在IDE中运行main()方法，在浏览器中访问http://localhost:8080\n\n## 简单分析\n我们从程序的入口SpringApplication.run(Application.class, args);开始分析：\n\n* SpringApplication是Spring Boot框架中描述Spring应用的类，它的run()方法会创建一个Spring应用上下文（Application Context）。另一方面它会扫描当前应用类路径上的依赖，例如本例中发现spring-webmvc（由 spring-boot-starter-web传递引入）在类路径中，那么Spring Boot会判断这是一个Web应用，并启动一个内嵌的Servlet容器（默认是Tomcat）用于处理HTTP请求。\n\n* Spring WebMvc框架会将Servlet容器里收到的HTTP请求根据路径分发给对应的@Controller类进行处理，@RestController是一类特殊的@Controller，它的返回值直接作为HTTP Response的Body部分返回给浏览器。\n\n* @RequestMapping注解表明该方法处理那些URL对应的HTTP请求，也就是我们常说的URL路由（routing)，请求的分发工作是有Spring完成的。例如上面的代码中http://localhost:8080/ 根路径就被路由至greeting()方法进行处理。如果访问http://localhost:8080/hello ，则会出现404 Not Found错误，因为我们并没有编写任何方法来处理/hello请求。\n\n* 例如HelloController中，method方法匹配的URL是/classPath/methodPath\"。\n\n 提示\n\n可以定义多个@Controller将不同URL的处理方法分散在不同的类中","source":"_posts/SpringBoot-Help.md","raw":"---\ntitle: SpringBoot Help\ndate: 2017-01-10 14:39:17\ntags:\n---\n# Spring Boot MVC\n## 使用Spring Boot\n你可以像使用标准的Java库文件一样使用Spring Boot。简单的将需要的 spring-boot-*.jar 添加到classpath即可。\n Spring Boot不要求任何特殊的工具集成，所以可以使用任何IDE，甚至文本编辑器。\n \n只是，仍然建议使用build工具：Maven 或 Gradle。\n \n    Spring Boot依赖 使用 org.springframework.boot groupId 。\n    通常，让你的Maven POM文件继承 spring-boot-starter-parent，并声明一个或多个 Starter POMs依赖即可。Spring Boot也提供了一个可选的 Maven Plugin来创建可执行的jars。 \n```python\n    <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.4.3.RELEASE</version>\n</parent>\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n</dependencies>\n```\n\n## 环境准备\n\n一个称手的文本编辑器（例如Vim、Emacs、Sublime Text）或者IDE（Eclipse、Idea Intellij）\nJava环境（JDK 1.7或以上版本）\nMaven 3.0+（Eclipse和Idea IntelliJ内置，如果使用IDE并且不使用命令行工具可以不安装）\n一个最简单的Web应用\n\n## pom配置依赖\n使用Spring Boot框架可以大大加速Web应用的开发过程，首先在Maven项目依赖中引入spring-boot-starter-web：\n\npom.xml\n\n```python\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>org.springframework</groupId>\n    <artifactId>gs-maven</artifactId>\n    <packaging>jar</packaging>\n    <version>0.1.0</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.4.3.RELEASE</version>\n    </parent>\n    <dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-devtools</artifactId>\n        <optional>true</optional>\n    </dependency>\n\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>2.7.0</version>\n        </dependency>\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-annotations</artifactId>\n        <version>2.7.0</version>\n    </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <fork>true</fork>\n                </configuration>\n            </plugin>\n        </plugins>\n \n    </build>\n\n\n</project>\n```\n\n\n## Controller 含main方法\nSampleController.java\n```python\npackage hello;\n\nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.ui.Model;\nimport org.springframework.context.annotation.ComponentScan;\n\n@RestController\n@Controller\n@ComponentScan\n@EnableAutoConfiguration\n\n\n// @Configuration  \n// @ComponentScan  \npublic class SampleController {\n\n    @RequestMapping(\"/\")\n    @ResponseBody\n    String home() {\n        return \"Hello World222!\";\n    }\n\n    @RequestMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n\n    @RequestMapping(\"/index\")\n    public String index(Model model){\n \n        model.addAttribute(\"name\",\"Ryan\");\n \n        return \"index\";\n    }\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(SampleController.class, args);\n    }\n\n}\n```\n\n## Controller 不含main 的rest风格\nHelloController.java\n\n```python\npackage hello;\n \nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.stereotype.*;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.ui.Model; \nimport java.util.HashMap;\nimport java.util.Map;\n \n/**\n * Created by miaorf on 2016/6/19.\n */\n@Controller\n@RestController\n@RequestMapping(\"/hello\")\npublic class HelloController {\n \n    @RequestMapping(\"/index\")\n    public String index(Model model){\n \n        model.addAttribute(\"name\",\"Ryan\");\n \n        return \"index\";\n    }\n \n \n    @RequestMapping(\"/json\")\n    @ResponseBody\n    public Map<String,Object> json(){\n        Map<String,Object> map = new HashMap<String,Object>();\n        map.put(\"name\",\"Ryan\");\n        map.put(\"age\",\"18\");\n        map.put(\"sex\",\"man\");\n        return map;\n    }\n}\n```\n\n\n## 运行应用：mvn spring-boot:run或在IDE中运行main()方法，在浏览器中访问http://localhost:8080\n\n## 简单分析\n我们从程序的入口SpringApplication.run(Application.class, args);开始分析：\n\n* SpringApplication是Spring Boot框架中描述Spring应用的类，它的run()方法会创建一个Spring应用上下文（Application Context）。另一方面它会扫描当前应用类路径上的依赖，例如本例中发现spring-webmvc（由 spring-boot-starter-web传递引入）在类路径中，那么Spring Boot会判断这是一个Web应用，并启动一个内嵌的Servlet容器（默认是Tomcat）用于处理HTTP请求。\n\n* Spring WebMvc框架会将Servlet容器里收到的HTTP请求根据路径分发给对应的@Controller类进行处理，@RestController是一类特殊的@Controller，它的返回值直接作为HTTP Response的Body部分返回给浏览器。\n\n* @RequestMapping注解表明该方法处理那些URL对应的HTTP请求，也就是我们常说的URL路由（routing)，请求的分发工作是有Spring完成的。例如上面的代码中http://localhost:8080/ 根路径就被路由至greeting()方法进行处理。如果访问http://localhost:8080/hello ，则会出现404 Not Found错误，因为我们并没有编写任何方法来处理/hello请求。\n\n* 例如HelloController中，method方法匹配的URL是/classPath/methodPath\"。\n\n 提示\n\n可以定义多个@Controller将不同URL的处理方法分散在不同的类中","slug":"SpringBoot-Help","published":1,"updated":"2017-01-10T06:59:51.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixr64idq0002z8jom7187xs4","content":"<h1 id=\"Spring-Boot-MVC\"><a href=\"#Spring-Boot-MVC\" class=\"headerlink\" title=\"Spring Boot MVC\"></a>Spring Boot MVC</h1><h2 id=\"使用Spring-Boot\"><a href=\"#使用Spring-Boot\" class=\"headerlink\" title=\"使用Spring Boot\"></a>使用Spring Boot</h2><p>你可以像使用标准的Java库文件一样使用Spring Boot。简单的将需要的 spring-boot-*.jar 添加到classpath即可。<br> Spring Boot不要求任何特殊的工具集成，所以可以使用任何IDE，甚至文本编辑器。</p>\n<p>只是，仍然建议使用build工具：Maven 或 Gradle。</p>\n<pre><code>Spring Boot依赖 使用 org.springframework.boot groupId 。\n通常，让你的Maven POM文件继承 spring-boot-starter-parent，并声明一个或多个 Starter POMs依赖即可。Spring Boot也提供了一个可选的 Maven Plugin来创建可执行的jars。 \n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;parent&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.4.3.RELEASE&lt;/version&gt;</div><div class=\"line\">&lt;/parent&gt;</div><div class=\"line\">&lt;dependencies&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>一个称手的文本编辑器（例如Vim、Emacs、Sublime Text）或者IDE（Eclipse、Idea Intellij）<br>Java环境（JDK 1.7或以上版本）<br>Maven 3.0+（Eclipse和Idea IntelliJ内置，如果使用IDE并且不使用命令行工具可以不安装）<br>一个最简单的Web应用</p>\n<h2 id=\"pom配置依赖\"><a href=\"#pom配置依赖\" class=\"headerlink\" title=\"pom配置依赖\"></a>pom配置依赖</h2><p>使用Spring Boot框架可以大大加速Web应用的开发过程，首先在Maven项目依赖中引入spring-boot-starter-web：</p>\n<p>pom.xml</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\">    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;gs-maven&lt;/artifactId&gt;</div><div class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class=\"line\">    &lt;version&gt;0.1.0&lt;/version&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;parent&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;1.4.3.RELEASE&lt;/version&gt;</div><div class=\"line\">    &lt;/parent&gt;</div><div class=\"line\">    &lt;dependencies&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</div><div class=\"line\">        &lt;optional&gt;true&lt;/optional&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;2.7.0&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;2.7.0&lt;/version&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">    &lt;/dependencies&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;build&gt;</div><div class=\"line\">        &lt;plugins&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;fork&gt;true&lt;/fork&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;/build&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Controller-含main方法\"><a href=\"#Controller-含main方法\" class=\"headerlink\" title=\"Controller 含main方法\"></a>Controller 含main方法</h2><p>SampleController.java<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">package hello;</div><div class=\"line\"></div><div class=\"line\">import org.springframework.boot.*;</div><div class=\"line\">import org.springframework.boot.autoconfigure.*;</div><div class=\"line\">import org.springframework.stereotype.*;</div><div class=\"line\">import org.springframework.web.bind.annotation.*;</div><div class=\"line\">import org.springframework.ui.Model;</div><div class=\"line\">import org.springframework.context.annotation.ComponentScan;</div><div class=\"line\"></div><div class=\"line\">@RestController</div><div class=\"line\">@Controller</div><div class=\"line\">@ComponentScan</div><div class=\"line\">@EnableAutoConfiguration</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// @Configuration  </div><div class=\"line\">// @ComponentScan  </div><div class=\"line\">public class SampleController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/\")</div><div class=\"line\">    @ResponseBody</div><div class=\"line\">    String home() &#123;</div><div class=\"line\">        return \"Hello World222!\";</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/hello\")</div><div class=\"line\">    public String hello() &#123;</div><div class=\"line\">        return \"Hello World!\";</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/index\")</div><div class=\"line\">    public String index(Model model)&#123;</div><div class=\"line\"> </div><div class=\"line\">        model.addAttribute(\"name\",\"Ryan\");</div><div class=\"line\"> </div><div class=\"line\">        return \"index\";</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        SpringApplication.run(SampleController.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Controller-不含main-的rest风格\"><a href=\"#Controller-不含main-的rest风格\" class=\"headerlink\" title=\"Controller 不含main 的rest风格\"></a>Controller 不含main 的rest风格</h2><p>HelloController.java</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">package hello;</div><div class=\"line\"> </div><div class=\"line\">import org.springframework.boot.*;</div><div class=\"line\">import org.springframework.boot.autoconfigure.*;</div><div class=\"line\">import org.springframework.stereotype.*;</div><div class=\"line\">import org.springframework.web.bind.annotation.*;</div><div class=\"line\">import org.springframework.ui.Model; </div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\">import java.util.Map;</div><div class=\"line\"> </div><div class=\"line\">/**</div><div class=\"line\"> * Created by miaorf on 2016/6/19.</div><div class=\"line\"> */</div><div class=\"line\">@Controller</div><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(\"/hello\")</div><div class=\"line\">public class HelloController &#123;</div><div class=\"line\"> </div><div class=\"line\">    @RequestMapping(\"/index\")</div><div class=\"line\">    public String index(Model model)&#123;</div><div class=\"line\"> </div><div class=\"line\">        model.addAttribute(\"name\",\"Ryan\");</div><div class=\"line\"> </div><div class=\"line\">        return \"index\";</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    @RequestMapping(\"/json\")</div><div class=\"line\">    @ResponseBody</div><div class=\"line\">    public Map&lt;String,Object&gt; json()&#123;</div><div class=\"line\">        Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;();</div><div class=\"line\">        map.put(\"name\",\"Ryan\");</div><div class=\"line\">        map.put(\"age\",\"18\");</div><div class=\"line\">        map.put(\"sex\",\"man\");</div><div class=\"line\">        return map;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"运行应用：mvn-spring-boot-run或在IDE中运行main-方法，在浏览器中访问http-localhost-8080\"><a href=\"#运行应用：mvn-spring-boot-run或在IDE中运行main-方法，在浏览器中访问http-localhost-8080\" class=\"headerlink\" title=\"运行应用：mvn spring-boot:run或在IDE中运行main()方法，在浏览器中访问http://localhost:8080\"></a>运行应用：mvn spring-boot:run或在IDE中运行main()方法，在浏览器中访问<a href=\"http://localhost:8080\" target=\"_blank\" rel=\"external\">http://localhost:8080</a></h2><h2 id=\"简单分析\"><a href=\"#简单分析\" class=\"headerlink\" title=\"简单分析\"></a>简单分析</h2><p>我们从程序的入口SpringApplication.run(Application.class, args);开始分析：</p>\n<ul>\n<li><p>SpringApplication是Spring Boot框架中描述Spring应用的类，它的run()方法会创建一个Spring应用上下文（Application Context）。另一方面它会扫描当前应用类路径上的依赖，例如本例中发现spring-webmvc（由 spring-boot-starter-web传递引入）在类路径中，那么Spring Boot会判断这是一个Web应用，并启动一个内嵌的Servlet容器（默认是Tomcat）用于处理HTTP请求。</p>\n</li>\n<li><p>Spring WebMvc框架会将Servlet容器里收到的HTTP请求根据路径分发给对应的@Controller类进行处理，@RestController是一类特殊的@Controller，它的返回值直接作为HTTP Response的Body部分返回给浏览器。</p>\n</li>\n<li><p>@RequestMapping注解表明该方法处理那些URL对应的HTTP请求，也就是我们常说的URL路由（routing)，请求的分发工作是有Spring完成的。例如上面的代码中<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"external\">http://localhost:8080/</a> 根路径就被路由至greeting()方法进行处理。如果访问<a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"external\">http://localhost:8080/hello</a> ，则会出现404 Not Found错误，因为我们并没有编写任何方法来处理/hello请求。</p>\n</li>\n<li><p>例如HelloController中，method方法匹配的URL是/classPath/methodPath”。</p>\n<p>提示</p>\n</li>\n</ul>\n<p>可以定义多个@Controller将不同URL的处理方法分散在不同的类中</p>\n","excerpt":"","more":"<h1 id=\"Spring-Boot-MVC\"><a href=\"#Spring-Boot-MVC\" class=\"headerlink\" title=\"Spring Boot MVC\"></a>Spring Boot MVC</h1><h2 id=\"使用Spring-Boot\"><a href=\"#使用Spring-Boot\" class=\"headerlink\" title=\"使用Spring Boot\"></a>使用Spring Boot</h2><p>你可以像使用标准的Java库文件一样使用Spring Boot。简单的将需要的 spring-boot-*.jar 添加到classpath即可。<br> Spring Boot不要求任何特殊的工具集成，所以可以使用任何IDE，甚至文本编辑器。</p>\n<p>只是，仍然建议使用build工具：Maven 或 Gradle。</p>\n<pre><code>Spring Boot依赖 使用 org.springframework.boot groupId 。\n通常，让你的Maven POM文件继承 spring-boot-starter-parent，并声明一个或多个 Starter POMs依赖即可。Spring Boot也提供了一个可选的 Maven Plugin来创建可执行的jars。 \n</code></pre><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;parent&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.4.3.RELEASE&lt;/version&gt;</div><div class=\"line\">&lt;/parent&gt;</div><div class=\"line\">&lt;dependencies&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>一个称手的文本编辑器（例如Vim、Emacs、Sublime Text）或者IDE（Eclipse、Idea Intellij）<br>Java环境（JDK 1.7或以上版本）<br>Maven 3.0+（Eclipse和Idea IntelliJ内置，如果使用IDE并且不使用命令行工具可以不安装）<br>一个最简单的Web应用</p>\n<h2 id=\"pom配置依赖\"><a href=\"#pom配置依赖\" class=\"headerlink\" title=\"pom配置依赖\"></a>pom配置依赖</h2><p>使用Spring Boot框架可以大大加速Web应用的开发过程，首先在Maven项目依赖中引入spring-boot-starter-web：</p>\n<p>pom.xml</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\">&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"</div><div class=\"line\">    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;gs-maven&lt;/artifactId&gt;</div><div class=\"line\">    &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class=\"line\">    &lt;version&gt;0.1.0&lt;/version&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;parent&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;1.4.3.RELEASE&lt;/version&gt;</div><div class=\"line\">    &lt;/parent&gt;</div><div class=\"line\">    &lt;dependencies&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</div><div class=\"line\">        &lt;optional&gt;true&lt;/optional&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;2.7.0&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\">    &lt;dependency&gt;</div><div class=\"line\">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class=\"line\">        &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;</div><div class=\"line\">        &lt;version&gt;2.7.0&lt;/version&gt;</div><div class=\"line\">    &lt;/dependency&gt;</div><div class=\"line\">    &lt;/dependencies&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;build&gt;</div><div class=\"line\">        &lt;plugins&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;fork&gt;true&lt;/fork&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;/build&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Controller-含main方法\"><a href=\"#Controller-含main方法\" class=\"headerlink\" title=\"Controller 含main方法\"></a>Controller 含main方法</h2><p>SampleController.java<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">package hello;</div><div class=\"line\"></div><div class=\"line\">import org.springframework.boot.*;</div><div class=\"line\">import org.springframework.boot.autoconfigure.*;</div><div class=\"line\">import org.springframework.stereotype.*;</div><div class=\"line\">import org.springframework.web.bind.annotation.*;</div><div class=\"line\">import org.springframework.ui.Model;</div><div class=\"line\">import org.springframework.context.annotation.ComponentScan;</div><div class=\"line\"></div><div class=\"line\">@RestController</div><div class=\"line\">@Controller</div><div class=\"line\">@ComponentScan</div><div class=\"line\">@EnableAutoConfiguration</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// @Configuration  </div><div class=\"line\">// @ComponentScan  </div><div class=\"line\">public class SampleController &#123;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/\")</div><div class=\"line\">    @ResponseBody</div><div class=\"line\">    String home() &#123;</div><div class=\"line\">        return \"Hello World222!\";</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/hello\")</div><div class=\"line\">    public String hello() &#123;</div><div class=\"line\">        return \"Hello World!\";</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @RequestMapping(\"/index\")</div><div class=\"line\">    public String index(Model model)&#123;</div><div class=\"line\"> </div><div class=\"line\">        model.addAttribute(\"name\",\"Ryan\");</div><div class=\"line\"> </div><div class=\"line\">        return \"index\";</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        SpringApplication.run(SampleController.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Controller-不含main-的rest风格\"><a href=\"#Controller-不含main-的rest风格\" class=\"headerlink\" title=\"Controller 不含main 的rest风格\"></a>Controller 不含main 的rest风格</h2><p>HelloController.java</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">package hello;</div><div class=\"line\"> </div><div class=\"line\">import org.springframework.boot.*;</div><div class=\"line\">import org.springframework.boot.autoconfigure.*;</div><div class=\"line\">import org.springframework.stereotype.*;</div><div class=\"line\">import org.springframework.web.bind.annotation.*;</div><div class=\"line\">import org.springframework.ui.Model; </div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\">import java.util.Map;</div><div class=\"line\"> </div><div class=\"line\">/**</div><div class=\"line\"> * Created by miaorf on 2016/6/19.</div><div class=\"line\"> */</div><div class=\"line\">@Controller</div><div class=\"line\">@RestController</div><div class=\"line\">@RequestMapping(\"/hello\")</div><div class=\"line\">public class HelloController &#123;</div><div class=\"line\"> </div><div class=\"line\">    @RequestMapping(\"/index\")</div><div class=\"line\">    public String index(Model model)&#123;</div><div class=\"line\"> </div><div class=\"line\">        model.addAttribute(\"name\",\"Ryan\");</div><div class=\"line\"> </div><div class=\"line\">        return \"index\";</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    @RequestMapping(\"/json\")</div><div class=\"line\">    @ResponseBody</div><div class=\"line\">    public Map&lt;String,Object&gt; json()&#123;</div><div class=\"line\">        Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;();</div><div class=\"line\">        map.put(\"name\",\"Ryan\");</div><div class=\"line\">        map.put(\"age\",\"18\");</div><div class=\"line\">        map.put(\"sex\",\"man\");</div><div class=\"line\">        return map;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"运行应用：mvn-spring-boot-run或在IDE中运行main-方法，在浏览器中访问http-localhost-8080\"><a href=\"#运行应用：mvn-spring-boot-run或在IDE中运行main-方法，在浏览器中访问http-localhost-8080\" class=\"headerlink\" title=\"运行应用：mvn spring-boot:run或在IDE中运行main()方法，在浏览器中访问http://localhost:8080\"></a>运行应用：mvn spring-boot:run或在IDE中运行main()方法，在浏览器中访问<a href=\"http://localhost:8080\">http://localhost:8080</a></h2><h2 id=\"简单分析\"><a href=\"#简单分析\" class=\"headerlink\" title=\"简单分析\"></a>简单分析</h2><p>我们从程序的入口SpringApplication.run(Application.class, args);开始分析：</p>\n<ul>\n<li><p>SpringApplication是Spring Boot框架中描述Spring应用的类，它的run()方法会创建一个Spring应用上下文（Application Context）。另一方面它会扫描当前应用类路径上的依赖，例如本例中发现spring-webmvc（由 spring-boot-starter-web传递引入）在类路径中，那么Spring Boot会判断这是一个Web应用，并启动一个内嵌的Servlet容器（默认是Tomcat）用于处理HTTP请求。</p>\n</li>\n<li><p>Spring WebMvc框架会将Servlet容器里收到的HTTP请求根据路径分发给对应的@Controller类进行处理，@RestController是一类特殊的@Controller，它的返回值直接作为HTTP Response的Body部分返回给浏览器。</p>\n</li>\n<li><p>@RequestMapping注解表明该方法处理那些URL对应的HTTP请求，也就是我们常说的URL路由（routing)，请求的分发工作是有Spring完成的。例如上面的代码中<a href=\"http://localhost:8080/\">http://localhost:8080/</a> 根路径就被路由至greeting()方法进行处理。如果访问<a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a> ，则会出现404 Not Found错误，因为我们并没有编写任何方法来处理/hello请求。</p>\n</li>\n<li><p>例如HelloController中，method方法匹配的URL是/classPath/methodPath”。</p>\n<p>提示</p>\n</li>\n</ul>\n<p>可以定义多个@Controller将不同URL的处理方法分散在不同的类中</p>\n"},{"title":"Namespace","date":"2016-12-14T06:00:00.000Z","_content":"\n# Jquery插件的开发包括两种：\n\n一种是类级别的插件开发，即给jQuery添加新的全局函数，相当于给jQuery类本身添加方法。jQuery的全局函数就是属于jQuery命名空间的函数，另一种是对象级别的插件开发，即给jQuery对象添加方法。下面就两种函数的开发做详细的说明。\n\n## 1、类级别的插件开发\n\n类级别的插件开发最直接的理解就是给jQuery类添加类方法，可以理解为添加静态方法。典型的例子就是$.AJAX()这个函数，将函数定义于jQuery的命名空间中。关于类级别的插件开发可以采用如下几种形式进行扩展：\n\n### 1.1 添加一个新的全局函数\n\n添加一个全局函数，我们只需如下定义：\n\n\nJava代码\n```python\njQuery.foo = function() {    \nalert('This is a test. This is only a test.');   \n};    \n```\n### 1.2 增加多个全局函数\n\n添加多个全局函数，可采用如下定义：\n\nJava代码\n```python\njQuery.foo = function() {    \nalert('This is a test. This is only a test.');   \n};   \njQuery.bar = function(param) {    \nalert('This function takes a parameter, which is \"' + param + '\".');   \n};    \n```\n调用时和一个函数的一样的:jQuery.foo();jQuery.bar();或者$.foo();$.bar('bar');  \n### 1.3 使用jQuery.extend(object);　\n\nJava代码 \n```python\njQuery.extend({       \nfoo: function() {       \nalert('This is a test. This is only a test.');       \n},       \nbar: function(param) {       \nalert('This function takes a parameter, which is \"' + param +'\".');       \n}      \n});  \n```\n\n### 1.4 使用命名空间\n\n虽然在jQuery命名空间中，我们禁止使用了大量的javaScript函数名和变量名。但是仍然不可避免某些函数或变量名将于其他jQuery插件冲突，因此我们习惯将一些方法封装到另一个自定义的命名空间。\n\nJava代码\n```python\njQuery.myPlugin = {           \nfoo:function() {           \nalert('This is a test. This is only a test.');           \n},           \nbar:function(param) {           \nalert('This function takes a parameter, which is \"' + param + '\".');     \n}          \n};  \n```\n采用命名空间的函数仍然是全局函数，调用时采用的方法：   \n$.myPlugin.foo();          \n$.myPlugin.bar('baz');  \n \n\n通过这个技巧（使用独立的插件名），我们可以避免命名空间内函数的冲突。\n\n## 2、对象级别的插件开发\n\n对象级别的插件开发需要如下的两种形式：、\n\n形式1：  \n\nJava代码\n```python\n(function($){      \n$.fn.extend({      \npluginName:function(opt,callback){      \n /*Our plugin implementation code goes here.  */      \n}      \n})      \n})(jQuery);   \n```\n形式2：\n \n\nJava代码\n```python\n(function($) {        \n$.fn.pluginName = function() {      \n/* Our plugin implementation code goes here. \n};      \n})(jQuery);   \n```\n上面定义了一个jQuery函数,形参是$，函数定义完成之后,把jQuery这个实参传递进去.立即调用执行。这样的好处是,我们在写jQuery插件时,也可以使用$这个别名,而不会与prototype引起冲突.\n### 2.1 在JQuery名称空间下申明一个名字\n\n这是一个单一插件的脚本。如果你的脚本中包含多个插件，或者互逆的插件（例如： $.fn.doSomething() 和 $.fn.undoSomething()），那么你需要声明多个函数名字。但是，通常当我们编写一个插件时，力求仅使用一个名字来包含它的所有内容。我们的示例插件命名为“highlight“    \n\n \n\nJava代码\n```python\n$.fn.hilight = function() {     \n  // Our plugin implementation code goes here.     \n};     \n```\n我们的插件通过这样被调用：   \n$('#myDiv').hilight();     \n \n\n但是如果我们需要分解我们的实现代码为多个函数该怎么办？有很多原因：设计上的需要；这样做更容易或更易读的实现；而且这样更符合面向对象。 这真是一个麻烦事，把功能实现分解成多个函数而不增加多余的命名空间。出于认识到和利用函数是javascript中最基本的类对象，我们可以这样做。就像其他对象一样，函数可以被指定为属性。因此我们已经声明“hilight”为jQuery的属性对象，任何其他的属性或者函数我们需要暴露出来的，都可以在\"hilight\" 函数中被声明属性。稍后继续。\n### 2.2 接受options参数以控制插件的行为\n\n让我们为我们的插件添加功能指定前景色和背景色的功能。我们也许会让选项像一个options对象传递给插件函数。例如：   \n\nJava代码\n```python\n// plugin definition     \n$.fn.hilight = function(options) {     \n  var defaults = {     \n    foreground: 'red',     \n    background: 'yellow'     \n  };     \n  // Extend our default options with those provided.     \n  var opts = $.extend(defaults, options);     \n  // Our plugin implementation code goes here.     \n};    \n```\n我们的插件可以这样被调用：  \n```python\n$('#myDiv').hilight({     \n  foreground: 'blue'     \n});     \n```\n\n### 2.3 暴露插件的默认设置\n\n我们应该对上面代码的一种改进是暴露插件的默认设置。这对于让插件的使用者更容易用较少的代码覆盖和修改插件。接下来我们开始利用函数对象。     \n \n\nJava代码\n```python\n// plugin definition     \n$.fn.hilight = function(options) {     \n  // Extend our default options with those provided.     \n  // Note that the first arg to extend is an empty object -     \n  // this is to keep from overriding our \"defaults\" object.     \n  var opts = $.extend({}, $.fn.hilight.defaults, options);     \n  // Our plugin implementation code goes here.     \n};     \n// plugin defaults - added as a property on our plugin function     \n$.fn.hilight.defaults = {     \n  foreground: 'red',     \n  background: 'yellow'     \n};  \n```\n现在使用者可以包含像这样的一行在他们的脚本里：   \n//这个只需要调用一次，且不一定要在ready块中调用   \n$.fn.hilight.defaults.foreground = 'blue';     \n接下来我们可以像这样使用插件的方法，结果它设置蓝色的前景色：   \n$('#myDiv').hilight();   \n \n\n如你所见，我们允许使用者写一行代码在插件的默认前景色。而且使用者仍然在需要的时候可以有选择的覆盖这些新的默认值：\n```python\n// 覆盖插件缺省的背景颜色 \n\n$.fn.hilight.defaults.foreground = 'blue'; \n\n// ... \n\n// 使用一个新的缺省设置调用插件 \n\n$('.hilightDiv').hilight(); \n\n// ... \n\n// 通过传递配置参数给插件方法来覆盖缺省设置 \n\n$('#green').hilight({ \n\n foreground: 'green' \n\n});  \n```\n\n### 2.4 适当的暴露一些函数\n\n这段将会一步一步对前面那段代码通过有意思的方法扩展你的插件（同时让其他人扩展你的插件）。例如，我们插件的实现里面可以定义一个名叫\"format\"的函数来格式化高亮文本。我们的插件现在看起来像这样，默认的format方法的实现部分在hiligth函数下面。\n\nJava代码\n```python\n// plugin definition     \n$.fn.hilight = function(options) {     \n  // iterate and reformat each matched element     \n  return this.each(function() {     \n    var $this = $(this);     \n    // ...     \n    var markup = $this.html();     \n    // call our format function     \n    markup = $.fn.hilight.format(markup);     \n    $this.html(markup);     \n  });     \n};     \n// define our format function     \n$.fn.hilight.format = function(txt) {     \nreturn '<strong>' + txt + '</strong>';     \n};   \n```\n我们很容易的支持options对象中的其他的属性通过允许一个回调函数来覆盖默认的设置。这是另外一个出色的方法来修改你的插件。这里展示的技巧是进一步有效的暴露format函数进而让他能被重新定义。通过这技巧，是其他人能够传递他们自己设置来覆盖你的插件，换句话说，这样其他人也能够为你的插件写插件。 \n考虑到这个篇文章中我们建立的无用的插件，你也许想知道究竟什么时候这些会有用。一个真实的例子是Cycle插件.这个Cycle插件是一个滑动显示插件，他能支持许多内部变换作用到滚动，滑动，渐变消失等。但是实际上，没有办法定义也许会应用到滑动变化上每种类型的效果。那是这种扩展性有用的地方。 Cycle插件对使用者暴露\"transitions\"对象，使他们添加自己变换定义。插件中定义就像这样：\n$.fn.cycle.transitions = { \n\n// ... \n\n}; \n\n这个技巧使其他人能定义和传递变换设置到Cycle插件。\n\n### 2.5 保持私有函数的私有性\n\n这种技巧暴露你插件一部分来被覆盖是非常强大的。但是你需要仔细思考你实现中暴露的部分。一但被暴露，你需要在头脑中保持任何对于参数或者语义的改动也许会破坏向后的兼容性。一个通理是，如果你不能肯定是否暴露特定的函数，那么你也许不需要那样做。\n\n那么我们怎么定义更多的函数而不搅乱命名空间也不暴露实现呢？这就是闭包的功能。为了演示，我们将会添加另外一个“debug”函数到我们的插件中。这个 debug函数将为输出被选中的元素格式到firebug控制台。为了创建一个闭包，我们将包装整个插件定义在一个函数中。 \n\nJava代码\n```python\n (function($) {     \n  // plugin definition     \n  $.fn.hilight = function(options) {     \n    debug(this);     \n   // ...     \n  };     \n  // private function for debugging     \n  function debug($obj) {     \n    if (window.console && window.console.log)     \n    window.console.log('hilight selection count: ' + $obj.size());     \n  };     \n//  ...     \n})(jQuery);    \n```\n\n我们的“debug”方法不能从外部闭包进入,因此对于我们的实现是私有的。\n### 2.6 支持Metadata插件\n\n在你正在写的插件的基础上，添加对Metadata插件的支持能使他更强大。个人来说，我喜欢这个Metadata插件，因为它让你使用不多的\"markup”覆盖插件的选项（这非常有用当创建例子时）。而且支持它非常简单。更新：注释中有一点优化建议。\n\nJava代码\n```python\n$.fn.hilight = function(options) {     \n  // ...     \n  // build main options before element iteration     \n  var opts = $.extend({}, $.fn.hilight.defaults, options);     \n  return this.each(function() {     \n    var $this = $(this);     \n    // build element specific options     \n    var o = $.meta ? $.extend({}, opts, $this.data()) : opts;     \n    //...   \n```\n 这些变动行做了一些事情：它是测试Metadata插件是否被安装如果它被安装了，它能扩展我们的options对象通过抽取元数据这行作为最后一个参数添加到JQuery.extend，那么它将会覆盖任何其它选项设置。现在我们能从\"markup”处驱动行为,如果我们选择了“markup”：\n\n 调用的时候可以这样写： jQuery.foo(); 或 $.foo(); \n\n \n\nJava代码\n```python\n<!--  markup  -->     \n<div class=\"hilight { background: 'red', foreground: 'white' }\">     \n  Have a nice day!     \n</div>     \n<div class=\"hilight { foreground: 'orange' }\">     \n  Have a nice day!     \n</div>     \n<div class=\"hilight { background: 'green' }\">     \n  Have a nice day!     \n</div>     \n```\n现在我们能高亮哪些div仅使用一行脚本：   \n$('.hilight').hilight();     \n \n\n### 2.7 整合\n下面使我们的例子完成后的代码：\n\n    \n\nJava代码\n```python\n// 创建一个闭包     \n(function($) {     \n  // 插件的定义     \n  $.fn.hilight = function(options) {     \n    debug(this);     \n    // build main options before element iteration     \n    var opts = $.extend({}, $.fn.hilight.defaults, options);     \n    // iterate and reformat each matched element     \n    return this.each(function() {     \n    $this = $(this);     \n // build element specific options     \n var o = $.meta ? $.extend({}, opts, $this.data()) : opts;     \n // update element styles     \n$this.css({     \n   backgroundColor: o.background,     \n  color: o.foreground     \n  });     \n  var markup = $this.html();     \n   // call our format function     \n markup = $.fn.hilight.format(markup);     \n $this.html(markup);     \n    });     \n  };     \n  // 私有函数：debugging     \n  function debug($obj) {     \n    if (window.console && window.console.log)     \n      window.console.log('hilight selection count: ' + $obj.size());     \n  };     \n  // 定义暴露format函数     \n  $.fn.hilight.format = function(txt) {     \n    return '<strong>' + txt + '</strong>';     \n  };     \n  // 插件的defaults     \n  $.fn.hilight.defaults = {     \n    foreground: 'red',     \n    background: 'yellow'     \n  };     \n// 闭包结束     \n})(jQuery);     \n```\n\n这段设计已经让我创建了强大符合规范的插件。我希望它能让你也能做到。","source":"_posts/Namespace.md","raw":"---\ntitle: Namespace\ndate: 2016-12-14 14:00:00\ntags:\n---\n\n# Jquery插件的开发包括两种：\n\n一种是类级别的插件开发，即给jQuery添加新的全局函数，相当于给jQuery类本身添加方法。jQuery的全局函数就是属于jQuery命名空间的函数，另一种是对象级别的插件开发，即给jQuery对象添加方法。下面就两种函数的开发做详细的说明。\n\n## 1、类级别的插件开发\n\n类级别的插件开发最直接的理解就是给jQuery类添加类方法，可以理解为添加静态方法。典型的例子就是$.AJAX()这个函数，将函数定义于jQuery的命名空间中。关于类级别的插件开发可以采用如下几种形式进行扩展：\n\n### 1.1 添加一个新的全局函数\n\n添加一个全局函数，我们只需如下定义：\n\n\nJava代码\n```python\njQuery.foo = function() {    \nalert('This is a test. This is only a test.');   \n};    \n```\n### 1.2 增加多个全局函数\n\n添加多个全局函数，可采用如下定义：\n\nJava代码\n```python\njQuery.foo = function() {    \nalert('This is a test. This is only a test.');   \n};   \njQuery.bar = function(param) {    \nalert('This function takes a parameter, which is \"' + param + '\".');   \n};    \n```\n调用时和一个函数的一样的:jQuery.foo();jQuery.bar();或者$.foo();$.bar('bar');  \n### 1.3 使用jQuery.extend(object);　\n\nJava代码 \n```python\njQuery.extend({       \nfoo: function() {       \nalert('This is a test. This is only a test.');       \n},       \nbar: function(param) {       \nalert('This function takes a parameter, which is \"' + param +'\".');       \n}      \n});  \n```\n\n### 1.4 使用命名空间\n\n虽然在jQuery命名空间中，我们禁止使用了大量的javaScript函数名和变量名。但是仍然不可避免某些函数或变量名将于其他jQuery插件冲突，因此我们习惯将一些方法封装到另一个自定义的命名空间。\n\nJava代码\n```python\njQuery.myPlugin = {           \nfoo:function() {           \nalert('This is a test. This is only a test.');           \n},           \nbar:function(param) {           \nalert('This function takes a parameter, which is \"' + param + '\".');     \n}          \n};  \n```\n采用命名空间的函数仍然是全局函数，调用时采用的方法：   \n$.myPlugin.foo();          \n$.myPlugin.bar('baz');  \n \n\n通过这个技巧（使用独立的插件名），我们可以避免命名空间内函数的冲突。\n\n## 2、对象级别的插件开发\n\n对象级别的插件开发需要如下的两种形式：、\n\n形式1：  \n\nJava代码\n```python\n(function($){      \n$.fn.extend({      \npluginName:function(opt,callback){      \n /*Our plugin implementation code goes here.  */      \n}      \n})      \n})(jQuery);   \n```\n形式2：\n \n\nJava代码\n```python\n(function($) {        \n$.fn.pluginName = function() {      \n/* Our plugin implementation code goes here. \n};      \n})(jQuery);   \n```\n上面定义了一个jQuery函数,形参是$，函数定义完成之后,把jQuery这个实参传递进去.立即调用执行。这样的好处是,我们在写jQuery插件时,也可以使用$这个别名,而不会与prototype引起冲突.\n### 2.1 在JQuery名称空间下申明一个名字\n\n这是一个单一插件的脚本。如果你的脚本中包含多个插件，或者互逆的插件（例如： $.fn.doSomething() 和 $.fn.undoSomething()），那么你需要声明多个函数名字。但是，通常当我们编写一个插件时，力求仅使用一个名字来包含它的所有内容。我们的示例插件命名为“highlight“    \n\n \n\nJava代码\n```python\n$.fn.hilight = function() {     \n  // Our plugin implementation code goes here.     \n};     \n```\n我们的插件通过这样被调用：   \n$('#myDiv').hilight();     \n \n\n但是如果我们需要分解我们的实现代码为多个函数该怎么办？有很多原因：设计上的需要；这样做更容易或更易读的实现；而且这样更符合面向对象。 这真是一个麻烦事，把功能实现分解成多个函数而不增加多余的命名空间。出于认识到和利用函数是javascript中最基本的类对象，我们可以这样做。就像其他对象一样，函数可以被指定为属性。因此我们已经声明“hilight”为jQuery的属性对象，任何其他的属性或者函数我们需要暴露出来的，都可以在\"hilight\" 函数中被声明属性。稍后继续。\n### 2.2 接受options参数以控制插件的行为\n\n让我们为我们的插件添加功能指定前景色和背景色的功能。我们也许会让选项像一个options对象传递给插件函数。例如：   \n\nJava代码\n```python\n// plugin definition     \n$.fn.hilight = function(options) {     \n  var defaults = {     \n    foreground: 'red',     \n    background: 'yellow'     \n  };     \n  // Extend our default options with those provided.     \n  var opts = $.extend(defaults, options);     \n  // Our plugin implementation code goes here.     \n};    \n```\n我们的插件可以这样被调用：  \n```python\n$('#myDiv').hilight({     \n  foreground: 'blue'     \n});     \n```\n\n### 2.3 暴露插件的默认设置\n\n我们应该对上面代码的一种改进是暴露插件的默认设置。这对于让插件的使用者更容易用较少的代码覆盖和修改插件。接下来我们开始利用函数对象。     \n \n\nJava代码\n```python\n// plugin definition     \n$.fn.hilight = function(options) {     \n  // Extend our default options with those provided.     \n  // Note that the first arg to extend is an empty object -     \n  // this is to keep from overriding our \"defaults\" object.     \n  var opts = $.extend({}, $.fn.hilight.defaults, options);     \n  // Our plugin implementation code goes here.     \n};     \n// plugin defaults - added as a property on our plugin function     \n$.fn.hilight.defaults = {     \n  foreground: 'red',     \n  background: 'yellow'     \n};  \n```\n现在使用者可以包含像这样的一行在他们的脚本里：   \n//这个只需要调用一次，且不一定要在ready块中调用   \n$.fn.hilight.defaults.foreground = 'blue';     \n接下来我们可以像这样使用插件的方法，结果它设置蓝色的前景色：   \n$('#myDiv').hilight();   \n \n\n如你所见，我们允许使用者写一行代码在插件的默认前景色。而且使用者仍然在需要的时候可以有选择的覆盖这些新的默认值：\n```python\n// 覆盖插件缺省的背景颜色 \n\n$.fn.hilight.defaults.foreground = 'blue'; \n\n// ... \n\n// 使用一个新的缺省设置调用插件 \n\n$('.hilightDiv').hilight(); \n\n// ... \n\n// 通过传递配置参数给插件方法来覆盖缺省设置 \n\n$('#green').hilight({ \n\n foreground: 'green' \n\n});  \n```\n\n### 2.4 适当的暴露一些函数\n\n这段将会一步一步对前面那段代码通过有意思的方法扩展你的插件（同时让其他人扩展你的插件）。例如，我们插件的实现里面可以定义一个名叫\"format\"的函数来格式化高亮文本。我们的插件现在看起来像这样，默认的format方法的实现部分在hiligth函数下面。\n\nJava代码\n```python\n// plugin definition     \n$.fn.hilight = function(options) {     \n  // iterate and reformat each matched element     \n  return this.each(function() {     \n    var $this = $(this);     \n    // ...     \n    var markup = $this.html();     \n    // call our format function     \n    markup = $.fn.hilight.format(markup);     \n    $this.html(markup);     \n  });     \n};     \n// define our format function     \n$.fn.hilight.format = function(txt) {     \nreturn '<strong>' + txt + '</strong>';     \n};   \n```\n我们很容易的支持options对象中的其他的属性通过允许一个回调函数来覆盖默认的设置。这是另外一个出色的方法来修改你的插件。这里展示的技巧是进一步有效的暴露format函数进而让他能被重新定义。通过这技巧，是其他人能够传递他们自己设置来覆盖你的插件，换句话说，这样其他人也能够为你的插件写插件。 \n考虑到这个篇文章中我们建立的无用的插件，你也许想知道究竟什么时候这些会有用。一个真实的例子是Cycle插件.这个Cycle插件是一个滑动显示插件，他能支持许多内部变换作用到滚动，滑动，渐变消失等。但是实际上，没有办法定义也许会应用到滑动变化上每种类型的效果。那是这种扩展性有用的地方。 Cycle插件对使用者暴露\"transitions\"对象，使他们添加自己变换定义。插件中定义就像这样：\n$.fn.cycle.transitions = { \n\n// ... \n\n}; \n\n这个技巧使其他人能定义和传递变换设置到Cycle插件。\n\n### 2.5 保持私有函数的私有性\n\n这种技巧暴露你插件一部分来被覆盖是非常强大的。但是你需要仔细思考你实现中暴露的部分。一但被暴露，你需要在头脑中保持任何对于参数或者语义的改动也许会破坏向后的兼容性。一个通理是，如果你不能肯定是否暴露特定的函数，那么你也许不需要那样做。\n\n那么我们怎么定义更多的函数而不搅乱命名空间也不暴露实现呢？这就是闭包的功能。为了演示，我们将会添加另外一个“debug”函数到我们的插件中。这个 debug函数将为输出被选中的元素格式到firebug控制台。为了创建一个闭包，我们将包装整个插件定义在一个函数中。 \n\nJava代码\n```python\n (function($) {     \n  // plugin definition     \n  $.fn.hilight = function(options) {     \n    debug(this);     \n   // ...     \n  };     \n  // private function for debugging     \n  function debug($obj) {     \n    if (window.console && window.console.log)     \n    window.console.log('hilight selection count: ' + $obj.size());     \n  };     \n//  ...     \n})(jQuery);    \n```\n\n我们的“debug”方法不能从外部闭包进入,因此对于我们的实现是私有的。\n### 2.6 支持Metadata插件\n\n在你正在写的插件的基础上，添加对Metadata插件的支持能使他更强大。个人来说，我喜欢这个Metadata插件，因为它让你使用不多的\"markup”覆盖插件的选项（这非常有用当创建例子时）。而且支持它非常简单。更新：注释中有一点优化建议。\n\nJava代码\n```python\n$.fn.hilight = function(options) {     \n  // ...     \n  // build main options before element iteration     \n  var opts = $.extend({}, $.fn.hilight.defaults, options);     \n  return this.each(function() {     \n    var $this = $(this);     \n    // build element specific options     \n    var o = $.meta ? $.extend({}, opts, $this.data()) : opts;     \n    //...   \n```\n 这些变动行做了一些事情：它是测试Metadata插件是否被安装如果它被安装了，它能扩展我们的options对象通过抽取元数据这行作为最后一个参数添加到JQuery.extend，那么它将会覆盖任何其它选项设置。现在我们能从\"markup”处驱动行为,如果我们选择了“markup”：\n\n 调用的时候可以这样写： jQuery.foo(); 或 $.foo(); \n\n \n\nJava代码\n```python\n<!--  markup  -->     \n<div class=\"hilight { background: 'red', foreground: 'white' }\">     \n  Have a nice day!     \n</div>     \n<div class=\"hilight { foreground: 'orange' }\">     \n  Have a nice day!     \n</div>     \n<div class=\"hilight { background: 'green' }\">     \n  Have a nice day!     \n</div>     \n```\n现在我们能高亮哪些div仅使用一行脚本：   \n$('.hilight').hilight();     \n \n\n### 2.7 整合\n下面使我们的例子完成后的代码：\n\n    \n\nJava代码\n```python\n// 创建一个闭包     \n(function($) {     \n  // 插件的定义     \n  $.fn.hilight = function(options) {     \n    debug(this);     \n    // build main options before element iteration     \n    var opts = $.extend({}, $.fn.hilight.defaults, options);     \n    // iterate and reformat each matched element     \n    return this.each(function() {     \n    $this = $(this);     \n // build element specific options     \n var o = $.meta ? $.extend({}, opts, $this.data()) : opts;     \n // update element styles     \n$this.css({     \n   backgroundColor: o.background,     \n  color: o.foreground     \n  });     \n  var markup = $this.html();     \n   // call our format function     \n markup = $.fn.hilight.format(markup);     \n $this.html(markup);     \n    });     \n  };     \n  // 私有函数：debugging     \n  function debug($obj) {     \n    if (window.console && window.console.log)     \n      window.console.log('hilight selection count: ' + $obj.size());     \n  };     \n  // 定义暴露format函数     \n  $.fn.hilight.format = function(txt) {     \n    return '<strong>' + txt + '</strong>';     \n  };     \n  // 插件的defaults     \n  $.fn.hilight.defaults = {     \n    foreground: 'red',     \n    background: 'yellow'     \n  };     \n// 闭包结束     \n})(jQuery);     \n```\n\n这段设计已经让我创建了强大符合规范的插件。我希望它能让你也能做到。","slug":"Namespace","published":1,"updated":"2017-01-10T06:38:33.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixr64ids0003z8jojsyy433w","content":"<h1 id=\"Jquery插件的开发包括两种：\"><a href=\"#Jquery插件的开发包括两种：\" class=\"headerlink\" title=\"Jquery插件的开发包括两种：\"></a>Jquery插件的开发包括两种：</h1><p>一种是类级别的插件开发，即给jQuery添加新的全局函数，相当于给jQuery类本身添加方法。jQuery的全局函数就是属于jQuery命名空间的函数，另一种是对象级别的插件开发，即给jQuery对象添加方法。下面就两种函数的开发做详细的说明。</p>\n<h2 id=\"1、类级别的插件开发\"><a href=\"#1、类级别的插件开发\" class=\"headerlink\" title=\"1、类级别的插件开发\"></a>1、类级别的插件开发</h2><p>类级别的插件开发最直接的理解就是给jQuery类添加类方法，可以理解为添加静态方法。典型的例子就是$.AJAX()这个函数，将函数定义于jQuery的命名空间中。关于类级别的插件开发可以采用如下几种形式进行扩展：</p>\n<h3 id=\"1-1-添加一个新的全局函数\"><a href=\"#1-1-添加一个新的全局函数\" class=\"headerlink\" title=\"1.1 添加一个新的全局函数\"></a>1.1 添加一个新的全局函数</h3><p>添加一个全局函数，我们只需如下定义：</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.foo = function() &#123;    </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);   </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-2-增加多个全局函数\"><a href=\"#1-2-增加多个全局函数\" class=\"headerlink\" title=\"1.2 增加多个全局函数\"></a>1.2 增加多个全局函数</h3><p>添加多个全局函数，可采用如下定义：</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.foo = function() &#123;    </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);   </div><div class=\"line\">&#125;;   </div><div class=\"line\">jQuery.bar = function(param) &#123;    </div><div class=\"line\">alert(<span class=\"string\">'This function takes a parameter, which is \"'</span> + param + <span class=\"string\">'\".'</span>);   </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>调用时和一个函数的一样的:jQuery.foo();jQuery.bar();或者$.foo();$.bar(‘bar’);  </p>\n<h3 id=\"1-3-使用jQuery-extend-object\"><a href=\"#1-3-使用jQuery-extend-object\" class=\"headerlink\" title=\"1.3 使用jQuery.extend(object);　\"></a>1.3 使用jQuery.extend(object);　</h3><p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.extend(&#123;       </div><div class=\"line\">foo: function() &#123;       </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);       </div><div class=\"line\">&#125;,       </div><div class=\"line\">bar: function(param) &#123;       </div><div class=\"line\">alert(<span class=\"string\">'This function takes a parameter, which is \"'</span> + param +<span class=\"string\">'\".'</span>);       </div><div class=\"line\">&#125;      </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-4-使用命名空间\"><a href=\"#1-4-使用命名空间\" class=\"headerlink\" title=\"1.4 使用命名空间\"></a>1.4 使用命名空间</h3><p>虽然在jQuery命名空间中，我们禁止使用了大量的javaScript函数名和变量名。但是仍然不可避免某些函数或变量名将于其他jQuery插件冲突，因此我们习惯将一些方法封装到另一个自定义的命名空间。</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.myPlugin = &#123;           </div><div class=\"line\">foo:function() &#123;           </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);           </div><div class=\"line\">&#125;,           </div><div class=\"line\">bar:function(param) &#123;           </div><div class=\"line\">alert(<span class=\"string\">'This function takes a parameter, which is \"'</span> + param + <span class=\"string\">'\".'</span>);     </div><div class=\"line\">&#125;          </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>采用命名空间的函数仍然是全局函数，调用时采用的方法：<br>$.myPlugin.foo();<br>$.myPlugin.bar(‘baz’);  </p>\n<p>通过这个技巧（使用独立的插件名），我们可以避免命名空间内函数的冲突。</p>\n<h2 id=\"2、对象级别的插件开发\"><a href=\"#2、对象级别的插件开发\" class=\"headerlink\" title=\"2、对象级别的插件开发\"></a>2、对象级别的插件开发</h2><p>对象级别的插件开发需要如下的两种形式：、</p>\n<p>形式1：  </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function($)&#123;      </div><div class=\"line\">$.fn.extend(&#123;      </div><div class=\"line\">pluginName:function(opt,callback)&#123;      </div><div class=\"line\"> /*Our plugin implementation code goes here.  */      </div><div class=\"line\">&#125;      </div><div class=\"line\">&#125;)      </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>形式2：</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function($) &#123;        </div><div class=\"line\">$.fn.pluginName = function() &#123;      </div><div class=\"line\">/* Our plugin implementation code goes here. </div><div class=\"line\">&#125;;      </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>上面定义了一个jQuery函数,形参是$，函数定义完成之后,把jQuery这个实参传递进去.立即调用执行。这样的好处是,我们在写jQuery插件时,也可以使用$这个别名,而不会与prototype引起冲突.</p>\n<h3 id=\"2-1-在JQuery名称空间下申明一个名字\"><a href=\"#2-1-在JQuery名称空间下申明一个名字\" class=\"headerlink\" title=\"2.1 在JQuery名称空间下申明一个名字\"></a>2.1 在JQuery名称空间下申明一个名字</h3><p>这是一个单一插件的脚本。如果你的脚本中包含多个插件，或者互逆的插件（例如： $.fn.doSomething() 和 $.fn.undoSomething()），那么你需要声明多个函数名字。但是，通常当我们编写一个插件时，力求仅使用一个名字来包含它的所有内容。我们的示例插件命名为“highlight“    </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.hilight = function() &#123;     </div><div class=\"line\">  // Our plugin implementation code goes here.     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们的插件通过这样被调用：<br>$(‘#myDiv’).hilight();     </p>\n<p>但是如果我们需要分解我们的实现代码为多个函数该怎么办？有很多原因：设计上的需要；这样做更容易或更易读的实现；而且这样更符合面向对象。 这真是一个麻烦事，把功能实现分解成多个函数而不增加多余的命名空间。出于认识到和利用函数是javascript中最基本的类对象，我们可以这样做。就像其他对象一样，函数可以被指定为属性。因此我们已经声明“hilight”为jQuery的属性对象，任何其他的属性或者函数我们需要暴露出来的，都可以在”hilight” 函数中被声明属性。稍后继续。</p>\n<h3 id=\"2-2-接受options参数以控制插件的行为\"><a href=\"#2-2-接受options参数以控制插件的行为\" class=\"headerlink\" title=\"2.2 接受options参数以控制插件的行为\"></a>2.2 接受options参数以控制插件的行为</h3><p>让我们为我们的插件添加功能指定前景色和背景色的功能。我们也许会让选项像一个options对象传递给插件函数。例如：   </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// plugin definition     </div><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  var defaults = &#123;     </div><div class=\"line\">    foreground: <span class=\"string\">'red'</span>,     </div><div class=\"line\">    background: <span class=\"string\">'yellow'</span>     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // Extend our default options <span class=\"keyword\">with</span> those provided.     </div><div class=\"line\">  var opts = $.extend(defaults, options);     </div><div class=\"line\">  // Our plugin implementation code goes here.     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们的插件可以这样被调用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#myDiv'</span>).hilight(&#123;     </div><div class=\"line\">  foreground: <span class=\"string\">'blue'</span>     </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-暴露插件的默认设置\"><a href=\"#2-3-暴露插件的默认设置\" class=\"headerlink\" title=\"2.3 暴露插件的默认设置\"></a>2.3 暴露插件的默认设置</h3><p>我们应该对上面代码的一种改进是暴露插件的默认设置。这对于让插件的使用者更容易用较少的代码覆盖和修改插件。接下来我们开始利用函数对象。     </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// plugin definition     </div><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  // Extend our default options <span class=\"keyword\">with</span> those provided.     </div><div class=\"line\">  // Note that the first arg to extend <span class=\"keyword\">is</span> an empty object -     </div><div class=\"line\">  // this <span class=\"keyword\">is</span> to keep <span class=\"keyword\">from</span> overriding our <span class=\"string\">\"defaults\"</span> object.     </div><div class=\"line\">  var opts = $.extend(&#123;&#125;, $.fn.hilight.defaults, options);     </div><div class=\"line\">  // Our plugin implementation code goes here.     </div><div class=\"line\">&#125;;     </div><div class=\"line\">// plugin defaults - added <span class=\"keyword\">as</span> a property on our plugin function     </div><div class=\"line\">$.fn.hilight.defaults = &#123;     </div><div class=\"line\">  foreground: <span class=\"string\">'red'</span>,     </div><div class=\"line\">  background: <span class=\"string\">'yellow'</span>     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>现在使用者可以包含像这样的一行在他们的脚本里：<br>//这个只需要调用一次，且不一定要在ready块中调用<br>$.fn.hilight.defaults.foreground = ‘blue’;<br>接下来我们可以像这样使用插件的方法，结果它设置蓝色的前景色：<br>$(‘#myDiv’).hilight();   </p>\n<p>如你所见，我们允许使用者写一行代码在插件的默认前景色。而且使用者仍然在需要的时候可以有选择的覆盖这些新的默认值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 覆盖插件缺省的背景颜色 </div><div class=\"line\"></div><div class=\"line\">$.fn.hilight.defaults.foreground = <span class=\"string\">'blue'</span>; </div><div class=\"line\"></div><div class=\"line\">// ... </div><div class=\"line\"></div><div class=\"line\">// 使用一个新的缺省设置调用插件 </div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.hilightDiv'</span>).hilight(); </div><div class=\"line\"></div><div class=\"line\">// ... </div><div class=\"line\"></div><div class=\"line\">// 通过传递配置参数给插件方法来覆盖缺省设置 </div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#green'</span>).hilight(&#123; </div><div class=\"line\"></div><div class=\"line\"> foreground: <span class=\"string\">'green'</span> </div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-4-适当的暴露一些函数\"><a href=\"#2-4-适当的暴露一些函数\" class=\"headerlink\" title=\"2.4 适当的暴露一些函数\"></a>2.4 适当的暴露一些函数</h3><p>这段将会一步一步对前面那段代码通过有意思的方法扩展你的插件（同时让其他人扩展你的插件）。例如，我们插件的实现里面可以定义一个名叫”format”的函数来格式化高亮文本。我们的插件现在看起来像这样，默认的format方法的实现部分在hiligth函数下面。</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// plugin definition     </div><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  // iterate <span class=\"keyword\">and</span> reformat each matched element     </div><div class=\"line\">  <span class=\"keyword\">return</span> this.each(function() &#123;     </div><div class=\"line\">    var $this = $(this);     </div><div class=\"line\">    // ...     </div><div class=\"line\">    var markup = $this.html();     </div><div class=\"line\">    // call our format function     </div><div class=\"line\">    markup = $.fn.hilight.format(markup);     </div><div class=\"line\">    $this.html(markup);     </div><div class=\"line\">  &#125;);     </div><div class=\"line\">&#125;;     </div><div class=\"line\">// define our format function     </div><div class=\"line\">$.fn.hilight.format = function(txt) &#123;     </div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">'&lt;strong&gt;'</span> + txt + <span class=\"string\">'&lt;/strong&gt;'</span>;     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们很容易的支持options对象中的其他的属性通过允许一个回调函数来覆盖默认的设置。这是另外一个出色的方法来修改你的插件。这里展示的技巧是进一步有效的暴露format函数进而让他能被重新定义。通过这技巧，是其他人能够传递他们自己设置来覆盖你的插件，换句话说，这样其他人也能够为你的插件写插件。<br>考虑到这个篇文章中我们建立的无用的插件，你也许想知道究竟什么时候这些会有用。一个真实的例子是Cycle插件.这个Cycle插件是一个滑动显示插件，他能支持许多内部变换作用到滚动，滑动，渐变消失等。但是实际上，没有办法定义也许会应用到滑动变化上每种类型的效果。那是这种扩展性有用的地方。 Cycle插件对使用者暴露”transitions”对象，使他们添加自己变换定义。插件中定义就像这样：<br>$.fn.cycle.transitions = { </p>\n<p>// … </p>\n<p>}; </p>\n<p>这个技巧使其他人能定义和传递变换设置到Cycle插件。</p>\n<h3 id=\"2-5-保持私有函数的私有性\"><a href=\"#2-5-保持私有函数的私有性\" class=\"headerlink\" title=\"2.5 保持私有函数的私有性\"></a>2.5 保持私有函数的私有性</h3><p>这种技巧暴露你插件一部分来被覆盖是非常强大的。但是你需要仔细思考你实现中暴露的部分。一但被暴露，你需要在头脑中保持任何对于参数或者语义的改动也许会破坏向后的兼容性。一个通理是，如果你不能肯定是否暴露特定的函数，那么你也许不需要那样做。</p>\n<p>那么我们怎么定义更多的函数而不搅乱命名空间也不暴露实现呢？这就是闭包的功能。为了演示，我们将会添加另外一个“debug”函数到我们的插件中。这个 debug函数将为输出被选中的元素格式到firebug控制台。为了创建一个闭包，我们将包装整个插件定义在一个函数中。 </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> (function($) &#123;     </div><div class=\"line\">  // plugin definition     </div><div class=\"line\">  $.fn.hilight = function(options) &#123;     </div><div class=\"line\">    debug(this);     </div><div class=\"line\">   // ...     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // private function <span class=\"keyword\">for</span> debugging     </div><div class=\"line\">  function debug($obj) &#123;     </div><div class=\"line\">    <span class=\"keyword\">if</span> (window.console &amp;&amp; window.console.log)     </div><div class=\"line\">    window.console.log(<span class=\"string\">'hilight selection count: '</span> + $obj.size());     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">//  ...     </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>我们的“debug”方法不能从外部闭包进入,因此对于我们的实现是私有的。</p>\n<h3 id=\"2-6-支持Metadata插件\"><a href=\"#2-6-支持Metadata插件\" class=\"headerlink\" title=\"2.6 支持Metadata插件\"></a>2.6 支持Metadata插件</h3><p>在你正在写的插件的基础上，添加对Metadata插件的支持能使他更强大。个人来说，我喜欢这个Metadata插件，因为它让你使用不多的”markup”覆盖插件的选项（这非常有用当创建例子时）。而且支持它非常简单。更新：注释中有一点优化建议。</p>\n<p>Java代码<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  // ...     </div><div class=\"line\">  // build main options before element iteration     </div><div class=\"line\">  var opts = $.extend(&#123;&#125;, $.fn.hilight.defaults, options);     </div><div class=\"line\">  return this.each(function() &#123;     </div><div class=\"line\">    var $this = $(this);     </div><div class=\"line\">    // build element specific options     </div><div class=\"line\">    var o = $.meta ? $.extend(&#123;&#125;, opts, $this.data()) : opts;     </div><div class=\"line\">    //...</div></pre></td></tr></table></figure></p>\n<p> 这些变动行做了一些事情：它是测试Metadata插件是否被安装如果它被安装了，它能扩展我们的options对象通过抽取元数据这行作为最后一个参数添加到JQuery.extend，那么它将会覆盖任何其它选项设置。现在我们能从”markup”处驱动行为,如果我们选择了“markup”：</p>\n<p> 调用的时候可以这样写： jQuery.foo(); 或 $.foo(); </p>\n<p>Java代码<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--  markup  --&gt;     </div><div class=\"line\">&lt;div class=\"hilight &#123; background: 'red', foreground: 'white' &#125;\"&gt;     </div><div class=\"line\">  Have a nice day!     </div><div class=\"line\">&lt;/div&gt;     </div><div class=\"line\">&lt;div class=\"hilight &#123; foreground: 'orange' &#125;\"&gt;     </div><div class=\"line\">  Have a nice day!     </div><div class=\"line\">&lt;/div&gt;     </div><div class=\"line\">&lt;div class=\"hilight &#123; background: 'green' &#125;\"&gt;     </div><div class=\"line\">  Have a nice day!     </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>现在我们能高亮哪些div仅使用一行脚本：<br>$(‘.hilight’).hilight();     </p>\n<h3 id=\"2-7-整合\"><a href=\"#2-7-整合\" class=\"headerlink\" title=\"2.7 整合\"></a>2.7 整合</h3><p>下面使我们的例子完成后的代码：</p>\n<p>Java代码<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建一个闭包     </div><div class=\"line\">(function($) &#123;     </div><div class=\"line\">  // 插件的定义     </div><div class=\"line\">  $.fn.hilight = function(options) &#123;     </div><div class=\"line\">    debug(this);     </div><div class=\"line\">    // build main options before element iteration     </div><div class=\"line\">    var opts = $.extend(&#123;&#125;, $.fn.hilight.defaults, options);     </div><div class=\"line\">    // iterate and reformat each matched element     </div><div class=\"line\">    return this.each(function() &#123;     </div><div class=\"line\">    $this = $(this);     </div><div class=\"line\"> // build element specific options     </div><div class=\"line\"> var o = $.meta ? $.extend(&#123;&#125;, opts, $this.data()) : opts;     </div><div class=\"line\"> // update element styles     </div><div class=\"line\">$this.css(&#123;     </div><div class=\"line\">   backgroundColor: o.background,     </div><div class=\"line\">  color: o.foreground     </div><div class=\"line\">  &#125;);     </div><div class=\"line\">  var markup = $this.html();     </div><div class=\"line\">   // call our format function     </div><div class=\"line\"> markup = $.fn.hilight.format(markup);     </div><div class=\"line\"> $this.html(markup);     </div><div class=\"line\">    &#125;);     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // 私有函数：debugging     </div><div class=\"line\">  function debug($obj) &#123;     </div><div class=\"line\">    if (window.console &amp;&amp; window.console.log)     </div><div class=\"line\">      window.console.log('hilight selection count: ' + $obj.size());     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // 定义暴露format函数     </div><div class=\"line\">  $.fn.hilight.format = function(txt) &#123;     </div><div class=\"line\">    return '&lt;strong&gt;' + txt + '&lt;/strong&gt;';     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // 插件的defaults     </div><div class=\"line\">  $.fn.hilight.defaults = &#123;     </div><div class=\"line\">    foreground: 'red',     </div><div class=\"line\">    background: 'yellow'     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">// 闭包结束     </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>这段设计已经让我创建了强大符合规范的插件。我希望它能让你也能做到。</p>\n","excerpt":"","more":"<h1 id=\"Jquery插件的开发包括两种：\"><a href=\"#Jquery插件的开发包括两种：\" class=\"headerlink\" title=\"Jquery插件的开发包括两种：\"></a>Jquery插件的开发包括两种：</h1><p>一种是类级别的插件开发，即给jQuery添加新的全局函数，相当于给jQuery类本身添加方法。jQuery的全局函数就是属于jQuery命名空间的函数，另一种是对象级别的插件开发，即给jQuery对象添加方法。下面就两种函数的开发做详细的说明。</p>\n<h2 id=\"1、类级别的插件开发\"><a href=\"#1、类级别的插件开发\" class=\"headerlink\" title=\"1、类级别的插件开发\"></a>1、类级别的插件开发</h2><p>类级别的插件开发最直接的理解就是给jQuery类添加类方法，可以理解为添加静态方法。典型的例子就是$.AJAX()这个函数，将函数定义于jQuery的命名空间中。关于类级别的插件开发可以采用如下几种形式进行扩展：</p>\n<h3 id=\"1-1-添加一个新的全局函数\"><a href=\"#1-1-添加一个新的全局函数\" class=\"headerlink\" title=\"1.1 添加一个新的全局函数\"></a>1.1 添加一个新的全局函数</h3><p>添加一个全局函数，我们只需如下定义：</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.foo = function() &#123;    </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);   </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-2-增加多个全局函数\"><a href=\"#1-2-增加多个全局函数\" class=\"headerlink\" title=\"1.2 增加多个全局函数\"></a>1.2 增加多个全局函数</h3><p>添加多个全局函数，可采用如下定义：</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.foo = function() &#123;    </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);   </div><div class=\"line\">&#125;;   </div><div class=\"line\">jQuery.bar = function(param) &#123;    </div><div class=\"line\">alert(<span class=\"string\">'This function takes a parameter, which is \"'</span> + param + <span class=\"string\">'\".'</span>);   </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>调用时和一个函数的一样的:jQuery.foo();jQuery.bar();或者$.foo();$.bar(‘bar’);  </p>\n<h3 id=\"1-3-使用jQuery-extend-object\"><a href=\"#1-3-使用jQuery-extend-object\" class=\"headerlink\" title=\"1.3 使用jQuery.extend(object);　\"></a>1.3 使用jQuery.extend(object);　</h3><p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.extend(&#123;       </div><div class=\"line\">foo: function() &#123;       </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);       </div><div class=\"line\">&#125;,       </div><div class=\"line\">bar: function(param) &#123;       </div><div class=\"line\">alert(<span class=\"string\">'This function takes a parameter, which is \"'</span> + param +<span class=\"string\">'\".'</span>);       </div><div class=\"line\">&#125;      </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-4-使用命名空间\"><a href=\"#1-4-使用命名空间\" class=\"headerlink\" title=\"1.4 使用命名空间\"></a>1.4 使用命名空间</h3><p>虽然在jQuery命名空间中，我们禁止使用了大量的javaScript函数名和变量名。但是仍然不可避免某些函数或变量名将于其他jQuery插件冲突，因此我们习惯将一些方法封装到另一个自定义的命名空间。</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.myPlugin = &#123;           </div><div class=\"line\">foo:function() &#123;           </div><div class=\"line\">alert(<span class=\"string\">'This is a test. This is only a test.'</span>);           </div><div class=\"line\">&#125;,           </div><div class=\"line\">bar:function(param) &#123;           </div><div class=\"line\">alert(<span class=\"string\">'This function takes a parameter, which is \"'</span> + param + <span class=\"string\">'\".'</span>);     </div><div class=\"line\">&#125;          </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>采用命名空间的函数仍然是全局函数，调用时采用的方法：<br>$.myPlugin.foo();<br>$.myPlugin.bar(‘baz’);  </p>\n<p>通过这个技巧（使用独立的插件名），我们可以避免命名空间内函数的冲突。</p>\n<h2 id=\"2、对象级别的插件开发\"><a href=\"#2、对象级别的插件开发\" class=\"headerlink\" title=\"2、对象级别的插件开发\"></a>2、对象级别的插件开发</h2><p>对象级别的插件开发需要如下的两种形式：、</p>\n<p>形式1：  </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function($)&#123;      </div><div class=\"line\">$.fn.extend(&#123;      </div><div class=\"line\">pluginName:function(opt,callback)&#123;      </div><div class=\"line\"> /*Our plugin implementation code goes here.  */      </div><div class=\"line\">&#125;      </div><div class=\"line\">&#125;)      </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>形式2：</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function($) &#123;        </div><div class=\"line\">$.fn.pluginName = function() &#123;      </div><div class=\"line\">/* Our plugin implementation code goes here. </div><div class=\"line\">&#125;;      </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>上面定义了一个jQuery函数,形参是$，函数定义完成之后,把jQuery这个实参传递进去.立即调用执行。这样的好处是,我们在写jQuery插件时,也可以使用$这个别名,而不会与prototype引起冲突.</p>\n<h3 id=\"2-1-在JQuery名称空间下申明一个名字\"><a href=\"#2-1-在JQuery名称空间下申明一个名字\" class=\"headerlink\" title=\"2.1 在JQuery名称空间下申明一个名字\"></a>2.1 在JQuery名称空间下申明一个名字</h3><p>这是一个单一插件的脚本。如果你的脚本中包含多个插件，或者互逆的插件（例如： $.fn.doSomething() 和 $.fn.undoSomething()），那么你需要声明多个函数名字。但是，通常当我们编写一个插件时，力求仅使用一个名字来包含它的所有内容。我们的示例插件命名为“highlight“    </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.hilight = function() &#123;     </div><div class=\"line\">  // Our plugin implementation code goes here.     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们的插件通过这样被调用：<br>$(‘#myDiv’).hilight();     </p>\n<p>但是如果我们需要分解我们的实现代码为多个函数该怎么办？有很多原因：设计上的需要；这样做更容易或更易读的实现；而且这样更符合面向对象。 这真是一个麻烦事，把功能实现分解成多个函数而不增加多余的命名空间。出于认识到和利用函数是javascript中最基本的类对象，我们可以这样做。就像其他对象一样，函数可以被指定为属性。因此我们已经声明“hilight”为jQuery的属性对象，任何其他的属性或者函数我们需要暴露出来的，都可以在”hilight” 函数中被声明属性。稍后继续。</p>\n<h3 id=\"2-2-接受options参数以控制插件的行为\"><a href=\"#2-2-接受options参数以控制插件的行为\" class=\"headerlink\" title=\"2.2 接受options参数以控制插件的行为\"></a>2.2 接受options参数以控制插件的行为</h3><p>让我们为我们的插件添加功能指定前景色和背景色的功能。我们也许会让选项像一个options对象传递给插件函数。例如：   </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// plugin definition     </div><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  var defaults = &#123;     </div><div class=\"line\">    foreground: <span class=\"string\">'red'</span>,     </div><div class=\"line\">    background: <span class=\"string\">'yellow'</span>     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // Extend our default options <span class=\"keyword\">with</span> those provided.     </div><div class=\"line\">  var opts = $.extend(defaults, options);     </div><div class=\"line\">  // Our plugin implementation code goes here.     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们的插件可以这样被调用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#myDiv'</span>).hilight(&#123;     </div><div class=\"line\">  foreground: <span class=\"string\">'blue'</span>     </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-暴露插件的默认设置\"><a href=\"#2-3-暴露插件的默认设置\" class=\"headerlink\" title=\"2.3 暴露插件的默认设置\"></a>2.3 暴露插件的默认设置</h3><p>我们应该对上面代码的一种改进是暴露插件的默认设置。这对于让插件的使用者更容易用较少的代码覆盖和修改插件。接下来我们开始利用函数对象。     </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// plugin definition     </div><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  // Extend our default options <span class=\"keyword\">with</span> those provided.     </div><div class=\"line\">  // Note that the first arg to extend <span class=\"keyword\">is</span> an empty object -     </div><div class=\"line\">  // this <span class=\"keyword\">is</span> to keep <span class=\"keyword\">from</span> overriding our <span class=\"string\">\"defaults\"</span> object.     </div><div class=\"line\">  var opts = $.extend(&#123;&#125;, $.fn.hilight.defaults, options);     </div><div class=\"line\">  // Our plugin implementation code goes here.     </div><div class=\"line\">&#125;;     </div><div class=\"line\">// plugin defaults - added <span class=\"keyword\">as</span> a property on our plugin function     </div><div class=\"line\">$.fn.hilight.defaults = &#123;     </div><div class=\"line\">  foreground: <span class=\"string\">'red'</span>,     </div><div class=\"line\">  background: <span class=\"string\">'yellow'</span>     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>现在使用者可以包含像这样的一行在他们的脚本里：<br>//这个只需要调用一次，且不一定要在ready块中调用<br>$.fn.hilight.defaults.foreground = ‘blue’;<br>接下来我们可以像这样使用插件的方法，结果它设置蓝色的前景色：<br>$(‘#myDiv’).hilight();   </p>\n<p>如你所见，我们允许使用者写一行代码在插件的默认前景色。而且使用者仍然在需要的时候可以有选择的覆盖这些新的默认值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 覆盖插件缺省的背景颜色 </div><div class=\"line\"></div><div class=\"line\">$.fn.hilight.defaults.foreground = <span class=\"string\">'blue'</span>; </div><div class=\"line\"></div><div class=\"line\">// ... </div><div class=\"line\"></div><div class=\"line\">// 使用一个新的缺省设置调用插件 </div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'.hilightDiv'</span>).hilight(); </div><div class=\"line\"></div><div class=\"line\">// ... </div><div class=\"line\"></div><div class=\"line\">// 通过传递配置参数给插件方法来覆盖缺省设置 </div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#green'</span>).hilight(&#123; </div><div class=\"line\"></div><div class=\"line\"> foreground: <span class=\"string\">'green'</span> </div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-4-适当的暴露一些函数\"><a href=\"#2-4-适当的暴露一些函数\" class=\"headerlink\" title=\"2.4 适当的暴露一些函数\"></a>2.4 适当的暴露一些函数</h3><p>这段将会一步一步对前面那段代码通过有意思的方法扩展你的插件（同时让其他人扩展你的插件）。例如，我们插件的实现里面可以定义一个名叫”format”的函数来格式化高亮文本。我们的插件现在看起来像这样，默认的format方法的实现部分在hiligth函数下面。</p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">// plugin definition     </div><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  // iterate <span class=\"keyword\">and</span> reformat each matched element     </div><div class=\"line\">  <span class=\"keyword\">return</span> this.each(function() &#123;     </div><div class=\"line\">    var $this = $(this);     </div><div class=\"line\">    // ...     </div><div class=\"line\">    var markup = $this.html();     </div><div class=\"line\">    // call our format function     </div><div class=\"line\">    markup = $.fn.hilight.format(markup);     </div><div class=\"line\">    $this.html(markup);     </div><div class=\"line\">  &#125;);     </div><div class=\"line\">&#125;;     </div><div class=\"line\">// define our format function     </div><div class=\"line\">$.fn.hilight.format = function(txt) &#123;     </div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">'&lt;strong&gt;'</span> + txt + <span class=\"string\">'&lt;/strong&gt;'</span>;     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我们很容易的支持options对象中的其他的属性通过允许一个回调函数来覆盖默认的设置。这是另外一个出色的方法来修改你的插件。这里展示的技巧是进一步有效的暴露format函数进而让他能被重新定义。通过这技巧，是其他人能够传递他们自己设置来覆盖你的插件，换句话说，这样其他人也能够为你的插件写插件。<br>考虑到这个篇文章中我们建立的无用的插件，你也许想知道究竟什么时候这些会有用。一个真实的例子是Cycle插件.这个Cycle插件是一个滑动显示插件，他能支持许多内部变换作用到滚动，滑动，渐变消失等。但是实际上，没有办法定义也许会应用到滑动变化上每种类型的效果。那是这种扩展性有用的地方。 Cycle插件对使用者暴露”transitions”对象，使他们添加自己变换定义。插件中定义就像这样：<br>$.fn.cycle.transitions = { </p>\n<p>// … </p>\n<p>}; </p>\n<p>这个技巧使其他人能定义和传递变换设置到Cycle插件。</p>\n<h3 id=\"2-5-保持私有函数的私有性\"><a href=\"#2-5-保持私有函数的私有性\" class=\"headerlink\" title=\"2.5 保持私有函数的私有性\"></a>2.5 保持私有函数的私有性</h3><p>这种技巧暴露你插件一部分来被覆盖是非常强大的。但是你需要仔细思考你实现中暴露的部分。一但被暴露，你需要在头脑中保持任何对于参数或者语义的改动也许会破坏向后的兼容性。一个通理是，如果你不能肯定是否暴露特定的函数，那么你也许不需要那样做。</p>\n<p>那么我们怎么定义更多的函数而不搅乱命名空间也不暴露实现呢？这就是闭包的功能。为了演示，我们将会添加另外一个“debug”函数到我们的插件中。这个 debug函数将为输出被选中的元素格式到firebug控制台。为了创建一个闭包，我们将包装整个插件定义在一个函数中。 </p>\n<p>Java代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> (function($) &#123;     </div><div class=\"line\">  // plugin definition     </div><div class=\"line\">  $.fn.hilight = function(options) &#123;     </div><div class=\"line\">    debug(this);     </div><div class=\"line\">   // ...     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // private function <span class=\"keyword\">for</span> debugging     </div><div class=\"line\">  function debug($obj) &#123;     </div><div class=\"line\">    <span class=\"keyword\">if</span> (window.console &amp;&amp; window.console.log)     </div><div class=\"line\">    window.console.log(<span class=\"string\">'hilight selection count: '</span> + $obj.size());     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">//  ...     </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>我们的“debug”方法不能从外部闭包进入,因此对于我们的实现是私有的。</p>\n<h3 id=\"2-6-支持Metadata插件\"><a href=\"#2-6-支持Metadata插件\" class=\"headerlink\" title=\"2.6 支持Metadata插件\"></a>2.6 支持Metadata插件</h3><p>在你正在写的插件的基础上，添加对Metadata插件的支持能使他更强大。个人来说，我喜欢这个Metadata插件，因为它让你使用不多的”markup”覆盖插件的选项（这非常有用当创建例子时）。而且支持它非常简单。更新：注释中有一点优化建议。</p>\n<p>Java代码<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.fn.hilight = function(options) &#123;     </div><div class=\"line\">  // ...     </div><div class=\"line\">  // build main options before element iteration     </div><div class=\"line\">  var opts = $.extend(&#123;&#125;, $.fn.hilight.defaults, options);     </div><div class=\"line\">  return this.each(function() &#123;     </div><div class=\"line\">    var $this = $(this);     </div><div class=\"line\">    // build element specific options     </div><div class=\"line\">    var o = $.meta ? $.extend(&#123;&#125;, opts, $this.data()) : opts;     </div><div class=\"line\">    //...</div></pre></td></tr></table></figure></p>\n<p> 这些变动行做了一些事情：它是测试Metadata插件是否被安装如果它被安装了，它能扩展我们的options对象通过抽取元数据这行作为最后一个参数添加到JQuery.extend，那么它将会覆盖任何其它选项设置。现在我们能从”markup”处驱动行为,如果我们选择了“markup”：</p>\n<p> 调用的时候可以这样写： jQuery.foo(); 或 $.foo(); </p>\n<p>Java代码<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--  markup  --&gt;     </div><div class=\"line\">&lt;div class=\"hilight &#123; background: 'red', foreground: 'white' &#125;\"&gt;     </div><div class=\"line\">  Have a nice day!     </div><div class=\"line\">&lt;/div&gt;     </div><div class=\"line\">&lt;div class=\"hilight &#123; foreground: 'orange' &#125;\"&gt;     </div><div class=\"line\">  Have a nice day!     </div><div class=\"line\">&lt;/div&gt;     </div><div class=\"line\">&lt;div class=\"hilight &#123; background: 'green' &#125;\"&gt;     </div><div class=\"line\">  Have a nice day!     </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>现在我们能高亮哪些div仅使用一行脚本：<br>$(‘.hilight’).hilight();     </p>\n<h3 id=\"2-7-整合\"><a href=\"#2-7-整合\" class=\"headerlink\" title=\"2.7 整合\"></a>2.7 整合</h3><p>下面使我们的例子完成后的代码：</p>\n<p>Java代码<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建一个闭包     </div><div class=\"line\">(function($) &#123;     </div><div class=\"line\">  // 插件的定义     </div><div class=\"line\">  $.fn.hilight = function(options) &#123;     </div><div class=\"line\">    debug(this);     </div><div class=\"line\">    // build main options before element iteration     </div><div class=\"line\">    var opts = $.extend(&#123;&#125;, $.fn.hilight.defaults, options);     </div><div class=\"line\">    // iterate and reformat each matched element     </div><div class=\"line\">    return this.each(function() &#123;     </div><div class=\"line\">    $this = $(this);     </div><div class=\"line\"> // build element specific options     </div><div class=\"line\"> var o = $.meta ? $.extend(&#123;&#125;, opts, $this.data()) : opts;     </div><div class=\"line\"> // update element styles     </div><div class=\"line\">$this.css(&#123;     </div><div class=\"line\">   backgroundColor: o.background,     </div><div class=\"line\">  color: o.foreground     </div><div class=\"line\">  &#125;);     </div><div class=\"line\">  var markup = $this.html();     </div><div class=\"line\">   // call our format function     </div><div class=\"line\"> markup = $.fn.hilight.format(markup);     </div><div class=\"line\"> $this.html(markup);     </div><div class=\"line\">    &#125;);     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // 私有函数：debugging     </div><div class=\"line\">  function debug($obj) &#123;     </div><div class=\"line\">    if (window.console &amp;&amp; window.console.log)     </div><div class=\"line\">      window.console.log('hilight selection count: ' + $obj.size());     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // 定义暴露format函数     </div><div class=\"line\">  $.fn.hilight.format = function(txt) &#123;     </div><div class=\"line\">    return '&lt;strong&gt;' + txt + '&lt;/strong&gt;';     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">  // 插件的defaults     </div><div class=\"line\">  $.fn.hilight.defaults = &#123;     </div><div class=\"line\">    foreground: 'red',     </div><div class=\"line\">    background: 'yellow'     </div><div class=\"line\">  &#125;;     </div><div class=\"line\">// 闭包结束     </div><div class=\"line\">&#125;)(jQuery);</div></pre></td></tr></table></figure></p>\n<p>这段设计已经让我创建了强大符合规范的插件。我希望它能让你也能做到。</p>\n"},{"title":"Technical Term","date":"2016-12-14T01:10:25.000Z","_content":"\n\n###模块规范\n\n* CommonJS - 规范了js在任何地方运行，不限于浏览器中，定义的模块为模块引用（require）、模块定义（exports）、模块标识（module）,NodeJs就是基于CommonJs做了一些取舍和补充的重要应用。\n* AMD - 异步模块加载，接口为define(id?,dependencies?,factory),需要声明模块的时候制定所有以来dep，并且作为形参传入factory中，例如definr(['dep1','dep2'],function(dep1,dep2){...});RequireJS实现了AMD规范\n* CMD\n\n###专业术语\n* module bundler - 模块打包\n* flexible - 灵活\n* unbiased - 无偏\n* extensible - 可扩展的\n* framework - 框架\n \n ","source":"_posts/Technical-Term.md","raw":"---\ntitle: Technical Term\ndate: 2016-12-14 09:10:25\ntags:\n---\n\n\n###模块规范\n\n* CommonJS - 规范了js在任何地方运行，不限于浏览器中，定义的模块为模块引用（require）、模块定义（exports）、模块标识（module）,NodeJs就是基于CommonJs做了一些取舍和补充的重要应用。\n* AMD - 异步模块加载，接口为define(id?,dependencies?,factory),需要声明模块的时候制定所有以来dep，并且作为形参传入factory中，例如definr(['dep1','dep2'],function(dep1,dep2){...});RequireJS实现了AMD规范\n* CMD\n\n###专业术语\n* module bundler - 模块打包\n* flexible - 灵活\n* unbiased - 无偏\n* extensible - 可扩展的\n* framework - 框架\n \n ","slug":"Technical-Term","published":1,"updated":"2016-12-16T07:58:07.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixr64idt0004z8jo1mlw8kkz","content":"<p>###模块规范</p>\n<ul>\n<li>CommonJS - 规范了js在任何地方运行，不限于浏览器中，定义的模块为模块引用（require）、模块定义（exports）、模块标识（module）,NodeJs就是基于CommonJs做了一些取舍和补充的重要应用。</li>\n<li>AMD - 异步模块加载，接口为define(id?,dependencies?,factory),需要声明模块的时候制定所有以来dep，并且作为形参传入factory中，例如definr([‘dep1’,’dep2’],function(dep1,dep2){…});RequireJS实现了AMD规范</li>\n<li>CMD</li>\n</ul>\n<p>###专业术语</p>\n<ul>\n<li>module bundler - 模块打包</li>\n<li>flexible - 灵活</li>\n<li>unbiased - 无偏</li>\n<li>extensible - 可扩展的</li>\n<li>framework - 框架</li>\n</ul>\n","excerpt":"","more":"<p>###模块规范</p>\n<ul>\n<li>CommonJS - 规范了js在任何地方运行，不限于浏览器中，定义的模块为模块引用（require）、模块定义（exports）、模块标识（module）,NodeJs就是基于CommonJs做了一些取舍和补充的重要应用。</li>\n<li>AMD - 异步模块加载，接口为define(id?,dependencies?,factory),需要声明模块的时候制定所有以来dep，并且作为形参传入factory中，例如definr([‘dep1’,’dep2’],function(dep1,dep2){…});RequireJS实现了AMD规范</li>\n<li>CMD</li>\n</ul>\n<p>###专业术语</p>\n<ul>\n<li>module bundler - 模块打包</li>\n<li>flexible - 灵活</li>\n<li>unbiased - 无偏</li>\n<li>extensible - 可扩展的</li>\n<li>framework - 框架</li>\n</ul>\n"},{"title":"js自执行函数","date":"2016-12-15T06:59:19.000Z","_content":"js自执行函数的几种不同写法的比较\n\n经常需要一个函数自执行，可惜这一种写法是错的： \n复制代码 代码如下:\n```python\nfunction(){alert(1);}(); \n```\n\n原因是前半段“function(){alert(1);}”被当成了函数声明，而不是一个函数表达式，从而让后面的“();”变得孤立，产生语法错。 \n\n按上面的分析，这一段代码虽说没有语法错，但也是不符合我们的预期的，因为这个函数并没有自执行。 \n复制代码 代码如下:\n\n```python\nfunction(){alert(1);}(1); \n```\n综上，症结在于，如何明确代码描述的是一个函数表达式，而不是函数声明语句。 \n正确的写法多种多样，也各有利弊： \n\n方法1：最前最后加括号 \n\n复制代码 代码如下:\n```python\n(function(){alert(1);}()); \n```\n这是jslint推荐的写法，好处是，能提醒阅读代码的人，这段代码是一个整体。 \n例如，在有语法高亮匹配功能的编辑器里，光标在第一个左括号后时，最后一个右括号也会高亮，看代码的人一眼就可以看到这个整体。 \n不过，对于某些写代码不喜欢在行后加分号的同学，也会形成一些坑坑，例如以下代码会报运行错： \n复制代码 代码如下:\n```python\nvar a=1 \n(function(){alert(1);}()); \n```\n\n方法2：function外面加括号 \n\n复制代码 代码如下:\n```python\n(function(){alert(1);})(); \n```\n这种做法比方法1少了一个代码整体性的好处。 \n\n方法3：function前面加运算符，常见的是!与void 。 \n复制代码 代码如下:\n```python\n!function(){alert(1);}(); \nvoid function(){alert(2);}(); \n```\n\n显然，加上“!”或“+”等运算符，写起来是最简单的。 \n加上“void ”要敲五下键盘，但是听说有一个好处是，比加\"!\"少一次逻辑运算。----我只是听说，不明所以。 \n\n最后，代表我个人，强烈支持方法1,即jslint的推荐写法： \n复制代码 代码如下:\n```python\n(function(){alert(1);}()); \n```","source":"_posts/js自执行函数.md","raw":"---\ntitle: js自执行函数\ndate: 2016-12-15 14:59:19\ntags:\n---\njs自执行函数的几种不同写法的比较\n\n经常需要一个函数自执行，可惜这一种写法是错的： \n复制代码 代码如下:\n```python\nfunction(){alert(1);}(); \n```\n\n原因是前半段“function(){alert(1);}”被当成了函数声明，而不是一个函数表达式，从而让后面的“();”变得孤立，产生语法错。 \n\n按上面的分析，这一段代码虽说没有语法错，但也是不符合我们的预期的，因为这个函数并没有自执行。 \n复制代码 代码如下:\n\n```python\nfunction(){alert(1);}(1); \n```\n综上，症结在于，如何明确代码描述的是一个函数表达式，而不是函数声明语句。 \n正确的写法多种多样，也各有利弊： \n\n方法1：最前最后加括号 \n\n复制代码 代码如下:\n```python\n(function(){alert(1);}()); \n```\n这是jslint推荐的写法，好处是，能提醒阅读代码的人，这段代码是一个整体。 \n例如，在有语法高亮匹配功能的编辑器里，光标在第一个左括号后时，最后一个右括号也会高亮，看代码的人一眼就可以看到这个整体。 \n不过，对于某些写代码不喜欢在行后加分号的同学，也会形成一些坑坑，例如以下代码会报运行错： \n复制代码 代码如下:\n```python\nvar a=1 \n(function(){alert(1);}()); \n```\n\n方法2：function外面加括号 \n\n复制代码 代码如下:\n```python\n(function(){alert(1);})(); \n```\n这种做法比方法1少了一个代码整体性的好处。 \n\n方法3：function前面加运算符，常见的是!与void 。 \n复制代码 代码如下:\n```python\n!function(){alert(1);}(); \nvoid function(){alert(2);}(); \n```\n\n显然，加上“!”或“+”等运算符，写起来是最简单的。 \n加上“void ”要敲五下键盘，但是听说有一个好处是，比加\"!\"少一次逻辑运算。----我只是听说，不明所以。 \n\n最后，代表我个人，强烈支持方法1,即jslint的推荐写法： \n复制代码 代码如下:\n```python\n(function(){alert(1);}()); \n```","slug":"js自执行函数","published":1,"updated":"2016-12-16T08:01:44.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixr64idu0005z8jo864iu5aj","content":"<p>js自执行函数的几种不同写法的比较</p>\n<p>经常需要一个函数自执行，可惜这一种写法是错的：<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">function()&#123;alert(<span class=\"number\">1</span>);&#125;();</div></pre></td></tr></table></figure></p>\n<p>原因是前半段“function(){alert(1);}”被当成了函数声明，而不是一个函数表达式，从而让后面的“();”变得孤立，产生语法错。 </p>\n<p>按上面的分析，这一段代码虽说没有语法错，但也是不符合我们的预期的，因为这个函数并没有自执行。<br>复制代码 代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">function()&#123;alert(<span class=\"number\">1</span>);&#125;(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<p>综上，症结在于，如何明确代码描述的是一个函数表达式，而不是函数声明语句。<br>正确的写法多种多样，也各有利弊： </p>\n<p>方法1：最前最后加括号 </p>\n<p>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;());</div></pre></td></tr></table></figure></p>\n<p>这是jslint推荐的写法，好处是，能提醒阅读代码的人，这段代码是一个整体。<br>例如，在有语法高亮匹配功能的编辑器里，光标在第一个左括号后时，最后一个右括号也会高亮，看代码的人一眼就可以看到这个整体。<br>不过，对于某些写代码不喜欢在行后加分号的同学，也会形成一些坑坑，例如以下代码会报运行错：<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a=<span class=\"number\">1</span> </div><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;());</div></pre></td></tr></table></figure></p>\n<p>方法2：function外面加括号 </p>\n<p>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;)();</div></pre></td></tr></table></figure></p>\n<p>这种做法比方法1少了一个代码整体性的好处。 </p>\n<p>方法3：function前面加运算符，常见的是!与void 。<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">!function()&#123;alert(<span class=\"number\">1</span>);&#125;(); </div><div class=\"line\">void function()&#123;alert(<span class=\"number\">2</span>);&#125;();</div></pre></td></tr></table></figure></p>\n<p>显然，加上“!”或“+”等运算符，写起来是最简单的。<br>加上“void ”要敲五下键盘，但是听说有一个好处是，比加”!”少一次逻辑运算。—-我只是听说，不明所以。 </p>\n<p>最后，代表我个人，强烈支持方法1,即jslint的推荐写法：<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;());</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>js自执行函数的几种不同写法的比较</p>\n<p>经常需要一个函数自执行，可惜这一种写法是错的：<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">function()&#123;alert(<span class=\"number\">1</span>);&#125;();</div></pre></td></tr></table></figure></p>\n<p>原因是前半段“function(){alert(1);}”被当成了函数声明，而不是一个函数表达式，从而让后面的“();”变得孤立，产生语法错。 </p>\n<p>按上面的分析，这一段代码虽说没有语法错，但也是不符合我们的预期的，因为这个函数并没有自执行。<br>复制代码 代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">function()&#123;alert(<span class=\"number\">1</span>);&#125;(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure>\n<p>综上，症结在于，如何明确代码描述的是一个函数表达式，而不是函数声明语句。<br>正确的写法多种多样，也各有利弊： </p>\n<p>方法1：最前最后加括号 </p>\n<p>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;());</div></pre></td></tr></table></figure></p>\n<p>这是jslint推荐的写法，好处是，能提醒阅读代码的人，这段代码是一个整体。<br>例如，在有语法高亮匹配功能的编辑器里，光标在第一个左括号后时，最后一个右括号也会高亮，看代码的人一眼就可以看到这个整体。<br>不过，对于某些写代码不喜欢在行后加分号的同学，也会形成一些坑坑，例如以下代码会报运行错：<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a=<span class=\"number\">1</span> </div><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;());</div></pre></td></tr></table></figure></p>\n<p>方法2：function外面加括号 </p>\n<p>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;)();</div></pre></td></tr></table></figure></p>\n<p>这种做法比方法1少了一个代码整体性的好处。 </p>\n<p>方法3：function前面加运算符，常见的是!与void 。<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">!function()&#123;alert(<span class=\"number\">1</span>);&#125;(); </div><div class=\"line\">void function()&#123;alert(<span class=\"number\">2</span>);&#125;();</div></pre></td></tr></table></figure></p>\n<p>显然，加上“!”或“+”等运算符，写起来是最简单的。<br>加上“void ”要敲五下键盘，但是听说有一个好处是，比加”!”少一次逻辑运算。—-我只是听说，不明所以。 </p>\n<p>最后，代表我个人，强烈支持方法1,即jslint的推荐写法：<br>复制代码 代码如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;alert(<span class=\"number\">1</span>);&#125;());</div></pre></td></tr></table></figure></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-12-13T07:22:20.237Z","updated":"2016-12-13T07:22:20.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixr64ie30006z8jofsc45116","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}